
stm32f103_fw_module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e98  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08003fa4  08003fa4  00013fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040c8  080040c8  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  080040c8  080040c8  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040c8  080040c8  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040c8  080040c8  000140c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040cc  080040cc  000140cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080040d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000404  20000084  08004154  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  08004154  00020488  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dfe5  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000292d  00000000  00000000  0002e092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  000309c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000858  00000000  00000000  00031320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192ef  00000000  00000000  00031b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ea00  00000000  00000000  0004ae67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083790  00000000  00000000  00059867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dcff7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002660  00000000  00000000  000dd04c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	08003f8c 	.word	0x08003f8c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	08003f8c 	.word	0x08003f8c

0800014c <apInit>:




void apInit(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
   uartOpen(_DEF_UART1, 9600); /* DFplayer와 통신하기 위한 UART 설정, Default : 9600/8/n/1/n */
 8000150:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8000154:	2000      	movs	r0, #0
 8000156:	f000 fd61 	bl	8000c1c <uartOpen>
   uartOpen(_DEF_UART2, 115200);
 800015a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800015e:	2001      	movs	r0, #1
 8000160:	f000 fd5c 	bl	8000c1c <uartOpen>
}
 8000164:	bf00      	nop
 8000166:	bd80      	pop	{r7, pc}

08000168 <apDFPlayerTest>:
}


/* DFplayer 모듈  테스트 */
void apDFPlayerTest(void)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	b082      	sub	sp, #8
 800016c:	af00      	add	r7, sp, #0

	char rx_data;

	dfplayer_SetSource(PLAYBACK_SOURCE_TF);
 800016e:	2001      	movs	r0, #1
 8000170:	f000 fb79 	bl	8000866 <dfplayer_SetSource>
	dfplayer_SetVolume(10);
 8000174:	200a      	movs	r0, #10
 8000176:	f000 fb4d 	bl	8000814 <dfplayer_SetVolume>
	dfplayer_SetEQ(EQ_CLASSIC);
 800017a:	2004      	movs	r0, #4
 800017c:	f000 fb5e 	bl	800083c <dfplayer_SetEQ>
//	dfplayer_RepeatTrack(1);

	while(1)
	{
		if (uartAvailable(_DEF_UART2) > 0)
 8000180:	2001      	movs	r0, #1
 8000182:	f000 fe5f 	bl	8000e44 <uartAvailable>
 8000186:	4603      	mov	r3, r0
 8000188:	2b00      	cmp	r3, #0
 800018a:	f000 8095 	beq.w	80002b8 <apDFPlayerTest+0x150>
		{
			rx_data = uartRead(_DEF_UART2);
 800018e:	2001      	movs	r0, #1
 8000190:	f000 fea0 	bl	8000ed4 <uartRead>
 8000194:	4603      	mov	r3, r0
 8000196:	71fb      	strb	r3, [r7, #7]
			uartPrintf(_DEF_UART2, "%c\n", rx_data);
 8000198:	79fb      	ldrb	r3, [r7, #7]
 800019a:	461a      	mov	r2, r3
 800019c:	4948      	ldr	r1, [pc, #288]	; (80002c0 <apDFPlayerTest+0x158>)
 800019e:	2001      	movs	r0, #1
 80001a0:	f000 ff3e 	bl	8001020 <uartPrintf>

			switch (rx_data)
 80001a4:	79fb      	ldrb	r3, [r7, #7]
 80001a6:	3b41      	subs	r3, #65	; 0x41
 80001a8:	2b17      	cmp	r3, #23
 80001aa:	f200 8087 	bhi.w	80002bc <apDFPlayerTest+0x154>
 80001ae:	a201      	add	r2, pc, #4	; (adr r2, 80001b4 <apDFPlayerTest+0x4c>)
 80001b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001b4:	08000231 	.word	0x08000231
 80001b8:	080002bd 	.word	0x080002bd
 80001bc:	080002bd 	.word	0x080002bd
 80001c0:	08000223 	.word	0x08000223
 80001c4:	08000277 	.word	0x08000277
 80001c8:	080002bd 	.word	0x080002bd
 80001cc:	080002bd 	.word	0x080002bd
 80001d0:	080002bd 	.word	0x080002bd
 80001d4:	080002bd 	.word	0x080002bd
 80001d8:	080002bd 	.word	0x080002bd
 80001dc:	08000295 	.word	0x08000295
 80001e0:	080002a9 	.word	0x080002a9
 80001e4:	080002bd 	.word	0x080002bd
 80001e8:	080002bd 	.word	0x080002bd
 80001ec:	080002bd 	.word	0x080002bd
 80001f0:	080002bd 	.word	0x080002bd
 80001f4:	0800023f 	.word	0x0800023f
 80001f8:	080002bd 	.word	0x080002bd
 80001fc:	08000215 	.word	0x08000215
 8000200:	08000287 	.word	0x08000287
 8000204:	080002bd 	.word	0x080002bd
 8000208:	08000269 	.word	0x08000269
 800020c:	0800024d 	.word	0x0800024d
 8000210:	0800025b 	.word	0x0800025b
			{
				case 'S':
					dfplayer_Play();
 8000214:	f000 fb3a 	bl	800088c <dfplayer_Play>
					uartPrintf(_DEF_UART2, "Playing...\r\n");
 8000218:	492a      	ldr	r1, [pc, #168]	; (80002c4 <apDFPlayerTest+0x15c>)
 800021a:	2001      	movs	r0, #1
 800021c:	f000 ff00 	bl	8001020 <uartPrintf>
					break;
 8000220:	e04d      	b.n	80002be <apDFPlayerTest+0x156>

				case 'D':
					dfplayer_Next();
 8000222:	f000 fad3 	bl	80007cc <dfplayer_Next>
					uartPrintf(_DEF_UART2, "Playing Next Song...\r\n");
 8000226:	4928      	ldr	r1, [pc, #160]	; (80002c8 <apDFPlayerTest+0x160>)
 8000228:	2001      	movs	r0, #1
 800022a:	f000 fef9 	bl	8001020 <uartPrintf>
					break;
 800022e:	e046      	b.n	80002be <apDFPlayerTest+0x156>

				case 'A':
					dfplayer_Previous();
 8000230:	f000 fad5 	bl	80007de <dfplayer_Previous>
					uartPrintf(_DEF_UART2, "Playing Previous Song...\r\n");
 8000234:	4925      	ldr	r1, [pc, #148]	; (80002cc <apDFPlayerTest+0x164>)
 8000236:	2001      	movs	r0, #1
 8000238:	f000 fef2 	bl	8001020 <uartPrintf>
					break;
 800023c:	e03f      	b.n	80002be <apDFPlayerTest+0x156>

				case 'Q':
					dfplayer_Pause();
 800023e:	f000 fb2e 	bl	800089e <dfplayer_Pause>
					uartPrintf(_DEF_UART2, "Pause\r\n");
 8000242:	4923      	ldr	r1, [pc, #140]	; (80002d0 <apDFPlayerTest+0x168>)
 8000244:	2001      	movs	r0, #1
 8000246:	f000 feeb 	bl	8001020 <uartPrintf>
					break;
 800024a:	e038      	b.n	80002be <apDFPlayerTest+0x156>

				case 'W':
					dfplayer_IncreaseVolume();
 800024c:	f000 fad0 	bl	80007f0 <dfplayer_IncreaseVolume>
					uartPrintf(_DEF_UART2, "Volume Up\r\n");
 8000250:	4920      	ldr	r1, [pc, #128]	; (80002d4 <apDFPlayerTest+0x16c>)
 8000252:	2001      	movs	r0, #1
 8000254:	f000 fee4 	bl	8001020 <uartPrintf>
					break;
 8000258:	e031      	b.n	80002be <apDFPlayerTest+0x156>

				case 'X':
					dfplayer_DecreaseVolume();
 800025a:	f000 fad2 	bl	8000802 <dfplayer_DecreaseVolume>
					uartPrintf(_DEF_UART2, "Volume Down\n");
 800025e:	491e      	ldr	r1, [pc, #120]	; (80002d8 <apDFPlayerTest+0x170>)
 8000260:	2001      	movs	r0, #1
 8000262:	f000 fedd 	bl	8001020 <uartPrintf>
					break;
 8000266:	e02a      	b.n	80002be <apDFPlayerTest+0x156>

				case 'V':
					dfplayer_Stop();
 8000268:	f000 fb60 	bl	800092c <dfplayer_Stop>
					uartPrintf(_DEF_UART2, "Stop\n");
 800026c:	491b      	ldr	r1, [pc, #108]	; (80002dc <apDFPlayerTest+0x174>)
 800026e:	2001      	movs	r0, #1
 8000270:	f000 fed6 	bl	8001020 <uartPrintf>
					break;
 8000274:	e023      	b.n	80002be <apDFPlayerTest+0x156>

				case 'E':
					dfplayer_InsertAdvertisement(1);
 8000276:	2001      	movs	r0, #1
 8000278:	f000 fb1a 	bl	80008b0 <dfplayer_InsertAdvertisement>
					uartPrintf(_DEF_UART2, "Ad Start\n");
 800027c:	4918      	ldr	r1, [pc, #96]	; (80002e0 <apDFPlayerTest+0x178>)
 800027e:	2001      	movs	r0, #1
 8000280:	f000 fece 	bl	8001020 <uartPrintf>
					break;
 8000284:	e01b      	b.n	80002be <apDFPlayerTest+0x156>

				case 'T':
					dfplayer_StopAdvertisement();
 8000286:	f000 fb48 	bl	800091a <dfplayer_StopAdvertisement>
					uartPrintf(_DEF_UART2, "AD Stop & Go Back\n");
 800028a:	4916      	ldr	r1, [pc, #88]	; (80002e4 <apDFPlayerTest+0x17c>)
 800028c:	2001      	movs	r0, #1
 800028e:	f000 fec7 	bl	8001020 <uartPrintf>
					break;
 8000292:	e014      	b.n	80002be <apDFPlayerTest+0x156>

				case 'K':
					dfplayer_Play3KFolder(2, 3000);
 8000294:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000298:	2002      	movs	r0, #2
 800029a:	f000 fb1c 	bl	80008d6 <dfplayer_Play3KFolder>
					uartPrintf(_DEF_UART2, "Test\n");
 800029e:	4912      	ldr	r1, [pc, #72]	; (80002e8 <apDFPlayerTest+0x180>)
 80002a0:	2001      	movs	r0, #1
 80002a2:	f000 febd 	bl	8001020 <uartPrintf>
					break;
 80002a6:	e00a      	b.n	80002be <apDFPlayerTest+0x156>

				case 'L':
					dfplayer_RepeatTrackInFolder(0x02);
 80002a8:	2002      	movs	r0, #2
 80002aa:	f000 fb48 	bl	800093e <dfplayer_RepeatTrackInFolder>
					uartPrintf(_DEF_UART2, "Test\n");
 80002ae:	490e      	ldr	r1, [pc, #56]	; (80002e8 <apDFPlayerTest+0x180>)
 80002b0:	2001      	movs	r0, #1
 80002b2:	f000 feb5 	bl	8001020 <uartPrintf>
					break;
 80002b6:	e002      	b.n	80002be <apDFPlayerTest+0x156>


				default:
					break;
			}
		}
 80002b8:	bf00      	nop
 80002ba:	e761      	b.n	8000180 <apDFPlayerTest+0x18>
					break;
 80002bc:	bf00      	nop
		if (uartAvailable(_DEF_UART2) > 0)
 80002be:	e75f      	b.n	8000180 <apDFPlayerTest+0x18>
 80002c0:	08003fd0 	.word	0x08003fd0
 80002c4:	08003fd4 	.word	0x08003fd4
 80002c8:	08003fe4 	.word	0x08003fe4
 80002cc:	08003ffc 	.word	0x08003ffc
 80002d0:	08004018 	.word	0x08004018
 80002d4:	08004020 	.word	0x08004020
 80002d8:	0800402c 	.word	0x0800402c
 80002dc:	0800403c 	.word	0x0800403c
 80002e0:	08004044 	.word	0x08004044
 80002e4:	08004050 	.word	0x08004050
 80002e8:	08004064 	.word	0x08004064

080002ec <bspInit>:

void SystemClock_Config(void);


void bspInit(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0
	  HAL_Init();
 80002f2:	f001 f869 	bl	80013c8 <HAL_Init>
	  SystemClock_Config();
 80002f6:	f000 f849 	bl	800038c <SystemClock_Config>

	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002fa:	4b1a      	ldr	r3, [pc, #104]	; (8000364 <bspInit+0x78>)
 80002fc:	699b      	ldr	r3, [r3, #24]
 80002fe:	4a19      	ldr	r2, [pc, #100]	; (8000364 <bspInit+0x78>)
 8000300:	f043 0310 	orr.w	r3, r3, #16
 8000304:	6193      	str	r3, [r2, #24]
 8000306:	4b17      	ldr	r3, [pc, #92]	; (8000364 <bspInit+0x78>)
 8000308:	699b      	ldr	r3, [r3, #24]
 800030a:	f003 0310 	and.w	r3, r3, #16
 800030e:	60fb      	str	r3, [r7, #12]
 8000310:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000312:	4b14      	ldr	r3, [pc, #80]	; (8000364 <bspInit+0x78>)
 8000314:	699b      	ldr	r3, [r3, #24]
 8000316:	4a13      	ldr	r2, [pc, #76]	; (8000364 <bspInit+0x78>)
 8000318:	f043 0320 	orr.w	r3, r3, #32
 800031c:	6193      	str	r3, [r2, #24]
 800031e:	4b11      	ldr	r3, [pc, #68]	; (8000364 <bspInit+0x78>)
 8000320:	699b      	ldr	r3, [r3, #24]
 8000322:	f003 0320 	and.w	r3, r3, #32
 8000326:	60bb      	str	r3, [r7, #8]
 8000328:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800032a:	4b0e      	ldr	r3, [pc, #56]	; (8000364 <bspInit+0x78>)
 800032c:	699b      	ldr	r3, [r3, #24]
 800032e:	4a0d      	ldr	r2, [pc, #52]	; (8000364 <bspInit+0x78>)
 8000330:	f043 0308 	orr.w	r3, r3, #8
 8000334:	6193      	str	r3, [r2, #24]
 8000336:	4b0b      	ldr	r3, [pc, #44]	; (8000364 <bspInit+0x78>)
 8000338:	699b      	ldr	r3, [r3, #24]
 800033a:	f003 0308 	and.w	r3, r3, #8
 800033e:	607b      	str	r3, [r7, #4]
 8000340:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000342:	4b08      	ldr	r3, [pc, #32]	; (8000364 <bspInit+0x78>)
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	4a07      	ldr	r2, [pc, #28]	; (8000364 <bspInit+0x78>)
 8000348:	f043 0304 	orr.w	r3, r3, #4
 800034c:	6193      	str	r3, [r2, #24]
 800034e:	4b05      	ldr	r3, [pc, #20]	; (8000364 <bspInit+0x78>)
 8000350:	699b      	ldr	r3, [r3, #24]
 8000352:	f003 0304 	and.w	r3, r3, #4
 8000356:	603b      	str	r3, [r7, #0]
 8000358:	683b      	ldr	r3, [r7, #0]

}
 800035a:	bf00      	nop
 800035c:	3710      	adds	r7, #16
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	40021000 	.word	0x40021000

08000368 <delay_ms>:


void delay_ms(uint32_t ms)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8000370:	6878      	ldr	r0, [r7, #4]
 8000372:	f001 f88b 	bl	800148c <HAL_Delay>
}
 8000376:	bf00      	nop
 8000378:	3708      	adds	r7, #8
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}

0800037e <millis>:
      while(count--);
     }
}

uint32_t millis(void)
{
 800037e:	b580      	push	{r7, lr}
 8000380:	af00      	add	r7, sp, #0

	return HAL_GetTick();
 8000382:	f001 f879 	bl	8001478 <HAL_GetTick>
 8000386:	4603      	mov	r3, r0
}
 8000388:	4618      	mov	r0, r3
 800038a:	bd80      	pop	{r7, pc}

0800038c <SystemClock_Config>:




void SystemClock_Config(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b090      	sub	sp, #64	; 0x40
 8000390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000392:	f107 0318 	add.w	r3, r7, #24
 8000396:	2228      	movs	r2, #40	; 0x28
 8000398:	2100      	movs	r1, #0
 800039a:	4618      	mov	r0, r3
 800039c:	f003 f99a 	bl	80036d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]
 80003a8:	609a      	str	r2, [r3, #8]
 80003aa:	60da      	str	r2, [r3, #12]
 80003ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003ae:	2301      	movs	r3, #1
 80003b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003b8:	2300      	movs	r3, #0
 80003ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003bc:	2301      	movs	r3, #1
 80003be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003c0:	2302      	movs	r3, #2
 80003c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003ca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d0:	f107 0318 	add.w	r3, r7, #24
 80003d4:	4618      	mov	r0, r3
 80003d6:	f001 ff0f 	bl	80021f8 <HAL_RCC_OscConfig>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003e0:	f000 f819 	bl	8000416 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e4:	230f      	movs	r3, #15
 80003e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003e8:	2302      	movs	r3, #2
 80003ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ec:	2300      	movs	r3, #0
 80003ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003f6:	2300      	movs	r3, #0
 80003f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	2102      	movs	r1, #2
 80003fe:	4618      	mov	r0, r3
 8000400:	f002 f97a 	bl	80026f8 <HAL_RCC_ClockConfig>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800040a:	f000 f804 	bl	8000416 <Error_Handler>
  }
}
 800040e:	bf00      	nop
 8000410:	3740      	adds	r7, #64	; 0x40
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}

08000416 <Error_Handler>:




void Error_Handler(void)
{
 8000416:	b480      	push	{r7}
 8000418:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800041a:	b672      	cpsid	i
}
 800041c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800041e:	e7fe      	b.n	800041e <Error_Handler+0x8>

08000420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000420:	b480      	push	{r7}
 8000422:	b085      	sub	sp, #20
 8000424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000426:	4b15      	ldr	r3, [pc, #84]	; (800047c <HAL_MspInit+0x5c>)
 8000428:	699b      	ldr	r3, [r3, #24]
 800042a:	4a14      	ldr	r2, [pc, #80]	; (800047c <HAL_MspInit+0x5c>)
 800042c:	f043 0301 	orr.w	r3, r3, #1
 8000430:	6193      	str	r3, [r2, #24]
 8000432:	4b12      	ldr	r3, [pc, #72]	; (800047c <HAL_MspInit+0x5c>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	f003 0301 	and.w	r3, r3, #1
 800043a:	60bb      	str	r3, [r7, #8]
 800043c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800043e:	4b0f      	ldr	r3, [pc, #60]	; (800047c <HAL_MspInit+0x5c>)
 8000440:	69db      	ldr	r3, [r3, #28]
 8000442:	4a0e      	ldr	r2, [pc, #56]	; (800047c <HAL_MspInit+0x5c>)
 8000444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000448:	61d3      	str	r3, [r2, #28]
 800044a:	4b0c      	ldr	r3, [pc, #48]	; (800047c <HAL_MspInit+0x5c>)
 800044c:	69db      	ldr	r3, [r3, #28]
 800044e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000452:	607b      	str	r3, [r7, #4]
 8000454:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000456:	4b0a      	ldr	r3, [pc, #40]	; (8000480 <HAL_MspInit+0x60>)
 8000458:	685b      	ldr	r3, [r3, #4]
 800045a:	60fb      	str	r3, [r7, #12]
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800046a:	60fb      	str	r3, [r7, #12]
 800046c:	4a04      	ldr	r2, [pc, #16]	; (8000480 <HAL_MspInit+0x60>)
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000472:	bf00      	nop
 8000474:	3714      	adds	r7, #20
 8000476:	46bd      	mov	sp, r7
 8000478:	bc80      	pop	{r7}
 800047a:	4770      	bx	lr
 800047c:	40021000 	.word	0x40021000
 8000480:	40010000 	.word	0x40010000

08000484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000488:	e7fe      	b.n	8000488 <NMI_Handler+0x4>

0800048a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800048a:	b480      	push	{r7}
 800048c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800048e:	e7fe      	b.n	800048e <HardFault_Handler+0x4>

08000490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000494:	e7fe      	b.n	8000494 <MemManage_Handler+0x4>

08000496 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000496:	b480      	push	{r7}
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800049a:	e7fe      	b.n	800049a <BusFault_Handler+0x4>

0800049c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004a0:	e7fe      	b.n	80004a0 <UsageFault_Handler+0x4>

080004a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004a2:	b480      	push	{r7}
 80004a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004a6:	bf00      	nop
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bc80      	pop	{r7}
 80004ac:	4770      	bx	lr

080004ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004b2:	bf00      	nop
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bc80      	pop	{r7}
 80004b8:	4770      	bx	lr

080004ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004be:	bf00      	nop
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bc80      	pop	{r7}
 80004c4:	4770      	bx	lr

080004c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004c6:	b580      	push	{r7, lr}
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004ca:	f000 ffc3 	bl	8001454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004ce:	bf00      	nop
 80004d0:	bd80      	pop	{r7, pc}
	...

080004d4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80004d8:	4802      	ldr	r0, [pc, #8]	; (80004e4 <DMA1_Channel4_IRQHandler+0x10>)
 80004da:	f001 fb01 	bl	8001ae0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	20000320 	.word	0x20000320

080004e8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80004ec:	4802      	ldr	r0, [pc, #8]	; (80004f8 <DMA1_Channel5_IRQHandler+0x10>)
 80004ee:	f001 faf7 	bl	8001ae0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	20000364 	.word	0x20000364

080004fc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000500:	4802      	ldr	r0, [pc, #8]	; (800050c <DMA1_Channel6_IRQHandler+0x10>)
 8000502:	f001 faed 	bl	8001ae0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	200002dc 	.word	0x200002dc

08000510 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000514:	4802      	ldr	r0, [pc, #8]	; (8000520 <DMA1_Channel7_IRQHandler+0x10>)
 8000516:	f001 fae3 	bl	8001ae0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	200003a8 	.word	0x200003a8

08000524 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000528:	4802      	ldr	r0, [pc, #8]	; (8000534 <USART1_IRQHandler+0x10>)
 800052a:	f002 fb97 	bl	8002c5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	200003ec 	.word	0x200003ec

08000538 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800053c:	4802      	ldr	r0, [pc, #8]	; (8000548 <USART2_IRQHandler+0x10>)
 800053e:	f002 fb8d 	bl	8002c5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	20000430 	.word	0x20000430

0800054c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b086      	sub	sp, #24
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000554:	4a14      	ldr	r2, [pc, #80]	; (80005a8 <_sbrk+0x5c>)
 8000556:	4b15      	ldr	r3, [pc, #84]	; (80005ac <_sbrk+0x60>)
 8000558:	1ad3      	subs	r3, r2, r3
 800055a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000560:	4b13      	ldr	r3, [pc, #76]	; (80005b0 <_sbrk+0x64>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d102      	bne.n	800056e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000568:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <_sbrk+0x64>)
 800056a:	4a12      	ldr	r2, [pc, #72]	; (80005b4 <_sbrk+0x68>)
 800056c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800056e:	4b10      	ldr	r3, [pc, #64]	; (80005b0 <_sbrk+0x64>)
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4413      	add	r3, r2
 8000576:	693a      	ldr	r2, [r7, #16]
 8000578:	429a      	cmp	r2, r3
 800057a:	d207      	bcs.n	800058c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800057c:	f003 f880 	bl	8003680 <__errno>
 8000580:	4603      	mov	r3, r0
 8000582:	220c      	movs	r2, #12
 8000584:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000586:	f04f 33ff 	mov.w	r3, #4294967295
 800058a:	e009      	b.n	80005a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <_sbrk+0x64>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000592:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <_sbrk+0x64>)
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4413      	add	r3, r2
 800059a:	4a05      	ldr	r2, [pc, #20]	; (80005b0 <_sbrk+0x64>)
 800059c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800059e:	68fb      	ldr	r3, [r7, #12]
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3718      	adds	r7, #24
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20005000 	.word	0x20005000
 80005ac:	00000400 	.word	0x00000400
 80005b0:	200000a0 	.word	0x200000a0
 80005b4:	20000488 	.word	0x20000488

080005b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr

080005c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005c4:	480c      	ldr	r0, [pc, #48]	; (80005f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80005c6:	490d      	ldr	r1, [pc, #52]	; (80005fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80005c8:	4a0d      	ldr	r2, [pc, #52]	; (8000600 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80005ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005cc:	e002      	b.n	80005d4 <LoopCopyDataInit>

080005ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005d2:	3304      	adds	r3, #4

080005d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d8:	d3f9      	bcc.n	80005ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005da:	4a0a      	ldr	r2, [pc, #40]	; (8000604 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80005dc:	4c0a      	ldr	r4, [pc, #40]	; (8000608 <LoopFillZerobss+0x22>)
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e0:	e001      	b.n	80005e6 <LoopFillZerobss>

080005e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e4:	3204      	adds	r2, #4

080005e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e8:	d3fb      	bcc.n	80005e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005ea:	f7ff ffe5 	bl	80005b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ee:	f003 f84d 	bl	800368c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005f2:	f003 f839 	bl	8003668 <main>
  bx lr
 80005f6:	4770      	bx	lr
  ldr r0, =_sdata
 80005f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005fc:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000600:	080040d0 	.word	0x080040d0
  ldr r2, =_sbss
 8000604:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000608:	20000488 	.word	0x20000488

0800060c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800060c:	e7fe      	b.n	800060c <ADC1_2_IRQHandler>

0800060e <qbufferCreate>:

}


bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 800060e:	b480      	push	{r7}
 8000610:	b087      	sub	sp, #28
 8000612:	af00      	add	r7, sp, #0
 8000614:	60f8      	str	r0, [r7, #12]
 8000616:	60b9      	str	r1, [r7, #8]
 8000618:	607a      	str	r2, [r7, #4]
  bool ret = true;
 800061a:	2301      	movs	r3, #1
 800061c:	75fb      	strb	r3, [r7, #23]

  p_node->in  = 0;
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
  p_node->out = 0;
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	2200      	movs	r2, #0
 8000628:	605a      	str	r2, [r3, #4]
  p_node->len = length;
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	68ba      	ldr	r2, [r7, #8]
 8000634:	60da      	str	r2, [r3, #12]

  return ret;
 8000636:	7dfb      	ldrb	r3, [r7, #23]
}
 8000638:	4618      	mov	r0, r3
 800063a:	371c      	adds	r7, #28
 800063c:	46bd      	mov	sp, r7
 800063e:	bc80      	pop	{r7}
 8000640:	4770      	bx	lr

08000642 <qbufferRead>:

}


bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8000642:	b480      	push	{r7}
 8000644:	b087      	sub	sp, #28
 8000646:	af00      	add	r7, sp, #0
 8000648:	60f8      	str	r0, [r7, #12]
 800064a:	60b9      	str	r1, [r7, #8]
 800064c:	607a      	str	r2, [r7, #4]
  bool ret = true;
 800064e:	2301      	movs	r3, #1
 8000650:	75fb      	strb	r3, [r7, #23]

  for (int i=0; i<length; i++)
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
 8000656:	e026      	b.n	80006a6 <qbufferRead+0x64>
  {

    if (p_node-> p_buf != NULL)
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d009      	beq.n	8000674 <qbufferRead+0x32>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	68da      	ldr	r2, [r3, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	685b      	ldr	r3, [r3, #4]
 8000668:	441a      	add	r2, r3
 800066a:	693b      	ldr	r3, [r7, #16]
 800066c:	68b9      	ldr	r1, [r7, #8]
 800066e:	440b      	add	r3, r1
 8000670:	7812      	ldrb	r2, [r2, #0]
 8000672:	701a      	strb	r2, [r3, #0]

    }

    if (p_node->out != p_node->in)
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	685a      	ldr	r2, [r3, #4]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	429a      	cmp	r2, r3
 800067e:	d00c      	beq.n	800069a <qbufferRead+0x58>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	3301      	adds	r3, #1
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	6892      	ldr	r2, [r2, #8]
 800068a:	fbb3 f1f2 	udiv	r1, r3, r2
 800068e:	fb02 f201 	mul.w	r2, r2, r1
 8000692:	1a9a      	subs	r2, r3, r2
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	e002      	b.n	80006a0 <qbufferRead+0x5e>

    }

    else
    {
      ret =false;
 800069a:	2300      	movs	r3, #0
 800069c:	75fb      	strb	r3, [r7, #23]
      break;
 800069e:	e006      	b.n	80006ae <qbufferRead+0x6c>
  for (int i=0; i<length; i++)
 80006a0:	693b      	ldr	r3, [r7, #16]
 80006a2:	3301      	adds	r3, #1
 80006a4:	613b      	str	r3, [r7, #16]
 80006a6:	693b      	ldr	r3, [r7, #16]
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	429a      	cmp	r2, r3
 80006ac:	d8d4      	bhi.n	8000658 <qbufferRead+0x16>
    }
  }

  return ret;
 80006ae:	7dfb      	ldrb	r3, [r7, #23]

}
 80006b0:	4618      	mov	r0, r3
 80006b2:	371c      	adds	r7, #28
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bc80      	pop	{r7}
 80006b8:	4770      	bx	lr

080006ba <qbufferAvailable>:


uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 80006ba:	b480      	push	{r7}
 80006bc:	b085      	sub	sp, #20
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->in - p_node->out) % p_node-> len;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	685b      	ldr	r3, [r3, #4]
 80006ca:	1ad3      	subs	r3, r2, r3
 80006cc:	687a      	ldr	r2, [r7, #4]
 80006ce:	6892      	ldr	r2, [r2, #8]
 80006d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80006d4:	fb02 f201 	mul.w	r2, r2, r1
 80006d8:	1a9b      	subs	r3, r3, r2
 80006da:	60fb      	str	r3, [r7, #12]


  return ret;
 80006dc:	68fb      	ldr	r3, [r7, #12]
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3714      	adds	r7, #20
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr

080006e8 <dfplayer_SendControlMessage>:
 * @param  	para_msb  			Commands Parameters define set, dfplayer.h 참고, 필요없을 경우  0
 * @param  	para_lsb  			Commands Parameters define set, dfplayer.h 참고 , 필요없을 경우 0
 * @warning UART1이 아닌 다른 UART를 사용하는 경우  _DEF_UARTx 또는 huartx 변경
 */
void dfplayer_SendControlMessage( uint8_t cmd, uint8_t para_msb, uint8_t para_lsb)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
 80006f2:	460b      	mov	r3, r1
 80006f4:	71bb      	strb	r3, [r7, #6]
 80006f6:	4613      	mov	r3, r2
 80006f8:	717b      	strb	r3, [r7, #5]
	tx_buf[START_INDEX] 		= START;
 80006fa:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <dfplayer_SendControlMessage+0x8c>)
 80006fc:	227e      	movs	r2, #126	; 0x7e
 80006fe:	701a      	strb	r2, [r3, #0]
	tx_buf[VERSION_INDEX]	 	= VERSION;
 8000700:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <dfplayer_SendControlMessage+0x8c>)
 8000702:	22ff      	movs	r2, #255	; 0xff
 8000704:	705a      	strb	r2, [r3, #1]
	tx_buf[DATA_LENGTH_INDEX] 	= DATA_LENGTH;
 8000706:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <dfplayer_SendControlMessage+0x8c>)
 8000708:	2206      	movs	r2, #6
 800070a:	709a      	strb	r2, [r3, #2]
	tx_buf[CMD_INDEX] 			= cmd;
 800070c:	4a19      	ldr	r2, [pc, #100]	; (8000774 <dfplayer_SendControlMessage+0x8c>)
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	70d3      	strb	r3, [r2, #3]
	tx_buf[FEEDBACK_INDEX] 		= NO_FEED_BACK;
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <dfplayer_SendControlMessage+0x8c>)
 8000714:	2200      	movs	r2, #0
 8000716:	711a      	strb	r2, [r3, #4]
	tx_buf[PARAMETER_MSB_INDEX] = para_msb;
 8000718:	4a16      	ldr	r2, [pc, #88]	; (8000774 <dfplayer_SendControlMessage+0x8c>)
 800071a:	79bb      	ldrb	r3, [r7, #6]
 800071c:	7153      	strb	r3, [r2, #5]
	tx_buf[PARAMETER_LSB_INDEX] = para_lsb;
 800071e:	4a15      	ldr	r2, [pc, #84]	; (8000774 <dfplayer_SendControlMessage+0x8c>)
 8000720:	797b      	ldrb	r3, [r7, #5]
 8000722:	7193      	strb	r3, [r2, #6]

	uint16_t checksum = dfplayer_Checksum();
 8000724:	f000 f828 	bl	8000778 <dfplayer_Checksum>
 8000728:	4603      	mov	r3, r0
 800072a:	817b      	strh	r3, [r7, #10]

	tx_buf[CHECKSUM_MSB_INDEX]  = (uint8_t)(checksum >> 8);
 800072c:	897b      	ldrh	r3, [r7, #10]
 800072e:	0a1b      	lsrs	r3, r3, #8
 8000730:	b29b      	uxth	r3, r3
 8000732:	b2da      	uxtb	r2, r3
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <dfplayer_SendControlMessage+0x8c>)
 8000736:	71da      	strb	r2, [r3, #7]
	tx_buf[CHECKSUM_LSB_INDEX]  = (uint8_t)(checksum & 0xFF);
 8000738:	897b      	ldrh	r3, [r7, #10]
 800073a:	b2da      	uxtb	r2, r3
 800073c:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <dfplayer_SendControlMessage+0x8c>)
 800073e:	721a      	strb	r2, [r3, #8]
	tx_buf[END_INDEX] 			= END;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <dfplayer_SendControlMessage+0x8c>)
 8000742:	22ef      	movs	r2, #239	; 0xef
 8000744:	725a      	strb	r2, [r3, #9]

	for (int i = 0; i < 10; i++)
 8000746:	2300      	movs	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	e00a      	b.n	8000762 <dfplayer_SendControlMessage+0x7a>
	{

		uartWrite(_DEF_UART1, (uint8_t *)&tx_buf[i], DFPLAYER_COMMUNICATION_SIZE);
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	4a09      	ldr	r2, [pc, #36]	; (8000774 <dfplayer_SendControlMessage+0x8c>)
 8000750:	4413      	add	r3, r2
 8000752:	220a      	movs	r2, #10
 8000754:	4619      	mov	r1, r3
 8000756:	2000      	movs	r0, #0
 8000758:	f000 fbe0 	bl	8000f1c <uartWrite>
	for (int i = 0; i < 10; i++)
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	3301      	adds	r3, #1
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	2b09      	cmp	r3, #9
 8000766:	ddf1      	ble.n	800074c <dfplayer_SendControlMessage+0x64>
#ifndef _USE_HW_UART
		HAL_UART_Transmit_DMA(&huart1, (uint8_t *)&tx_buf[i], DFPLAYER_COMMUNICATION_SIZE);	/* HAL Lib의  UART를 사용하는 경우 */
#endif /* _USE_HW_UART */
	}

}
 8000768:	bf00      	nop
 800076a:	bf00      	nop
 800076c:	3710      	adds	r7, #16
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	200000a4 	.word	0x200000a4

08000778 <dfplayer_Checksum>:
 * @brief	DFplayer 직렬 포멧에  필요한 체크썹 바이트를 구하기 위한 계산 수행
 * @note	내부에서만  사용하는  함수
 *
 */
uint16_t dfplayer_Checksum(void)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
	uint16_t checksum = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	80fb      	strh	r3, [r7, #6]

	for (int i = VERSION_INDEX; i <= PARAMETER_LSB_INDEX; i ++)
 8000782:	2301      	movs	r3, #1
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	e00a      	b.n	800079e <dfplayer_Checksum+0x26>
	{
		checksum += tx_buf[i];
 8000788:	4a0b      	ldr	r2, [pc, #44]	; (80007b8 <dfplayer_Checksum+0x40>)
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	4413      	add	r3, r2
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	b29a      	uxth	r2, r3
 8000792:	88fb      	ldrh	r3, [r7, #6]
 8000794:	4413      	add	r3, r2
 8000796:	80fb      	strh	r3, [r7, #6]
	for (int i = VERSION_INDEX; i <= PARAMETER_LSB_INDEX; i ++)
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	3301      	adds	r3, #1
 800079c:	603b      	str	r3, [r7, #0]
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	2b06      	cmp	r3, #6
 80007a2:	ddf1      	ble.n	8000788 <dfplayer_Checksum+0x10>
	}

	checksum = 0xFFFF - checksum + 1; // 2의 보수를 취함, checksum 공식
 80007a4:	88fb      	ldrh	r3, [r7, #6]
 80007a6:	425b      	negs	r3, r3
 80007a8:	80fb      	strh	r3, [r7, #6]

	return checksum;
 80007aa:	88fb      	ldrh	r3, [r7, #6]
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	200000a4 	.word	0x200000a4

080007bc <dfplayer_Init>:
 * @brief	DFplayer 초기화 함수
 * @note 	DFplayer 모듈이  전원이 켜진 후 초기화되기까지 1.5~ 3sec 정도 필요
 *
 */
void dfplayer_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	delay_ms(1500);
 80007c0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80007c4:	f7ff fdd0 	bl	8000368 <delay_ms>
}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}

080007cc <dfplayer_Next>:
/**
 * @brief   다음 mp3 파일 재생
 *
 */
void dfplayer_Next(void)// Test complete
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	dfplayer_SendControlMessage(CMD_NEXT, 0, 0);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2100      	movs	r1, #0
 80007d4:	2001      	movs	r0, #1
 80007d6:	f7ff ff87 	bl	80006e8 <dfplayer_SendControlMessage>
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}

080007de <dfplayer_Previous>:
/**
 * @brief 	이전 mp3 파일 재생
 *
 */
void dfplayer_Previous(void)// Test complete
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	af00      	add	r7, sp, #0
	dfplayer_SendControlMessage(CMD_PREVIOUS, 0, 0);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2100      	movs	r1, #0
 80007e6:	2002      	movs	r0, #2
 80007e8:	f7ff ff7e 	bl	80006e8 <dfplayer_SendControlMessage>
}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <dfplayer_IncreaseVolume>:
/**
 * @brief 	볼륨 증가
 *
 */
void dfplayer_IncreaseVolume(void)// Test complete
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	dfplayer_SendControlMessage(CMD_INC_VOLUME, 0, 0);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2100      	movs	r1, #0
 80007f8:	2004      	movs	r0, #4
 80007fa:	f7ff ff75 	bl	80006e8 <dfplayer_SendControlMessage>
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}

08000802 <dfplayer_DecreaseVolume>:
/**
 * @brief 	볼륨 감소
 *
 */
void dfplayer_DecreaseVolume(void)// Test complete
{
 8000802:	b580      	push	{r7, lr}
 8000804:	af00      	add	r7, sp, #0
	dfplayer_SendControlMessage(CMD_DEC_VOLUME, 0, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	2100      	movs	r1, #0
 800080a:	2005      	movs	r0, #5
 800080c:	f7ff ff6c 	bl	80006e8 <dfplayer_SendControlMessage>
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}

08000814 <dfplayer_SetVolume>:
 * @brief  	초기 볼륨값 설정, default는 30
 * @param  	volume  		1 ~ 30까지 선택
 *
 */
void dfplayer_SetVolume(uint8_t volume)// Test complete
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
	if (volume > 30)
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	2b1e      	cmp	r3, #30
 8000822:	d901      	bls.n	8000828 <dfplayer_SetVolume+0x14>
	{
		volume = 30;
 8000824:	231e      	movs	r3, #30
 8000826:	71fb      	strb	r3, [r7, #7]
	}

	dfplayer_SendControlMessage(CMD_SET_VOLUME, 0, volume);
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	461a      	mov	r2, r3
 800082c:	2100      	movs	r1, #0
 800082e:	2006      	movs	r0, #6
 8000830:	f7ff ff5a 	bl	80006e8 <dfplayer_SendControlMessage>

}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <dfplayer_SetEQ>:
 *			  			    EQ_JAZZ 	: 재즈
 *			  			    EQ_CLASSIC	: 클래식
 *			  			    EQ_BASE   	: 베이스
 */
void dfplayer_SetEQ(int8_t eq)// Test complete
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
	if (eq > EQ_BASE)
 8000846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084a:	2b05      	cmp	r3, #5
 800084c:	dd01      	ble.n	8000852 <dfplayer_SetEQ+0x16>
	{
		eq = EQ_NORMAL ;
 800084e:	2300      	movs	r3, #0
 8000850:	71fb      	strb	r3, [r7, #7]
	}

	dfplayer_SendControlMessage(CMD_SET_EQ, 0, eq);
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	461a      	mov	r2, r3
 8000856:	2100      	movs	r1, #0
 8000858:	2007      	movs	r0, #7
 800085a:	f7ff ff45 	bl	80006e8 <dfplayer_SendControlMessage>
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <dfplayer_SetSource>:
 *			  			    PLAYBACK_SOURCE_AUX 	: AUX 케이블
 *			  			    PLAYBACK_SOURCE_SLEEP
 *			  			    PLAYBACK_SOURCE_FLASH	: Flash
 */
void dfplayer_SetSource(uint8_t source)// Test complete
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
 800086c:	4603      	mov	r3, r0
 800086e:	71fb      	strb	r3, [r7, #7]

	if (source > PLAYBACK_SOURCE_FLASH)
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	2b04      	cmp	r3, #4
 8000874:	d806      	bhi.n	8000884 <dfplayer_SetSource+0x1e>
	{
		return ;
	}

	dfplayer_SendControlMessage(CMD_SET_PLAYBACK_SOURCE, 0, source);
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	461a      	mov	r2, r3
 800087a:	2100      	movs	r1, #0
 800087c:	2009      	movs	r0, #9
 800087e:	f7ff ff33 	bl	80006e8 <dfplayer_SendControlMessage>
 8000882:	e000      	b.n	8000886 <dfplayer_SetSource+0x20>
		return ;
 8000884:	bf00      	nop

}
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <dfplayer_Play>:
/**
 * @brief 	mp3 파일 재생
 *
 */
void dfplayer_Play(void)// Test complete
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
	dfplayer_SendControlMessage(CMD_PLAYBACK, 0, 0);
 8000890:	2200      	movs	r2, #0
 8000892:	2100      	movs	r1, #0
 8000894:	200d      	movs	r0, #13
 8000896:	f7ff ff27 	bl	80006e8 <dfplayer_SendControlMessage>
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}

0800089e <dfplayer_Pause>:
/**
 * @brief 	mp3 파일 일시정지
 *
 */
void dfplayer_Pause(void)// Test complete
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	af00      	add	r7, sp, #0
	dfplayer_SendControlMessage(CMD_PAUSE, 0, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2100      	movs	r1, #0
 80008a6:	200e      	movs	r0, #14
 80008a8:	f7ff ff1e 	bl	80006e8 <dfplayer_SendControlMessage>
}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <dfplayer_InsertAdvertisement>:
 * @brief   음악파일 재생중에 ADVERT폴더 안에 저장된 파일로 끼어들기(인터럽트)
 * @note    ADVERT 폴더는 3000개 트랙 지원
 * @param  	track  			1 ~ 30000 (or 0 ~ 2999) 파일명 넘버링에 따라 둘 중 하나의 범위를 가짐
 */
void dfplayer_InsertAdvertisement(uint16_t track)// Test complete
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	80fb      	strh	r3, [r7, #6]
	dfplayer_SendControlMessage(CMD_INSERT_ADVERT,(uint8_t)(track >> 8), (uint8_t)(track & 0xFF));
 80008ba:	88fb      	ldrh	r3, [r7, #6]
 80008bc:	0a1b      	lsrs	r3, r3, #8
 80008be:	b29b      	uxth	r3, r3
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	88fa      	ldrh	r2, [r7, #6]
 80008c4:	b2d2      	uxtb	r2, r2
 80008c6:	4619      	mov	r1, r3
 80008c8:	2013      	movs	r0, #19
 80008ca:	f7ff ff0d 	bl	80006e8 <dfplayer_SendControlMessage>
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <dfplayer_Play3KFolder>:
 * @brief   3000개 트랙 지원하는 01~15번 폴더에서 트랙을 선택하여 재생
 * @param  	folder  		1~ 15
 * @param  	track  			1 ~ 30000 (or 0 ~ 2999) 파일명 넘버링에 따라 둘 중 하나의 범위를 가짐
 */
void dfplayer_Play3KFolder(uint8_t folder, uint16_t track) //TODO ongoing - 3
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b082      	sub	sp, #8
 80008da:	af00      	add	r7, sp, #0
 80008dc:	4603      	mov	r3, r0
 80008de:	460a      	mov	r2, r1
 80008e0:	71fb      	strb	r3, [r7, #7]
 80008e2:	4613      	mov	r3, r2
 80008e4:	80bb      	strh	r3, [r7, #4]
	if (folder > 15)
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	2b0f      	cmp	r3, #15
 80008ea:	d901      	bls.n	80008f0 <dfplayer_Play3KFolder+0x1a>
	{
		folder = 15;
 80008ec:	230f      	movs	r3, #15
 80008ee:	71fb      	strb	r3, [r7, #7]
	}

	if (track > 3000)
 80008f0:	88bb      	ldrh	r3, [r7, #4]
 80008f2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d902      	bls.n	8000900 <dfplayer_Play3KFolder+0x2a>
	{
		track = 3000;
 80008fa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80008fe:	80bb      	strh	r3, [r7, #4]
	}

	dfplayer_SendControlMessage(CMD_SET_3K_FOLDER, (folder << 4) | (uint8_t)(track & 0xF00) >> 8, (uint8_t)(track & 0xFF));
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	011b      	lsls	r3, r3, #4
 8000904:	b2db      	uxtb	r3, r3
 8000906:	88ba      	ldrh	r2, [r7, #4]
 8000908:	b2d2      	uxtb	r2, r2
 800090a:	4619      	mov	r1, r3
 800090c:	2014      	movs	r0, #20
 800090e:	f7ff feeb 	bl	80006e8 <dfplayer_SendControlMessage>
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <dfplayer_StopAdvertisement>:
/**
 * @brief   ADVERT폴더 안에 인터럽트된 재생 파일을 정지 시키고 원래 재생파일로 복귀
 *
 */
void dfplayer_StopAdvertisement(void)// Test complete
{
 800091a:	b580      	push	{r7, lr}
 800091c:	af00      	add	r7, sp, #0

	dfplayer_SendControlMessage(CMD_STOP_ADVERT_GOBACK, 0, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2100      	movs	r1, #0
 8000922:	2015      	movs	r0, #21
 8000924:	f7ff fee0 	bl	80006e8 <dfplayer_SendControlMessage>
}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}

0800092c <dfplayer_Stop>:
/**
 * @brief   정지
 * @note    다시 재생시키면 처음 부터 시작함
 */
void dfplayer_Stop(void)// Test complete
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0

	dfplayer_SendControlMessage(CMD_STOP, 0, 0);
 8000930:	2200      	movs	r2, #0
 8000932:	2100      	movs	r1, #0
 8000934:	2016      	movs	r0, #22
 8000936:	f7ff fed7 	bl	80006e8 <dfplayer_SendControlMessage>
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}

0800093e <dfplayer_RepeatTrackInFolder>:
/**
 * @brief   지정한 폴대 내 반복 재생
 * @note 	stop 커맨드 명렁어가 올 때 까지 멈추지 않고 반복
 */
void dfplayer_RepeatTrackInFolder(uint8_t folder) //TODO ongoing - 2
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b082      	sub	sp, #8
 8000942:	af00      	add	r7, sp, #0
 8000944:	4603      	mov	r3, r0
 8000946:	71fb      	strb	r3, [r7, #7]
	if (folder > 99)
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	2b63      	cmp	r3, #99	; 0x63
 800094c:	d901      	bls.n	8000952 <dfplayer_RepeatTrackInFolder+0x14>
	{
		folder = 99;
 800094e:	2363      	movs	r3, #99	; 0x63
 8000950:	71fb      	strb	r3, [r7, #7]
	}

	dfplayer_SendControlMessage(CMD_REPEAT_FOLDER_TRACK, 0, folder);
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	461a      	mov	r2, r3
 8000956:	2100      	movs	r1, #0
 8000958:	2017      	movs	r0, #23
 800095a:	f7ff fec5 	bl	80006e8 <dfplayer_SendControlMessage>
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <gpioInit>:




bool gpioInit(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
  bool ret = true;
 800096e:	2301      	movs	r3, #1
 8000970:	70fb      	strb	r3, [r7, #3]

 // __HAL_RCC_GPIOB_CLK_ENABLE();

  for (int i = 0; i < GPIO_MAX_CH; i++)
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	e01e      	b.n	80009b6 <gpioInit+0x4e>
  {
    gpioPinMode(i, gpio_tbl[i].mode);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	b2d8      	uxtb	r0, r3
 800097c:	4912      	ldr	r1, [pc, #72]	; (80009c8 <gpioInit+0x60>)
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	4613      	mov	r3, r2
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	4413      	add	r3, r2
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	440b      	add	r3, r1
 800098a:	3306      	adds	r3, #6
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	4619      	mov	r1, r3
 8000990:	f000 f81c 	bl	80009cc <gpioPinMode>
    gpioPinWrite(i, gpio_tbl[i].init_vlaue);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	b2d8      	uxtb	r0, r3
 8000998:	490b      	ldr	r1, [pc, #44]	; (80009c8 <gpioInit+0x60>)
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	4613      	mov	r3, r2
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	4413      	add	r3, r2
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	440b      	add	r3, r1
 80009a6:	3309      	adds	r3, #9
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	4619      	mov	r1, r3
 80009ac:	f000 f876 	bl	8000a9c <gpioPinWrite>
  for (int i = 0; i < GPIO_MAX_CH; i++)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	3301      	adds	r3, #1
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	dddd      	ble.n	8000978 <gpioInit+0x10>
  }

  return ret;
 80009bc:	78fb      	ldrb	r3, [r7, #3]

}
 80009be:	4618      	mov	r0, r3
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000004 	.word	0x20000004

080009cc <gpioPinMode>:


bool gpioPinMode(uint8_t ch, uint8_t mode)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b088      	sub	sp, #32
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	460a      	mov	r2, r1
 80009d6:	71fb      	strb	r3, [r7, #7]
 80009d8:	4613      	mov	r3, r2
 80009da:	71bb      	strb	r3, [r7, #6]
  bool ret = true;
 80009dc:	2301      	movs	r3, #1
 80009de:	77fb      	strb	r3, [r7, #31]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]

  switch(mode)
 80009ee:	79bb      	ldrb	r3, [r7, #6]
 80009f0:	2b05      	cmp	r3, #5
 80009f2:	d833      	bhi.n	8000a5c <gpioPinMode+0x90>
 80009f4:	a201      	add	r2, pc, #4	; (adr r2, 80009fc <gpioPinMode+0x30>)
 80009f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009fa:	bf00      	nop
 80009fc:	08000a15 	.word	0x08000a15
 8000a00:	08000a1f 	.word	0x08000a1f
 8000a04:	08000a29 	.word	0x08000a29
 8000a08:	08000a33 	.word	0x08000a33
 8000a0c:	08000a41 	.word	0x08000a41
 8000a10:	08000a4f 	.word	0x08000a4f
  {
      case _DEF_INPUT:
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a14:	2300      	movs	r3, #0
 8000a16:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
        break;
 8000a1c:	e01e      	b.n	8000a5c <gpioPinMode+0x90>

      case _DEF_INPUT_PULLUP:
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a22:	2301      	movs	r3, #1
 8000a24:	617b      	str	r3, [r7, #20]
        break;
 8000a26:	e019      	b.n	8000a5c <gpioPinMode+0x90>

      case _DEF_INPUT_PULLDOWN:
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	617b      	str	r3, [r7, #20]
        break;
 8000a30:	e014      	b.n	8000a5c <gpioPinMode+0x90>

      case _DEF_OUTPUT:
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Push-Pull, Open Drain 필요 시 OD로 변경
 8000a32:	2301      	movs	r3, #1
 8000a34:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; // 필요 시  Medium, High로 변경
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	61bb      	str	r3, [r7, #24]
        break;
 8000a3e:	e00d      	b.n	8000a5c <gpioPinMode+0x90>

      case _DEF_OUTPUT_PULLUP:
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a40:	2301      	movs	r3, #1
 8000a42:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a44:	2301      	movs	r3, #1
 8000a46:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	61bb      	str	r3, [r7, #24]
        break;
 8000a4c:	e006      	b.n	8000a5c <gpioPinMode+0x90>

      case _DEF_OUTPUT_PULLDOWN:
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a52:	2302      	movs	r3, #2
 8000a54:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2302      	movs	r3, #2
 8000a58:	61bb      	str	r3, [r7, #24]
        break;
 8000a5a:	bf00      	nop
  }

  GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
 8000a5c:	79fa      	ldrb	r2, [r7, #7]
 8000a5e:	490e      	ldr	r1, [pc, #56]	; (8000a98 <gpioPinMode+0xcc>)
 8000a60:	4613      	mov	r3, r2
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	4413      	add	r3, r2
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	440b      	add	r3, r1
 8000a6a:	3304      	adds	r3, #4
 8000a6c:	881b      	ldrh	r3, [r3, #0]
 8000a6e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 8000a70:	79fa      	ldrb	r2, [r7, #7]
 8000a72:	4909      	ldr	r1, [pc, #36]	; (8000a98 <gpioPinMode+0xcc>)
 8000a74:	4613      	mov	r3, r2
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	4413      	add	r3, r2
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	440b      	add	r3, r1
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f107 020c 	add.w	r2, r7, #12
 8000a84:	4611      	mov	r1, r2
 8000a86:	4618      	mov	r0, r3
 8000a88:	f001 f95e 	bl	8001d48 <HAL_GPIO_Init>

  return ret;
 8000a8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3720      	adds	r7, #32
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000004 	.word	0x20000004

08000a9c <gpioPinWrite>:


void gpioPinWrite(uint8_t ch, bool value)
{
 8000a9c:	b590      	push	{r4, r7, lr}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	460a      	mov	r2, r1
 8000aa6:	71fb      	strb	r3, [r7, #7]
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	71bb      	strb	r3, [r7, #6]
  if (ch > GPIO_MAX_CH)
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d83e      	bhi.n	8000b30 <gpioPinWrite+0x94>
  {
    return ;
  }

  if (value == true)
 8000ab2:	79bb      	ldrb	r3, [r7, #6]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d01d      	beq.n	8000af4 <gpioPinWrite+0x58>
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 8000ab8:	79fa      	ldrb	r2, [r7, #7]
 8000aba:	491f      	ldr	r1, [pc, #124]	; (8000b38 <gpioPinWrite+0x9c>)
 8000abc:	4613      	mov	r3, r2
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	4413      	add	r3, r2
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	440b      	add	r3, r1
 8000ac6:	6818      	ldr	r0, [r3, #0]
 8000ac8:	79fa      	ldrb	r2, [r7, #7]
 8000aca:	491b      	ldr	r1, [pc, #108]	; (8000b38 <gpioPinWrite+0x9c>)
 8000acc:	4613      	mov	r3, r2
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	4413      	add	r3, r2
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	440b      	add	r3, r1
 8000ad6:	3304      	adds	r3, #4
 8000ad8:	8819      	ldrh	r1, [r3, #0]
 8000ada:	79fa      	ldrb	r2, [r7, #7]
 8000adc:	4c16      	ldr	r4, [pc, #88]	; (8000b38 <gpioPinWrite+0x9c>)
 8000ade:	4613      	mov	r3, r2
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	4413      	add	r3, r2
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	4423      	add	r3, r4
 8000ae8:	3307      	adds	r3, #7
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	461a      	mov	r2, r3
 8000aee:	f001 fb6b 	bl	80021c8 <HAL_GPIO_WritePin>
 8000af2:	e01e      	b.n	8000b32 <gpioPinWrite+0x96>
  }

  else
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 8000af4:	79fa      	ldrb	r2, [r7, #7]
 8000af6:	4910      	ldr	r1, [pc, #64]	; (8000b38 <gpioPinWrite+0x9c>)
 8000af8:	4613      	mov	r3, r2
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	4413      	add	r3, r2
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	440b      	add	r3, r1
 8000b02:	6818      	ldr	r0, [r3, #0]
 8000b04:	79fa      	ldrb	r2, [r7, #7]
 8000b06:	490c      	ldr	r1, [pc, #48]	; (8000b38 <gpioPinWrite+0x9c>)
 8000b08:	4613      	mov	r3, r2
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	4413      	add	r3, r2
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	440b      	add	r3, r1
 8000b12:	3304      	adds	r3, #4
 8000b14:	8819      	ldrh	r1, [r3, #0]
 8000b16:	79fa      	ldrb	r2, [r7, #7]
 8000b18:	4c07      	ldr	r4, [pc, #28]	; (8000b38 <gpioPinWrite+0x9c>)
 8000b1a:	4613      	mov	r3, r2
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	4413      	add	r3, r2
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	4423      	add	r3, r4
 8000b24:	3308      	adds	r3, #8
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	f001 fb4d 	bl	80021c8 <HAL_GPIO_WritePin>
 8000b2e:	e000      	b.n	8000b32 <gpioPinWrite+0x96>
    return ;
 8000b30:	bf00      	nop
  }

}
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd90      	pop	{r4, r7, pc}
 8000b38:	20000004 	.word	0x20000004

08000b3c <ledInit>:




bool ledInit(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
	bool ret = true;
 8000b42:	2301      	movs	r3, #1
 8000b44:	74fb      	strb	r3, [r7, #19]

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b46:	463b      	mov	r3, r7
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b52:	2301      	movs	r3, #1
 8000b54:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	60fb      	str	r3, [r7, #12]


	  for (int i =0; i<LED_MAX_CH; i++)
 8000b5e:	2300      	movs	r3, #0
 8000b60:	617b      	str	r3, [r7, #20]
 8000b62:	e016      	b.n	8000b92 <ledInit+0x56>
	  {

		  GPIO_InitStruct.Pin = led_tbl[i].pin;
 8000b64:	4a0f      	ldr	r2, [pc, #60]	; (8000ba4 <ledInit+0x68>)
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	00db      	lsls	r3, r3, #3
 8000b6a:	4413      	add	r3, r2
 8000b6c:	889b      	ldrh	r3, [r3, #4]
 8000b6e:	603b      	str	r3, [r7, #0]
		  HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8000b70:	4a0c      	ldr	r2, [pc, #48]	; (8000ba4 <ledInit+0x68>)
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000b78:	463a      	mov	r2, r7
 8000b7a:	4611      	mov	r1, r2
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f001 f8e3 	bl	8001d48 <HAL_GPIO_Init>

		  ledOff(i);
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 f80e 	bl	8000ba8 <ledOff>
	  for (int i =0; i<LED_MAX_CH; i++)
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	617b      	str	r3, [r7, #20]
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	dde5      	ble.n	8000b64 <ledInit+0x28>

	  }
	return ret;
 8000b98:	7cfb      	ldrb	r3, [r7, #19]
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3718      	adds	r7, #24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000010 	.word	0x20000010

08000ba8 <ledOff>:
}



void ledOff(uint8_t ch)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
	if (ch >= LED_MAX_CH) return;
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d111      	bne.n	8000bdc <ledOff+0x34>
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <ledOff+0x3c>)
 8000bbc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	4a08      	ldr	r2, [pc, #32]	; (8000be4 <ledOff+0x3c>)
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	4413      	add	r3, r2
 8000bc8:	8899      	ldrh	r1, [r3, #4]
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	4a05      	ldr	r2, [pc, #20]	; (8000be4 <ledOff+0x3c>)
 8000bce:	00db      	lsls	r3, r3, #3
 8000bd0:	4413      	add	r3, r2
 8000bd2:	79db      	ldrb	r3, [r3, #7]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	f001 faf7 	bl	80021c8 <HAL_GPIO_WritePin>
 8000bda:	e000      	b.n	8000bde <ledOff+0x36>
	if (ch >= LED_MAX_CH) return;
 8000bdc:	bf00      	nop

}
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000010 	.word	0x20000010

08000be8 <uartInit>:




bool uartInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
  for (int i = 0; i < UART_MAX_CH; i++)
 8000bee:	2300      	movs	r3, #0
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	e007      	b.n	8000c04 <uartInit+0x1c>
  {
    is_open[i] = false;
 8000bf4:	4a08      	ldr	r2, [pc, #32]	; (8000c18 <uartInit+0x30>)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < UART_MAX_CH; i++)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	3301      	adds	r3, #1
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	ddf4      	ble.n	8000bf4 <uartInit+0xc>
  }

  return true;
 8000c0a:	2301      	movs	r3, #1
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	200000b0 	.word	0x200000b0

08000c1c <uartOpen>:


bool uartOpen(uint8_t ch, uint32_t baud)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	6039      	str	r1, [r7, #0]
 8000c26:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	75fb      	strb	r3, [r7, #23]

  switch(ch)
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d002      	beq.n	8000c38 <uartOpen+0x1c>
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d076      	beq.n	8000d24 <uartOpen+0x108>
 8000c36:	e0eb      	b.n	8000e10 <uartOpen+0x1f4>
  {
    /* UART1 */
    case _DEF_UART1:
      huart1.Instance             = USART1;
 8000c38:	4b78      	ldr	r3, [pc, #480]	; (8000e1c <uartOpen+0x200>)
 8000c3a:	4a79      	ldr	r2, [pc, #484]	; (8000e20 <uartOpen+0x204>)
 8000c3c:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate        = baud;
 8000c3e:	4a77      	ldr	r2, [pc, #476]	; (8000e1c <uartOpen+0x200>)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	6053      	str	r3, [r2, #4]
      huart1.Init.WordLength      = UART_WORDLENGTH_8B;
 8000c44:	4b75      	ldr	r3, [pc, #468]	; (8000e1c <uartOpen+0x200>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits        = UART_STOPBITS_1;
 8000c4a:	4b74      	ldr	r3, [pc, #464]	; (8000e1c <uartOpen+0x200>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity          = UART_PARITY_NONE;
 8000c50:	4b72      	ldr	r3, [pc, #456]	; (8000e1c <uartOpen+0x200>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode            = UART_MODE_TX_RX;
 8000c56:	4b71      	ldr	r3, [pc, #452]	; (8000e1c <uartOpen+0x200>)
 8000c58:	220c      	movs	r2, #12
 8000c5a:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl       = UART_HWCONTROL_NONE;
 8000c5c:	4b6f      	ldr	r3, [pc, #444]	; (8000e1c <uartOpen+0x200>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling    = UART_OVERSAMPLING_16;
 8000c62:	4b6e      	ldr	r3, [pc, #440]	; (8000e1c <uartOpen+0x200>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	61da      	str	r2, [r3, #28]

      HAL_UART_DeInit(&huart1);
 8000c68:	486c      	ldr	r0, [pc, #432]	; (8000e1c <uartOpen+0x200>)
 8000c6a:	f001 ff2c 	bl	8002ac6 <HAL_UART_DeInit>

      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	011b      	lsls	r3, r3, #4
 8000c72:	4a6c      	ldr	r2, [pc, #432]	; (8000e24 <uartOpen+0x208>)
 8000c74:	4413      	add	r3, r2
 8000c76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c7a:	496b      	ldr	r1, [pc, #428]	; (8000e28 <uartOpen+0x20c>)
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fcc6 	bl	800060e <qbufferCreate>

      __HAL_RCC_DMA1_CLK_ENABLE();
 8000c82:	4b6a      	ldr	r3, [pc, #424]	; (8000e2c <uartOpen+0x210>)
 8000c84:	695b      	ldr	r3, [r3, #20]
 8000c86:	4a69      	ldr	r2, [pc, #420]	; (8000e2c <uartOpen+0x210>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6153      	str	r3, [r2, #20]
 8000c8e:	4b67      	ldr	r3, [pc, #412]	; (8000e2c <uartOpen+0x210>)
 8000c90:	695b      	ldr	r3, [r3, #20]
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	693b      	ldr	r3, [r7, #16]

      HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0); // RX DMA
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	200f      	movs	r0, #15
 8000ca0:	f000 fd13 	bl	80016ca <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000ca4:	200f      	movs	r0, #15
 8000ca6:	f000 fd2c 	bl	8001702 <HAL_NVIC_EnableIRQ>


      if (HAL_UART_Init(&huart1) != HAL_OK)
 8000caa:	485c      	ldr	r0, [pc, #368]	; (8000e1c <uartOpen+0x200>)
 8000cac:	f001 febe 	bl	8002a2c <HAL_UART_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d002      	beq.n	8000cbc <uartOpen+0xa0>
      {
        ret = false;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	75fb      	strb	r3, [r7, #23]

        HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0); // TX DMA
        HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
      }

      break;
 8000cba:	e0a9      	b.n	8000e10 <uartOpen+0x1f4>
        ret = true;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	75fb      	strb	r3, [r7, #23]
        is_open[ch] = true;
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	4a5b      	ldr	r2, [pc, #364]	; (8000e30 <uartOpen+0x214>)
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	54d1      	strb	r1, [r2, r3]
        if (HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8000cc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ccc:	4956      	ldr	r1, [pc, #344]	; (8000e28 <uartOpen+0x20c>)
 8000cce:	4853      	ldr	r0, [pc, #332]	; (8000e1c <uartOpen+0x200>)
 8000cd0:	f001 ff94 	bl	8002bfc <HAL_UART_Receive_DMA>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <uartOpen+0xc2>
          ret = false;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	75fb      	strb	r3, [r7, #23]
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	4a50      	ldr	r2, [pc, #320]	; (8000e24 <uartOpen+0x208>)
 8000ce2:	011b      	lsls	r3, r3, #4
 8000ce4:	4413      	add	r3, r2
 8000ce6:	3308      	adds	r3, #8
 8000ce8:	6819      	ldr	r1, [r3, #0]
 8000cea:	4b52      	ldr	r3, [pc, #328]	; (8000e34 <uartOpen+0x218>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	685a      	ldr	r2, [r3, #4]
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	1a8a      	subs	r2, r1, r2
 8000cf4:	494b      	ldr	r1, [pc, #300]	; (8000e24 <uartOpen+0x208>)
 8000cf6:	011b      	lsls	r3, r3, #4
 8000cf8:	440b      	add	r3, r1
 8000cfa:	601a      	str	r2, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;
 8000cfc:	79fa      	ldrb	r2, [r7, #7]
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	4948      	ldr	r1, [pc, #288]	; (8000e24 <uartOpen+0x208>)
 8000d02:	0112      	lsls	r2, r2, #4
 8000d04:	440a      	add	r2, r1
 8000d06:	6812      	ldr	r2, [r2, #0]
 8000d08:	4946      	ldr	r1, [pc, #280]	; (8000e24 <uartOpen+0x208>)
 8000d0a:	011b      	lsls	r3, r3, #4
 8000d0c:	440b      	add	r3, r1
 8000d0e:	3304      	adds	r3, #4
 8000d10:	601a      	str	r2, [r3, #0]
        HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0); // TX DMA
 8000d12:	2200      	movs	r2, #0
 8000d14:	2100      	movs	r1, #0
 8000d16:	200e      	movs	r0, #14
 8000d18:	f000 fcd7 	bl	80016ca <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000d1c:	200e      	movs	r0, #14
 8000d1e:	f000 fcf0 	bl	8001702 <HAL_NVIC_EnableIRQ>
      break;
 8000d22:	e075      	b.n	8000e10 <uartOpen+0x1f4>


    /* UART2 */
    case _DEF_UART2:
    	  huart2.Instance = USART2;
 8000d24:	4b44      	ldr	r3, [pc, #272]	; (8000e38 <uartOpen+0x21c>)
 8000d26:	4a45      	ldr	r2, [pc, #276]	; (8000e3c <uartOpen+0x220>)
 8000d28:	601a      	str	r2, [r3, #0]
    	  huart2.Init.BaudRate = baud;
 8000d2a:	4a43      	ldr	r2, [pc, #268]	; (8000e38 <uartOpen+0x21c>)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	6053      	str	r3, [r2, #4]
    	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d30:	4b41      	ldr	r3, [pc, #260]	; (8000e38 <uartOpen+0x21c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
    	  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d36:	4b40      	ldr	r3, [pc, #256]	; (8000e38 <uartOpen+0x21c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	60da      	str	r2, [r3, #12]
    	  huart2.Init.Parity = UART_PARITY_NONE;
 8000d3c:	4b3e      	ldr	r3, [pc, #248]	; (8000e38 <uartOpen+0x21c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	611a      	str	r2, [r3, #16]
    	  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d42:	4b3d      	ldr	r3, [pc, #244]	; (8000e38 <uartOpen+0x21c>)
 8000d44:	220c      	movs	r2, #12
 8000d46:	615a      	str	r2, [r3, #20]
    	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d48:	4b3b      	ldr	r3, [pc, #236]	; (8000e38 <uartOpen+0x21c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	619a      	str	r2, [r3, #24]
    	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d4e:	4b3a      	ldr	r3, [pc, #232]	; (8000e38 <uartOpen+0x21c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	61da      	str	r2, [r3, #28]

          HAL_UART_DeInit(&huart2);
 8000d54:	4838      	ldr	r0, [pc, #224]	; (8000e38 <uartOpen+0x21c>)
 8000d56:	f001 feb6 	bl	8002ac6 <HAL_UART_DeInit>

          qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	011b      	lsls	r3, r3, #4
 8000d5e:	4a31      	ldr	r2, [pc, #196]	; (8000e24 <uartOpen+0x208>)
 8000d60:	4413      	add	r3, r2
 8000d62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d66:	4930      	ldr	r1, [pc, #192]	; (8000e28 <uartOpen+0x20c>)
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fc50 	bl	800060e <qbufferCreate>

          __HAL_RCC_DMA1_CLK_ENABLE();
 8000d6e:	4b2f      	ldr	r3, [pc, #188]	; (8000e2c <uartOpen+0x210>)
 8000d70:	695b      	ldr	r3, [r3, #20]
 8000d72:	4a2e      	ldr	r2, [pc, #184]	; (8000e2c <uartOpen+0x210>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6153      	str	r3, [r2, #20]
 8000d7a:	4b2c      	ldr	r3, [pc, #176]	; (8000e2c <uartOpen+0x210>)
 8000d7c:	695b      	ldr	r3, [r3, #20]
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]

          HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);  // RX DMA
 8000d86:	2200      	movs	r2, #0
 8000d88:	2100      	movs	r1, #0
 8000d8a:	2010      	movs	r0, #16
 8000d8c:	f000 fc9d 	bl	80016ca <HAL_NVIC_SetPriority>
          HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000d90:	2010      	movs	r0, #16
 8000d92:	f000 fcb6 	bl	8001702 <HAL_NVIC_EnableIRQ>


          if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d96:	4828      	ldr	r0, [pc, #160]	; (8000e38 <uartOpen+0x21c>)
 8000d98:	f001 fe48 	bl	8002a2c <HAL_UART_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d002      	beq.n	8000da8 <uartOpen+0x18c>
          {
            ret = false;
 8000da2:	2300      	movs	r3, #0
 8000da4:	75fb      	strb	r3, [r7, #23]

            HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);  // TX DMA
            HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
          }

          break;
 8000da6:	e032      	b.n	8000e0e <uartOpen+0x1f2>
            ret = true;
 8000da8:	2301      	movs	r3, #1
 8000daa:	75fb      	strb	r3, [r7, #23]
            is_open[ch] = true;
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	4a20      	ldr	r2, [pc, #128]	; (8000e30 <uartOpen+0x214>)
 8000db0:	2101      	movs	r1, #1
 8000db2:	54d1      	strb	r1, [r2, r3]
            if (HAL_UART_Receive_DMA(&huart2, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8000db4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000db8:	491b      	ldr	r1, [pc, #108]	; (8000e28 <uartOpen+0x20c>)
 8000dba:	481f      	ldr	r0, [pc, #124]	; (8000e38 <uartOpen+0x21c>)
 8000dbc:	f001 ff1e 	bl	8002bfc <HAL_UART_Receive_DMA>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <uartOpen+0x1ae>
              ret = false;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	75fb      	strb	r3, [r7, #23]
            qbuffer[ch].in  = qbuffer[ch].len - hdma_usart2_rx.Instance->CNDTR;
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	4a15      	ldr	r2, [pc, #84]	; (8000e24 <uartOpen+0x208>)
 8000dce:	011b      	lsls	r3, r3, #4
 8000dd0:	4413      	add	r3, r2
 8000dd2:	3308      	adds	r3, #8
 8000dd4:	6819      	ldr	r1, [r3, #0]
 8000dd6:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <uartOpen+0x224>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	685a      	ldr	r2, [r3, #4]
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	1a8a      	subs	r2, r1, r2
 8000de0:	4910      	ldr	r1, [pc, #64]	; (8000e24 <uartOpen+0x208>)
 8000de2:	011b      	lsls	r3, r3, #4
 8000de4:	440b      	add	r3, r1
 8000de6:	601a      	str	r2, [r3, #0]
            qbuffer[ch].out = qbuffer[ch].in;
 8000de8:	79fa      	ldrb	r2, [r7, #7]
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	490d      	ldr	r1, [pc, #52]	; (8000e24 <uartOpen+0x208>)
 8000dee:	0112      	lsls	r2, r2, #4
 8000df0:	440a      	add	r2, r1
 8000df2:	6812      	ldr	r2, [r2, #0]
 8000df4:	490b      	ldr	r1, [pc, #44]	; (8000e24 <uartOpen+0x208>)
 8000df6:	011b      	lsls	r3, r3, #4
 8000df8:	440b      	add	r3, r1
 8000dfa:	3304      	adds	r3, #4
 8000dfc:	601a      	str	r2, [r3, #0]
            HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);  // TX DMA
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2100      	movs	r1, #0
 8000e02:	2011      	movs	r0, #17
 8000e04:	f000 fc61 	bl	80016ca <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000e08:	2011      	movs	r0, #17
 8000e0a:	f000 fc7a 	bl	8001702 <HAL_NVIC_EnableIRQ>
          break;
 8000e0e:	bf00      	nop
  }

  return ret;
 8000e10:	7dfb      	ldrb	r3, [r7, #23]

}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	200003ec 	.word	0x200003ec
 8000e20:	40013800 	.word	0x40013800
 8000e24:	200000b4 	.word	0x200000b4
 8000e28:	200000d4 	.word	0x200000d4
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	200000b0 	.word	0x200000b0
 8000e34:	20000364 	.word	0x20000364
 8000e38:	20000430 	.word	0x20000430
 8000e3c:	40004400 	.word	0x40004400
 8000e40:	200002dc 	.word	0x200002dc

08000e44 <uartAvailable>:



uint32_t uartAvailable(uint8_t ch)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d002      	beq.n	8000e5e <uartAvailable+0x1a>
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d018      	beq.n	8000e8e <uartAvailable+0x4a>
 8000e5c:	e02f      	b.n	8000ebe <uartAvailable+0x7a>
  {
    /* UART1 */
    case _DEF_UART1:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR);
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	4a19      	ldr	r2, [pc, #100]	; (8000ec8 <uartAvailable+0x84>)
 8000e62:	011b      	lsls	r3, r3, #4
 8000e64:	4413      	add	r3, r2
 8000e66:	3308      	adds	r3, #8
 8000e68:	6819      	ldr	r1, [r3, #0]
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <uartAvailable+0x88>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	685a      	ldr	r2, [r3, #4]
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	1a8a      	subs	r2, r1, r2
 8000e74:	4914      	ldr	r1, [pc, #80]	; (8000ec8 <uartAvailable+0x84>)
 8000e76:	011b      	lsls	r3, r3, #4
 8000e78:	440b      	add	r3, r1
 8000e7a:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	011b      	lsls	r3, r3, #4
 8000e80:	4a11      	ldr	r2, [pc, #68]	; (8000ec8 <uartAvailable+0x84>)
 8000e82:	4413      	add	r3, r2
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fc18 	bl	80006ba <qbufferAvailable>
 8000e8a:	60f8      	str	r0, [r7, #12]
      break;
 8000e8c:	e017      	b.n	8000ebe <uartAvailable+0x7a>


    /* UART2 */
    case _DEF_UART2:
        qbuffer[ch].in = (qbuffer[ch].len - hdma_usart2_rx.Instance->CNDTR);
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	4a0d      	ldr	r2, [pc, #52]	; (8000ec8 <uartAvailable+0x84>)
 8000e92:	011b      	lsls	r3, r3, #4
 8000e94:	4413      	add	r3, r2
 8000e96:	3308      	adds	r3, #8
 8000e98:	6819      	ldr	r1, [r3, #0]
 8000e9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <uartAvailable+0x8c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	685a      	ldr	r2, [r3, #4]
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	1a8a      	subs	r2, r1, r2
 8000ea4:	4908      	ldr	r1, [pc, #32]	; (8000ec8 <uartAvailable+0x84>)
 8000ea6:	011b      	lsls	r3, r3, #4
 8000ea8:	440b      	add	r3, r1
 8000eaa:	601a      	str	r2, [r3, #0]
        ret = qbufferAvailable(&qbuffer[ch]);
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	011b      	lsls	r3, r3, #4
 8000eb0:	4a05      	ldr	r2, [pc, #20]	; (8000ec8 <uartAvailable+0x84>)
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fc00 	bl	80006ba <qbufferAvailable>
 8000eba:	60f8      	str	r0, [r7, #12]
        break;
 8000ebc:	bf00      	nop

  }

  return ret;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	200000b4 	.word	0x200000b4
 8000ecc:	20000364 	.word	0x20000364
 8000ed0:	200002dc 	.word	0x200002dc

08000ed4 <uartRead>:



uint8_t uartRead(uint8_t ch)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret;

  switch(ch)
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d002      	beq.n	8000eea <uartRead+0x16>
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d008      	beq.n	8000efa <uartRead+0x26>
 8000ee8:	e00f      	b.n	8000f0a <uartRead+0x36>
  {
    /* UART1 */
    case _DEF_UART1:
      qbufferRead(&qbuffer[_DEF_UART1], &ret, 1);
 8000eea:	f107 030f 	add.w	r3, r7, #15
 8000eee:	2201      	movs	r2, #1
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4808      	ldr	r0, [pc, #32]	; (8000f14 <uartRead+0x40>)
 8000ef4:	f7ff fba5 	bl	8000642 <qbufferRead>
      break;
 8000ef8:	e007      	b.n	8000f0a <uartRead+0x36>


    /* UART2 */
    case _DEF_UART2:
        qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 8000efa:	f107 030f 	add.w	r3, r7, #15
 8000efe:	2201      	movs	r2, #1
 8000f00:	4619      	mov	r1, r3
 8000f02:	4805      	ldr	r0, [pc, #20]	; (8000f18 <uartRead+0x44>)
 8000f04:	f7ff fb9d 	bl	8000642 <qbufferRead>
        break;
 8000f08:	bf00      	nop

  }

  return ret;
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]

}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3710      	adds	r7, #16
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	200000b4 	.word	0x200000b4
 8000f18:	200000c4 	.word	0x200000c4

08000f1c <uartWrite>:



uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
 8000f28:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
  uint32_t pre_time;

  switch(ch)
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d002      	beq.n	8000f3a <uartWrite+0x1e>
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d034      	beq.n	8000fa2 <uartWrite+0x86>
 8000f38:	e067      	b.n	800100a <uartWrite+0xee>
  {
  	/* UART1 */
    case _DEF_UART1:
        pre_time = millis();
 8000f3a:	f7ff fa20 	bl	800037e <millis>
 8000f3e:	6138      	str	r0, [r7, #16]
        while(millis() - pre_time < 100)
 8000f40:	e025      	b.n	8000f8e <uartWrite+0x72>
        {
          if (huart1.gState == HAL_UART_STATE_READY)
 8000f42:	4b34      	ldr	r3, [pc, #208]	; (8001014 <uartWrite+0xf8>)
 8000f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	2b20      	cmp	r3, #32
 8000f4c:	d11f      	bne.n	8000f8e <uartWrite+0x72>
          {

            for (int i = 0; i < length; i++)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61bb      	str	r3, [r7, #24]
 8000f52:	e00b      	b.n	8000f6c <uartWrite+0x50>
            {
              tx_buf[i] = p_data[i];
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	68ba      	ldr	r2, [r7, #8]
 8000f58:	4413      	add	r3, r2
 8000f5a:	7819      	ldrb	r1, [r3, #0]
 8000f5c:	4a2e      	ldr	r2, [pc, #184]	; (8001018 <uartWrite+0xfc>)
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	4413      	add	r3, r2
 8000f62:	460a      	mov	r2, r1
 8000f64:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < length; i++)
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	61bb      	str	r3, [r7, #24]
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d8ef      	bhi.n	8000f54 <uartWrite+0x38>
            }

            if(HAL_UART_Transmit_DMA(&huart1, &tx_buf[0], length) == HAL_OK)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4927      	ldr	r1, [pc, #156]	; (8001018 <uartWrite+0xfc>)
 8000f7c:	4825      	ldr	r0, [pc, #148]	; (8001014 <uartWrite+0xf8>)
 8000f7e:	f001 fdd1 	bl	8002b24 <HAL_UART_Transmit_DMA>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d10a      	bne.n	8000f9e <uartWrite+0x82>
            {
              ret = length;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	61fb      	str	r3, [r7, #28]
            }

            break;
 8000f8c:	e007      	b.n	8000f9e <uartWrite+0x82>
        while(millis() - pre_time < 100)
 8000f8e:	f7ff f9f6 	bl	800037e <millis>
 8000f92:	4602      	mov	r2, r0
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	2b63      	cmp	r3, #99	; 0x63
 8000f9a:	d9d2      	bls.n	8000f42 <uartWrite+0x26>
          }
        }
      break;
 8000f9c:	e035      	b.n	800100a <uartWrite+0xee>
            break;
 8000f9e:	bf00      	nop
      break;
 8000fa0:	e033      	b.n	800100a <uartWrite+0xee>


    /* UART2 */
    case _DEF_UART2:
        pre_time = millis();
 8000fa2:	f7ff f9ec 	bl	800037e <millis>
 8000fa6:	6138      	str	r0, [r7, #16]
        while(millis() - pre_time < 100)
 8000fa8:	e025      	b.n	8000ff6 <uartWrite+0xda>
        {
          if (huart2.gState == HAL_UART_STATE_READY)
 8000faa:	4b1c      	ldr	r3, [pc, #112]	; (800101c <uartWrite+0x100>)
 8000fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2b20      	cmp	r3, #32
 8000fb4:	d11f      	bne.n	8000ff6 <uartWrite+0xda>
          {

            for (int i = 0; i < length; i++)
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	e00b      	b.n	8000fd4 <uartWrite+0xb8>
            {
              tx_buf[i] = p_data[i];
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	7819      	ldrb	r1, [r3, #0]
 8000fc4:	4a14      	ldr	r2, [pc, #80]	; (8001018 <uartWrite+0xfc>)
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	4413      	add	r3, r2
 8000fca:	460a      	mov	r2, r1
 8000fcc:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < length; i++)
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d8ef      	bhi.n	8000fbc <uartWrite+0xa0>
            }

            if(HAL_UART_Transmit_DMA(&huart2, &tx_buf[0], length) == HAL_OK)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	490d      	ldr	r1, [pc, #52]	; (8001018 <uartWrite+0xfc>)
 8000fe4:	480d      	ldr	r0, [pc, #52]	; (800101c <uartWrite+0x100>)
 8000fe6:	f001 fd9d 	bl	8002b24 <HAL_UART_Transmit_DMA>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d10a      	bne.n	8001006 <uartWrite+0xea>
            {
              ret = length;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	61fb      	str	r3, [r7, #28]
            }

            break;
 8000ff4:	e007      	b.n	8001006 <uartWrite+0xea>
        while(millis() - pre_time < 100)
 8000ff6:	f7ff f9c2 	bl	800037e <millis>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	2b63      	cmp	r3, #99	; 0x63
 8001002:	d9d2      	bls.n	8000faa <uartWrite+0x8e>
          }
        }
      break;
 8001004:	e000      	b.n	8001008 <uartWrite+0xec>
            break;
 8001006:	bf00      	nop
      break;
 8001008:	bf00      	nop

  }
  return ret;
 800100a:	69fb      	ldr	r3, [r7, #28]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3720      	adds	r7, #32
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200003ec 	.word	0x200003ec
 8001018:	200001d4 	.word	0x200001d4
 800101c:	20000430 	.word	0x20000430

08001020 <uartPrintf>:



uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 8001020:	b40e      	push	{r1, r2, r3}
 8001022:	b580      	push	{r7, lr}
 8001024:	b0c7      	sub	sp, #284	; 0x11c
 8001026:	af00      	add	r7, sp, #0
 8001028:	4602      	mov	r2, r0
 800102a:	1dfb      	adds	r3, r7, #7
 800102c:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 800102e:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001032:	f107 030c 	add.w	r3, r7, #12
 8001036:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	f107 0010 	add.w	r0, r7, #16
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001046:	f44f 7180 	mov.w	r1, #256	; 0x100
 800104a:	f002 fb77 	bl	800373c <vsniprintf>
 800104e:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 8001052:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001056:	f107 0110 	add.w	r1, r7, #16
 800105a:	1dfb      	adds	r3, r7, #7
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff ff5c 	bl	8000f1c <uartWrite>
 8001064:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);

  return ret;
 8001068:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 800106c:	4618      	mov	r0, r3
 800106e:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8001072:	46bd      	mov	sp, r7
 8001074:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001078:	b003      	add	sp, #12
 800107a:	4770      	bx	lr

0800107c <HAL_UART_ErrorCallback>:
}



void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]

}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr

0800108e <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]

}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr

080010a0 <HAL_UART_TxCpltCallback>:



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  return;
 80010a8:	bf00      	nop
}
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr
	...

080010b4 <HAL_UART_MspInit>:



void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	; 0x28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0318 	add.w	r3, r7, #24
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a86      	ldr	r2, [pc, #536]	; (80012e8 <HAL_UART_MspInit+0x234>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d17a      	bne.n	80011ca <HAL_UART_MspInit+0x116>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010d4:	4b85      	ldr	r3, [pc, #532]	; (80012ec <HAL_UART_MspInit+0x238>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	4a84      	ldr	r2, [pc, #528]	; (80012ec <HAL_UART_MspInit+0x238>)
 80010da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010de:	6193      	str	r3, [r2, #24]
 80010e0:	4b82      	ldr	r3, [pc, #520]	; (80012ec <HAL_UART_MspInit+0x238>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e8:	617b      	str	r3, [r7, #20]
 80010ea:	697b      	ldr	r3, [r7, #20]
 //   __HAL_RCC_GPIOA_CLK_ENABLE();				/* bsp.c에서 초기화 시킴 */
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f2:	2302      	movs	r3, #2
 80010f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010f6:	2303      	movs	r3, #3
 80010f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fa:	f107 0318 	add.w	r3, r7, #24
 80010fe:	4619      	mov	r1, r3
 8001100:	487b      	ldr	r0, [pc, #492]	; (80012f0 <HAL_UART_MspInit+0x23c>)
 8001102:	f000 fe21 	bl	8001d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001106:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800110a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001114:	f107 0318 	add.w	r3, r7, #24
 8001118:	4619      	mov	r1, r3
 800111a:	4875      	ldr	r0, [pc, #468]	; (80012f0 <HAL_UART_MspInit+0x23c>)
 800111c:	f000 fe14 	bl	8001d48 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001120:	4b74      	ldr	r3, [pc, #464]	; (80012f4 <HAL_UART_MspInit+0x240>)
 8001122:	4a75      	ldr	r2, [pc, #468]	; (80012f8 <HAL_UART_MspInit+0x244>)
 8001124:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001126:	4b73      	ldr	r3, [pc, #460]	; (80012f4 <HAL_UART_MspInit+0x240>)
 8001128:	2200      	movs	r2, #0
 800112a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800112c:	4b71      	ldr	r3, [pc, #452]	; (80012f4 <HAL_UART_MspInit+0x240>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001132:	4b70      	ldr	r3, [pc, #448]	; (80012f4 <HAL_UART_MspInit+0x240>)
 8001134:	2280      	movs	r2, #128	; 0x80
 8001136:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001138:	4b6e      	ldr	r3, [pc, #440]	; (80012f4 <HAL_UART_MspInit+0x240>)
 800113a:	2200      	movs	r2, #0
 800113c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800113e:	4b6d      	ldr	r3, [pc, #436]	; (80012f4 <HAL_UART_MspInit+0x240>)
 8001140:	2200      	movs	r2, #0
 8001142:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001144:	4b6b      	ldr	r3, [pc, #428]	; (80012f4 <HAL_UART_MspInit+0x240>)
 8001146:	2220      	movs	r2, #32
 8001148:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800114a:	4b6a      	ldr	r3, [pc, #424]	; (80012f4 <HAL_UART_MspInit+0x240>)
 800114c:	2200      	movs	r2, #0
 800114e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001150:	4868      	ldr	r0, [pc, #416]	; (80012f4 <HAL_UART_MspInit+0x240>)
 8001152:	f000 faff 	bl	8001754 <HAL_DMA_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <HAL_UART_MspInit+0xac>
    {
      Error_Handler();
 800115c:	f7ff f95b 	bl	8000416 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a64      	ldr	r2, [pc, #400]	; (80012f4 <HAL_UART_MspInit+0x240>)
 8001164:	639a      	str	r2, [r3, #56]	; 0x38
 8001166:	4a63      	ldr	r2, [pc, #396]	; (80012f4 <HAL_UART_MspInit+0x240>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800116c:	4b63      	ldr	r3, [pc, #396]	; (80012fc <HAL_UART_MspInit+0x248>)
 800116e:	4a64      	ldr	r2, [pc, #400]	; (8001300 <HAL_UART_MspInit+0x24c>)
 8001170:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001172:	4b62      	ldr	r3, [pc, #392]	; (80012fc <HAL_UART_MspInit+0x248>)
 8001174:	2210      	movs	r2, #16
 8001176:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001178:	4b60      	ldr	r3, [pc, #384]	; (80012fc <HAL_UART_MspInit+0x248>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800117e:	4b5f      	ldr	r3, [pc, #380]	; (80012fc <HAL_UART_MspInit+0x248>)
 8001180:	2280      	movs	r2, #128	; 0x80
 8001182:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001184:	4b5d      	ldr	r3, [pc, #372]	; (80012fc <HAL_UART_MspInit+0x248>)
 8001186:	2200      	movs	r2, #0
 8001188:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800118a:	4b5c      	ldr	r3, [pc, #368]	; (80012fc <HAL_UART_MspInit+0x248>)
 800118c:	2200      	movs	r2, #0
 800118e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001190:	4b5a      	ldr	r3, [pc, #360]	; (80012fc <HAL_UART_MspInit+0x248>)
 8001192:	2200      	movs	r2, #0
 8001194:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001196:	4b59      	ldr	r3, [pc, #356]	; (80012fc <HAL_UART_MspInit+0x248>)
 8001198:	2200      	movs	r2, #0
 800119a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800119c:	4857      	ldr	r0, [pc, #348]	; (80012fc <HAL_UART_MspInit+0x248>)
 800119e:	f000 fad9 	bl	8001754 <HAL_DMA_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 80011a8:	f7ff f935 	bl	8000416 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a53      	ldr	r2, [pc, #332]	; (80012fc <HAL_UART_MspInit+0x248>)
 80011b0:	635a      	str	r2, [r3, #52]	; 0x34
 80011b2:	4a52      	ldr	r2, [pc, #328]	; (80012fc <HAL_UART_MspInit+0x248>)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2100      	movs	r1, #0
 80011bc:	2025      	movs	r0, #37	; 0x25
 80011be:	f000 fa84 	bl	80016ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011c2:	2025      	movs	r0, #37	; 0x25
 80011c4:	f000 fa9d 	bl	8001702 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80011c8:	e089      	b.n	80012de <HAL_UART_MspInit+0x22a>
  else if(uartHandle->Instance==USART2)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a4d      	ldr	r2, [pc, #308]	; (8001304 <HAL_UART_MspInit+0x250>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	f040 8084 	bne.w	80012de <HAL_UART_MspInit+0x22a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80011d6:	4b45      	ldr	r3, [pc, #276]	; (80012ec <HAL_UART_MspInit+0x238>)
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	4a44      	ldr	r2, [pc, #272]	; (80012ec <HAL_UART_MspInit+0x238>)
 80011dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e0:	61d3      	str	r3, [r2, #28]
 80011e2:	4b42      	ldr	r3, [pc, #264]	; (80012ec <HAL_UART_MspInit+0x238>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	4b3f      	ldr	r3, [pc, #252]	; (80012ec <HAL_UART_MspInit+0x238>)
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	4a3e      	ldr	r2, [pc, #248]	; (80012ec <HAL_UART_MspInit+0x238>)
 80011f4:	f043 0304 	orr.w	r3, r3, #4
 80011f8:	6193      	str	r3, [r2, #24]
 80011fa:	4b3c      	ldr	r3, [pc, #240]	; (80012ec <HAL_UART_MspInit+0x238>)
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	f003 0304 	and.w	r3, r3, #4
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001206:	2304      	movs	r3, #4
 8001208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800120e:	2303      	movs	r3, #3
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001212:	f107 0318 	add.w	r3, r7, #24
 8001216:	4619      	mov	r1, r3
 8001218:	4835      	ldr	r0, [pc, #212]	; (80012f0 <HAL_UART_MspInit+0x23c>)
 800121a:	f000 fd95 	bl	8001d48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800121e:	2308      	movs	r3, #8
 8001220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122a:	f107 0318 	add.w	r3, r7, #24
 800122e:	4619      	mov	r1, r3
 8001230:	482f      	ldr	r0, [pc, #188]	; (80012f0 <HAL_UART_MspInit+0x23c>)
 8001232:	f000 fd89 	bl	8001d48 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001236:	4b34      	ldr	r3, [pc, #208]	; (8001308 <HAL_UART_MspInit+0x254>)
 8001238:	4a34      	ldr	r2, [pc, #208]	; (800130c <HAL_UART_MspInit+0x258>)
 800123a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800123c:	4b32      	ldr	r3, [pc, #200]	; (8001308 <HAL_UART_MspInit+0x254>)
 800123e:	2200      	movs	r2, #0
 8001240:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001242:	4b31      	ldr	r3, [pc, #196]	; (8001308 <HAL_UART_MspInit+0x254>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001248:	4b2f      	ldr	r3, [pc, #188]	; (8001308 <HAL_UART_MspInit+0x254>)
 800124a:	2280      	movs	r2, #128	; 0x80
 800124c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800124e:	4b2e      	ldr	r3, [pc, #184]	; (8001308 <HAL_UART_MspInit+0x254>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001254:	4b2c      	ldr	r3, [pc, #176]	; (8001308 <HAL_UART_MspInit+0x254>)
 8001256:	2200      	movs	r2, #0
 8001258:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800125a:	4b2b      	ldr	r3, [pc, #172]	; (8001308 <HAL_UART_MspInit+0x254>)
 800125c:	2220      	movs	r2, #32
 800125e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001260:	4b29      	ldr	r3, [pc, #164]	; (8001308 <HAL_UART_MspInit+0x254>)
 8001262:	2200      	movs	r2, #0
 8001264:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001266:	4828      	ldr	r0, [pc, #160]	; (8001308 <HAL_UART_MspInit+0x254>)
 8001268:	f000 fa74 	bl	8001754 <HAL_DMA_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_UART_MspInit+0x1c2>
      Error_Handler();
 8001272:	f7ff f8d0 	bl	8000416 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a23      	ldr	r2, [pc, #140]	; (8001308 <HAL_UART_MspInit+0x254>)
 800127a:	639a      	str	r2, [r3, #56]	; 0x38
 800127c:	4a22      	ldr	r2, [pc, #136]	; (8001308 <HAL_UART_MspInit+0x254>)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001282:	4b23      	ldr	r3, [pc, #140]	; (8001310 <HAL_UART_MspInit+0x25c>)
 8001284:	4a23      	ldr	r2, [pc, #140]	; (8001314 <HAL_UART_MspInit+0x260>)
 8001286:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001288:	4b21      	ldr	r3, [pc, #132]	; (8001310 <HAL_UART_MspInit+0x25c>)
 800128a:	2210      	movs	r2, #16
 800128c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800128e:	4b20      	ldr	r3, [pc, #128]	; (8001310 <HAL_UART_MspInit+0x25c>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001294:	4b1e      	ldr	r3, [pc, #120]	; (8001310 <HAL_UART_MspInit+0x25c>)
 8001296:	2280      	movs	r2, #128	; 0x80
 8001298:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800129a:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <HAL_UART_MspInit+0x25c>)
 800129c:	2200      	movs	r2, #0
 800129e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012a0:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <HAL_UART_MspInit+0x25c>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80012a6:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <HAL_UART_MspInit+0x25c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012ac:	4b18      	ldr	r3, [pc, #96]	; (8001310 <HAL_UART_MspInit+0x25c>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80012b2:	4817      	ldr	r0, [pc, #92]	; (8001310 <HAL_UART_MspInit+0x25c>)
 80012b4:	f000 fa4e 	bl	8001754 <HAL_DMA_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_UART_MspInit+0x20e>
      Error_Handler();
 80012be:	f7ff f8aa 	bl	8000416 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a12      	ldr	r2, [pc, #72]	; (8001310 <HAL_UART_MspInit+0x25c>)
 80012c6:	635a      	str	r2, [r3, #52]	; 0x34
 80012c8:	4a11      	ldr	r2, [pc, #68]	; (8001310 <HAL_UART_MspInit+0x25c>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2100      	movs	r1, #0
 80012d2:	2026      	movs	r0, #38	; 0x26
 80012d4:	f000 f9f9 	bl	80016ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012d8:	2026      	movs	r0, #38	; 0x26
 80012da:	f000 fa12 	bl	8001702 <HAL_NVIC_EnableIRQ>
}
 80012de:	bf00      	nop
 80012e0:	3728      	adds	r7, #40	; 0x28
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40013800 	.word	0x40013800
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40010800 	.word	0x40010800
 80012f4:	20000364 	.word	0x20000364
 80012f8:	40020058 	.word	0x40020058
 80012fc:	20000320 	.word	0x20000320
 8001300:	40020044 	.word	0x40020044
 8001304:	40004400 	.word	0x40004400
 8001308:	200002dc 	.word	0x200002dc
 800130c:	4002006c 	.word	0x4002006c
 8001310:	200003a8 	.word	0x200003a8
 8001314:	40020080 	.word	0x40020080

08001318 <HAL_UART_MspDeInit>:


void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a1d      	ldr	r2, [pc, #116]	; (800139c <HAL_UART_MspDeInit+0x84>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d118      	bne.n	800135c <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800132a:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <HAL_UART_MspDeInit+0x88>)
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	4a1c      	ldr	r2, [pc, #112]	; (80013a0 <HAL_UART_MspDeInit+0x88>)
 8001330:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001334:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8001336:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800133a:	481a      	ldr	r0, [pc, #104]	; (80013a4 <HAL_UART_MspDeInit+0x8c>)
 800133c:	f000 fe88 	bl	8002050 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001344:	4618      	mov	r0, r3
 8001346:	f000 fa5f 	bl	8001808 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800134e:	4618      	mov	r0, r3
 8001350:	f000 fa5a 	bl	8001808 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001354:	2025      	movs	r0, #37	; 0x25
 8001356:	f000 f9e2 	bl	800171e <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 800135a:	e01b      	b.n	8001394 <HAL_UART_MspDeInit+0x7c>
  else if(uartHandle->Instance==USART2)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a11      	ldr	r2, [pc, #68]	; (80013a8 <HAL_UART_MspDeInit+0x90>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d116      	bne.n	8001394 <HAL_UART_MspDeInit+0x7c>
    __HAL_RCC_USART2_CLK_DISABLE();
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <HAL_UART_MspDeInit+0x88>)
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	4a0d      	ldr	r2, [pc, #52]	; (80013a0 <HAL_UART_MspDeInit+0x88>)
 800136c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001370:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8001372:	210c      	movs	r1, #12
 8001374:	480b      	ldr	r0, [pc, #44]	; (80013a4 <HAL_UART_MspDeInit+0x8c>)
 8001376:	f000 fe6b 	bl	8002050 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800137e:	4618      	mov	r0, r3
 8001380:	f000 fa42 	bl	8001808 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001388:	4618      	mov	r0, r3
 800138a:	f000 fa3d 	bl	8001808 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800138e:	2026      	movs	r0, #38	; 0x26
 8001390:	f000 f9c5 	bl	800171e <HAL_NVIC_DisableIRQ>
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40013800 	.word	0x40013800
 80013a0:	40021000 	.word	0x40021000
 80013a4:	40010800 	.word	0x40010800
 80013a8:	40004400 	.word	0x40004400

080013ac <hwInit>:

#include "hw.h"


void hwInit(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
	bspInit();
 80013b0:	f7fe ff9c 	bl	80002ec <bspInit>

/*  TODO: HW 설정 - "하드웨어 초기화" (3) */

	uartInit();
 80013b4:	f7ff fc18 	bl	8000be8 <uartInit>
	gpioInit();
 80013b8:	f7ff fad6 	bl	8000968 <gpioInit>
	dfplayer_Init();
 80013bc:	f7ff f9fe 	bl	80007bc <dfplayer_Init>
	ledInit();
 80013c0:	f7ff fbbc 	bl	8000b3c <ledInit>

}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <HAL_Init+0x28>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a07      	ldr	r2, [pc, #28]	; (80013f0 <HAL_Init+0x28>)
 80013d2:	f043 0310 	orr.w	r3, r3, #16
 80013d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d8:	2003      	movs	r0, #3
 80013da:	f000 f96b 	bl	80016b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013de:	2000      	movs	r0, #0
 80013e0:	f000 f808 	bl	80013f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e4:	f7ff f81c 	bl	8000420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40022000 	.word	0x40022000

080013f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013fc:	4b12      	ldr	r3, [pc, #72]	; (8001448 <HAL_InitTick+0x54>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <HAL_InitTick+0x58>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	4619      	mov	r1, r3
 8001406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800140a:	fbb3 f3f1 	udiv	r3, r3, r1
 800140e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001412:	4618      	mov	r0, r3
 8001414:	f000 f991 	bl	800173a <HAL_SYSTICK_Config>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e00e      	b.n	8001440 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b0f      	cmp	r3, #15
 8001426:	d80a      	bhi.n	800143e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001428:	2200      	movs	r2, #0
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	f04f 30ff 	mov.w	r0, #4294967295
 8001430:	f000 f94b 	bl	80016ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001434:	4a06      	ldr	r2, [pc, #24]	; (8001450 <HAL_InitTick+0x5c>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800143a:	2300      	movs	r3, #0
 800143c:	e000      	b.n	8001440 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
}
 8001440:	4618      	mov	r0, r3
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000000 	.word	0x20000000
 800144c:	2000001c 	.word	0x2000001c
 8001450:	20000018 	.word	0x20000018

08001454 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <HAL_IncTick+0x1c>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	461a      	mov	r2, r3
 800145e:	4b05      	ldr	r3, [pc, #20]	; (8001474 <HAL_IncTick+0x20>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4413      	add	r3, r2
 8001464:	4a03      	ldr	r2, [pc, #12]	; (8001474 <HAL_IncTick+0x20>)
 8001466:	6013      	str	r3, [r2, #0]
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr
 8001470:	2000001c 	.word	0x2000001c
 8001474:	20000474 	.word	0x20000474

08001478 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return uwTick;
 800147c:	4b02      	ldr	r3, [pc, #8]	; (8001488 <HAL_GetTick+0x10>)
 800147e:	681b      	ldr	r3, [r3, #0]
}
 8001480:	4618      	mov	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr
 8001488:	20000474 	.word	0x20000474

0800148c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001494:	f7ff fff0 	bl	8001478 <HAL_GetTick>
 8001498:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a4:	d005      	beq.n	80014b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014a6:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <HAL_Delay+0x44>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	461a      	mov	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4413      	add	r3, r2
 80014b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014b2:	bf00      	nop
 80014b4:	f7ff ffe0 	bl	8001478 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d8f7      	bhi.n	80014b4 <HAL_Delay+0x28>
  {
  }
}
 80014c4:	bf00      	nop
 80014c6:	bf00      	nop
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	2000001c 	.word	0x2000001c

080014d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <__NVIC_SetPriorityGrouping+0x44>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f0:	4013      	ands	r3, r2
 80014f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001506:	4a04      	ldr	r2, [pc, #16]	; (8001518 <__NVIC_SetPriorityGrouping+0x44>)
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	60d3      	str	r3, [r2, #12]
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001520:	4b04      	ldr	r3, [pc, #16]	; (8001534 <__NVIC_GetPriorityGrouping+0x18>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	0a1b      	lsrs	r3, r3, #8
 8001526:	f003 0307 	and.w	r3, r3, #7
}
 800152a:	4618      	mov	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	bc80      	pop	{r7}
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	2b00      	cmp	r3, #0
 8001548:	db0b      	blt.n	8001562 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	f003 021f 	and.w	r2, r3, #31
 8001550:	4906      	ldr	r1, [pc, #24]	; (800156c <__NVIC_EnableIRQ+0x34>)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	095b      	lsrs	r3, r3, #5
 8001558:	2001      	movs	r0, #1
 800155a:	fa00 f202 	lsl.w	r2, r0, r2
 800155e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	e000e100 	.word	0xe000e100

08001570 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	2b00      	cmp	r3, #0
 8001580:	db12      	blt.n	80015a8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	f003 021f 	and.w	r2, r3, #31
 8001588:	490a      	ldr	r1, [pc, #40]	; (80015b4 <__NVIC_DisableIRQ+0x44>)
 800158a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158e:	095b      	lsrs	r3, r3, #5
 8001590:	2001      	movs	r0, #1
 8001592:	fa00 f202 	lsl.w	r2, r0, r2
 8001596:	3320      	adds	r3, #32
 8001598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800159c:	f3bf 8f4f 	dsb	sy
}
 80015a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015a2:	f3bf 8f6f 	isb	sy
}
 80015a6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	e000e100 	.word	0xe000e100

080015b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	6039      	str	r1, [r7, #0]
 80015c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	db0a      	blt.n	80015e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	490c      	ldr	r1, [pc, #48]	; (8001604 <__NVIC_SetPriority+0x4c>)
 80015d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d6:	0112      	lsls	r2, r2, #4
 80015d8:	b2d2      	uxtb	r2, r2
 80015da:	440b      	add	r3, r1
 80015dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e0:	e00a      	b.n	80015f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	4908      	ldr	r1, [pc, #32]	; (8001608 <__NVIC_SetPriority+0x50>)
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	f003 030f 	and.w	r3, r3, #15
 80015ee:	3b04      	subs	r3, #4
 80015f0:	0112      	lsls	r2, r2, #4
 80015f2:	b2d2      	uxtb	r2, r2
 80015f4:	440b      	add	r3, r1
 80015f6:	761a      	strb	r2, [r3, #24]
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	e000e100 	.word	0xe000e100
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800160c:	b480      	push	{r7}
 800160e:	b089      	sub	sp, #36	; 0x24
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	f1c3 0307 	rsb	r3, r3, #7
 8001626:	2b04      	cmp	r3, #4
 8001628:	bf28      	it	cs
 800162a:	2304      	movcs	r3, #4
 800162c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	3304      	adds	r3, #4
 8001632:	2b06      	cmp	r3, #6
 8001634:	d902      	bls.n	800163c <NVIC_EncodePriority+0x30>
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	3b03      	subs	r3, #3
 800163a:	e000      	b.n	800163e <NVIC_EncodePriority+0x32>
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001640:	f04f 32ff 	mov.w	r2, #4294967295
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43da      	mvns	r2, r3
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	401a      	ands	r2, r3
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001654:	f04f 31ff 	mov.w	r1, #4294967295
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	fa01 f303 	lsl.w	r3, r1, r3
 800165e:	43d9      	mvns	r1, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001664:	4313      	orrs	r3, r2
         );
}
 8001666:	4618      	mov	r0, r3
 8001668:	3724      	adds	r7, #36	; 0x24
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr

08001670 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3b01      	subs	r3, #1
 800167c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001680:	d301      	bcc.n	8001686 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001682:	2301      	movs	r3, #1
 8001684:	e00f      	b.n	80016a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001686:	4a0a      	ldr	r2, [pc, #40]	; (80016b0 <SysTick_Config+0x40>)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3b01      	subs	r3, #1
 800168c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800168e:	210f      	movs	r1, #15
 8001690:	f04f 30ff 	mov.w	r0, #4294967295
 8001694:	f7ff ff90 	bl	80015b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <SysTick_Config+0x40>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800169e:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <SysTick_Config+0x40>)
 80016a0:	2207      	movs	r2, #7
 80016a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	e000e010 	.word	0xe000e010

080016b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff ff09 	bl	80014d4 <__NVIC_SetPriorityGrouping>
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b086      	sub	sp, #24
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	4603      	mov	r3, r0
 80016d2:	60b9      	str	r1, [r7, #8]
 80016d4:	607a      	str	r2, [r7, #4]
 80016d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016dc:	f7ff ff1e 	bl	800151c <__NVIC_GetPriorityGrouping>
 80016e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	68b9      	ldr	r1, [r7, #8]
 80016e6:	6978      	ldr	r0, [r7, #20]
 80016e8:	f7ff ff90 	bl	800160c <NVIC_EncodePriority>
 80016ec:	4602      	mov	r2, r0
 80016ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f2:	4611      	mov	r1, r2
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ff5f 	bl	80015b8 <__NVIC_SetPriority>
}
 80016fa:	bf00      	nop
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	4603      	mov	r3, r0
 800170a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800170c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff ff11 	bl	8001538 <__NVIC_EnableIRQ>
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
 8001724:	4603      	mov	r3, r0
 8001726:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ff1f 	bl	8001570 <__NVIC_DisableIRQ>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff ff94 	bl	8001670 <SysTick_Config>
 8001748:	4603      	mov	r3, r0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800175c:	2300      	movs	r3, #0
 800175e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d101      	bne.n	800176a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e043      	b.n	80017f2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	461a      	mov	r2, r3
 8001770:	4b22      	ldr	r3, [pc, #136]	; (80017fc <HAL_DMA_Init+0xa8>)
 8001772:	4413      	add	r3, r2
 8001774:	4a22      	ldr	r2, [pc, #136]	; (8001800 <HAL_DMA_Init+0xac>)
 8001776:	fba2 2303 	umull	r2, r3, r2, r3
 800177a:	091b      	lsrs	r3, r3, #4
 800177c:	009a      	lsls	r2, r3, #2
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a1f      	ldr	r2, [pc, #124]	; (8001804 <HAL_DMA_Init+0xb0>)
 8001786:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2202      	movs	r2, #2
 800178c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800179e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80017a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80017ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr
 80017fc:	bffdfff8 	.word	0xbffdfff8
 8001800:	cccccccd 	.word	0xcccccccd
 8001804:	40020000 	.word	0x40020000

08001808 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e046      	b.n	80018a8 <HAL_DMA_DeInit+0xa0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f022 0201 	bic.w	r2, r2, #1
 8001828:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2200      	movs	r2, #0
 8001838:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2200      	movs	r2, #0
 8001848:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	461a      	mov	r2, r3
 8001850:	4b18      	ldr	r3, [pc, #96]	; (80018b4 <HAL_DMA_DeInit+0xac>)
 8001852:	4413      	add	r3, r2
 8001854:	4a18      	ldr	r2, [pc, #96]	; (80018b8 <HAL_DMA_DeInit+0xb0>)
 8001856:	fba2 2303 	umull	r2, r3, r2, r3
 800185a:	091b      	lsrs	r3, r3, #4
 800185c:	009a      	lsls	r2, r3, #2
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a15      	ldr	r2, [pc, #84]	; (80018bc <HAL_DMA_DeInit+0xb4>)
 8001866:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001870:	2101      	movs	r1, #1
 8001872:	fa01 f202 	lsl.w	r2, r1, r2
 8001876:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	bffdfff8 	.word	0xbffdfff8
 80018b8:	cccccccd 	.word	0xcccccccd
 80018bc:	40020000 	.word	0x40020000

080018c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
 80018cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d101      	bne.n	80018e0 <HAL_DMA_Start_IT+0x20>
 80018dc:	2302      	movs	r3, #2
 80018de:	e04a      	b.n	8001976 <HAL_DMA_Start_IT+0xb6>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d13a      	bne.n	8001968 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2202      	movs	r2, #2
 80018f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2200      	movs	r2, #0
 80018fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 0201 	bic.w	r2, r2, #1
 800190e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	68b9      	ldr	r1, [r7, #8]
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	f000 f9e8 	bl	8001cec <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001920:	2b00      	cmp	r3, #0
 8001922:	d008      	beq.n	8001936 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f042 020e 	orr.w	r2, r2, #14
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	e00f      	b.n	8001956 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f022 0204 	bic.w	r2, r2, #4
 8001944:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f042 020a 	orr.w	r2, r2, #10
 8001954:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f042 0201 	orr.w	r2, r2, #1
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	e005      	b.n	8001974 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001970:	2302      	movs	r3, #2
 8001972:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001974:	7dfb      	ldrb	r3, [r7, #23]
}
 8001976:	4618      	mov	r0, r3
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800197e:	b480      	push	{r7}
 8001980:	b085      	sub	sp, #20
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001986:	2300      	movs	r3, #0
 8001988:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001990:	2b02      	cmp	r3, #2
 8001992:	d008      	beq.n	80019a6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2204      	movs	r2, #4
 8001998:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e020      	b.n	80019e8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f022 020e 	bic.w	r2, r2, #14
 80019b4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 0201 	bic.w	r2, r2, #1
 80019c4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ce:	2101      	movs	r1, #1
 80019d0:	fa01 f202 	lsl.w	r2, r1, r2
 80019d4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2201      	movs	r2, #1
 80019da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr
	...

080019f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019fc:	2300      	movs	r3, #0
 80019fe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d005      	beq.n	8001a16 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2204      	movs	r2, #4
 8001a0e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	73fb      	strb	r3, [r7, #15]
 8001a14:	e051      	b.n	8001aba <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 020e 	bic.w	r2, r2, #14
 8001a24:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f022 0201 	bic.w	r2, r2, #1
 8001a34:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a22      	ldr	r2, [pc, #136]	; (8001ac4 <HAL_DMA_Abort_IT+0xd0>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d029      	beq.n	8001a94 <HAL_DMA_Abort_IT+0xa0>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a20      	ldr	r2, [pc, #128]	; (8001ac8 <HAL_DMA_Abort_IT+0xd4>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d022      	beq.n	8001a90 <HAL_DMA_Abort_IT+0x9c>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a1f      	ldr	r2, [pc, #124]	; (8001acc <HAL_DMA_Abort_IT+0xd8>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d01a      	beq.n	8001a8a <HAL_DMA_Abort_IT+0x96>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a1d      	ldr	r2, [pc, #116]	; (8001ad0 <HAL_DMA_Abort_IT+0xdc>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d012      	beq.n	8001a84 <HAL_DMA_Abort_IT+0x90>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a1c      	ldr	r2, [pc, #112]	; (8001ad4 <HAL_DMA_Abort_IT+0xe0>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d00a      	beq.n	8001a7e <HAL_DMA_Abort_IT+0x8a>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a1a      	ldr	r2, [pc, #104]	; (8001ad8 <HAL_DMA_Abort_IT+0xe4>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d102      	bne.n	8001a78 <HAL_DMA_Abort_IT+0x84>
 8001a72:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a76:	e00e      	b.n	8001a96 <HAL_DMA_Abort_IT+0xa2>
 8001a78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a7c:	e00b      	b.n	8001a96 <HAL_DMA_Abort_IT+0xa2>
 8001a7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a82:	e008      	b.n	8001a96 <HAL_DMA_Abort_IT+0xa2>
 8001a84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a88:	e005      	b.n	8001a96 <HAL_DMA_Abort_IT+0xa2>
 8001a8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a8e:	e002      	b.n	8001a96 <HAL_DMA_Abort_IT+0xa2>
 8001a90:	2310      	movs	r3, #16
 8001a92:	e000      	b.n	8001a96 <HAL_DMA_Abort_IT+0xa2>
 8001a94:	2301      	movs	r3, #1
 8001a96:	4a11      	ldr	r2, [pc, #68]	; (8001adc <HAL_DMA_Abort_IT+0xe8>)
 8001a98:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	4798      	blx	r3
    } 
  }
  return status;
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40020008 	.word	0x40020008
 8001ac8:	4002001c 	.word	0x4002001c
 8001acc:	40020030 	.word	0x40020030
 8001ad0:	40020044 	.word	0x40020044
 8001ad4:	40020058 	.word	0x40020058
 8001ad8:	4002006c 	.word	0x4002006c
 8001adc:	40020000 	.word	0x40020000

08001ae0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	2204      	movs	r2, #4
 8001afe:	409a      	lsls	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4013      	ands	r3, r2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d04f      	beq.n	8001ba8 <HAL_DMA_IRQHandler+0xc8>
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	f003 0304 	and.w	r3, r3, #4
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d04a      	beq.n	8001ba8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0320 	and.w	r3, r3, #32
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d107      	bne.n	8001b30 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 0204 	bic.w	r2, r2, #4
 8001b2e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a66      	ldr	r2, [pc, #408]	; (8001cd0 <HAL_DMA_IRQHandler+0x1f0>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d029      	beq.n	8001b8e <HAL_DMA_IRQHandler+0xae>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a65      	ldr	r2, [pc, #404]	; (8001cd4 <HAL_DMA_IRQHandler+0x1f4>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d022      	beq.n	8001b8a <HAL_DMA_IRQHandler+0xaa>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a63      	ldr	r2, [pc, #396]	; (8001cd8 <HAL_DMA_IRQHandler+0x1f8>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d01a      	beq.n	8001b84 <HAL_DMA_IRQHandler+0xa4>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a62      	ldr	r2, [pc, #392]	; (8001cdc <HAL_DMA_IRQHandler+0x1fc>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d012      	beq.n	8001b7e <HAL_DMA_IRQHandler+0x9e>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a60      	ldr	r2, [pc, #384]	; (8001ce0 <HAL_DMA_IRQHandler+0x200>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d00a      	beq.n	8001b78 <HAL_DMA_IRQHandler+0x98>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a5f      	ldr	r2, [pc, #380]	; (8001ce4 <HAL_DMA_IRQHandler+0x204>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d102      	bne.n	8001b72 <HAL_DMA_IRQHandler+0x92>
 8001b6c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b70:	e00e      	b.n	8001b90 <HAL_DMA_IRQHandler+0xb0>
 8001b72:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001b76:	e00b      	b.n	8001b90 <HAL_DMA_IRQHandler+0xb0>
 8001b78:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001b7c:	e008      	b.n	8001b90 <HAL_DMA_IRQHandler+0xb0>
 8001b7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b82:	e005      	b.n	8001b90 <HAL_DMA_IRQHandler+0xb0>
 8001b84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b88:	e002      	b.n	8001b90 <HAL_DMA_IRQHandler+0xb0>
 8001b8a:	2340      	movs	r3, #64	; 0x40
 8001b8c:	e000      	b.n	8001b90 <HAL_DMA_IRQHandler+0xb0>
 8001b8e:	2304      	movs	r3, #4
 8001b90:	4a55      	ldr	r2, [pc, #340]	; (8001ce8 <HAL_DMA_IRQHandler+0x208>)
 8001b92:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f000 8094 	beq.w	8001cc6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001ba6:	e08e      	b.n	8001cc6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bac:	2202      	movs	r2, #2
 8001bae:	409a      	lsls	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d056      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x186>
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d051      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0320 	and.w	r3, r3, #32
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d10b      	bne.n	8001be8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 020a 	bic.w	r2, r2, #10
 8001bde:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a38      	ldr	r2, [pc, #224]	; (8001cd0 <HAL_DMA_IRQHandler+0x1f0>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d029      	beq.n	8001c46 <HAL_DMA_IRQHandler+0x166>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a37      	ldr	r2, [pc, #220]	; (8001cd4 <HAL_DMA_IRQHandler+0x1f4>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d022      	beq.n	8001c42 <HAL_DMA_IRQHandler+0x162>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a35      	ldr	r2, [pc, #212]	; (8001cd8 <HAL_DMA_IRQHandler+0x1f8>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d01a      	beq.n	8001c3c <HAL_DMA_IRQHandler+0x15c>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a34      	ldr	r2, [pc, #208]	; (8001cdc <HAL_DMA_IRQHandler+0x1fc>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d012      	beq.n	8001c36 <HAL_DMA_IRQHandler+0x156>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a32      	ldr	r2, [pc, #200]	; (8001ce0 <HAL_DMA_IRQHandler+0x200>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d00a      	beq.n	8001c30 <HAL_DMA_IRQHandler+0x150>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a31      	ldr	r2, [pc, #196]	; (8001ce4 <HAL_DMA_IRQHandler+0x204>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d102      	bne.n	8001c2a <HAL_DMA_IRQHandler+0x14a>
 8001c24:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c28:	e00e      	b.n	8001c48 <HAL_DMA_IRQHandler+0x168>
 8001c2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c2e:	e00b      	b.n	8001c48 <HAL_DMA_IRQHandler+0x168>
 8001c30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c34:	e008      	b.n	8001c48 <HAL_DMA_IRQHandler+0x168>
 8001c36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c3a:	e005      	b.n	8001c48 <HAL_DMA_IRQHandler+0x168>
 8001c3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c40:	e002      	b.n	8001c48 <HAL_DMA_IRQHandler+0x168>
 8001c42:	2320      	movs	r3, #32
 8001c44:	e000      	b.n	8001c48 <HAL_DMA_IRQHandler+0x168>
 8001c46:	2302      	movs	r3, #2
 8001c48:	4a27      	ldr	r2, [pc, #156]	; (8001ce8 <HAL_DMA_IRQHandler+0x208>)
 8001c4a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d034      	beq.n	8001cc6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001c64:	e02f      	b.n	8001cc6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	2208      	movs	r2, #8
 8001c6c:	409a      	lsls	r2, r3
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	4013      	ands	r3, r2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d028      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x1e8>
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	f003 0308 	and.w	r3, r3, #8
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d023      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f022 020e 	bic.w	r2, r2, #14
 8001c8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c98:	2101      	movs	r1, #1
 8001c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c9e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d004      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	4798      	blx	r3
    }
  }
  return;
 8001cc6:	bf00      	nop
 8001cc8:	bf00      	nop
}
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40020008 	.word	0x40020008
 8001cd4:	4002001c 	.word	0x4002001c
 8001cd8:	40020030 	.word	0x40020030
 8001cdc:	40020044 	.word	0x40020044
 8001ce0:	40020058 	.word	0x40020058
 8001ce4:	4002006c 	.word	0x4002006c
 8001ce8:	40020000 	.word	0x40020000

08001cec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
 8001cf8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d02:	2101      	movs	r1, #1
 8001d04:	fa01 f202 	lsl.w	r2, r1, r2
 8001d08:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	2b10      	cmp	r3, #16
 8001d18:	d108      	bne.n	8001d2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68ba      	ldr	r2, [r7, #8]
 8001d28:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d2a:	e007      	b.n	8001d3c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68ba      	ldr	r2, [r7, #8]
 8001d32:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	60da      	str	r2, [r3, #12]
}
 8001d3c:	bf00      	nop
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr
	...

08001d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b08b      	sub	sp, #44	; 0x2c
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d52:	2300      	movs	r3, #0
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d56:	2300      	movs	r3, #0
 8001d58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d5a:	e169      	b.n	8002030 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	69fa      	ldr	r2, [r7, #28]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	f040 8158 	bne.w	800202a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	4a9a      	ldr	r2, [pc, #616]	; (8001fe8 <HAL_GPIO_Init+0x2a0>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d05e      	beq.n	8001e42 <HAL_GPIO_Init+0xfa>
 8001d84:	4a98      	ldr	r2, [pc, #608]	; (8001fe8 <HAL_GPIO_Init+0x2a0>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d875      	bhi.n	8001e76 <HAL_GPIO_Init+0x12e>
 8001d8a:	4a98      	ldr	r2, [pc, #608]	; (8001fec <HAL_GPIO_Init+0x2a4>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d058      	beq.n	8001e42 <HAL_GPIO_Init+0xfa>
 8001d90:	4a96      	ldr	r2, [pc, #600]	; (8001fec <HAL_GPIO_Init+0x2a4>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d86f      	bhi.n	8001e76 <HAL_GPIO_Init+0x12e>
 8001d96:	4a96      	ldr	r2, [pc, #600]	; (8001ff0 <HAL_GPIO_Init+0x2a8>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d052      	beq.n	8001e42 <HAL_GPIO_Init+0xfa>
 8001d9c:	4a94      	ldr	r2, [pc, #592]	; (8001ff0 <HAL_GPIO_Init+0x2a8>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d869      	bhi.n	8001e76 <HAL_GPIO_Init+0x12e>
 8001da2:	4a94      	ldr	r2, [pc, #592]	; (8001ff4 <HAL_GPIO_Init+0x2ac>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d04c      	beq.n	8001e42 <HAL_GPIO_Init+0xfa>
 8001da8:	4a92      	ldr	r2, [pc, #584]	; (8001ff4 <HAL_GPIO_Init+0x2ac>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d863      	bhi.n	8001e76 <HAL_GPIO_Init+0x12e>
 8001dae:	4a92      	ldr	r2, [pc, #584]	; (8001ff8 <HAL_GPIO_Init+0x2b0>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d046      	beq.n	8001e42 <HAL_GPIO_Init+0xfa>
 8001db4:	4a90      	ldr	r2, [pc, #576]	; (8001ff8 <HAL_GPIO_Init+0x2b0>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d85d      	bhi.n	8001e76 <HAL_GPIO_Init+0x12e>
 8001dba:	2b12      	cmp	r3, #18
 8001dbc:	d82a      	bhi.n	8001e14 <HAL_GPIO_Init+0xcc>
 8001dbe:	2b12      	cmp	r3, #18
 8001dc0:	d859      	bhi.n	8001e76 <HAL_GPIO_Init+0x12e>
 8001dc2:	a201      	add	r2, pc, #4	; (adr r2, 8001dc8 <HAL_GPIO_Init+0x80>)
 8001dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc8:	08001e43 	.word	0x08001e43
 8001dcc:	08001e1d 	.word	0x08001e1d
 8001dd0:	08001e2f 	.word	0x08001e2f
 8001dd4:	08001e71 	.word	0x08001e71
 8001dd8:	08001e77 	.word	0x08001e77
 8001ddc:	08001e77 	.word	0x08001e77
 8001de0:	08001e77 	.word	0x08001e77
 8001de4:	08001e77 	.word	0x08001e77
 8001de8:	08001e77 	.word	0x08001e77
 8001dec:	08001e77 	.word	0x08001e77
 8001df0:	08001e77 	.word	0x08001e77
 8001df4:	08001e77 	.word	0x08001e77
 8001df8:	08001e77 	.word	0x08001e77
 8001dfc:	08001e77 	.word	0x08001e77
 8001e00:	08001e77 	.word	0x08001e77
 8001e04:	08001e77 	.word	0x08001e77
 8001e08:	08001e77 	.word	0x08001e77
 8001e0c:	08001e25 	.word	0x08001e25
 8001e10:	08001e39 	.word	0x08001e39
 8001e14:	4a79      	ldr	r2, [pc, #484]	; (8001ffc <HAL_GPIO_Init+0x2b4>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d013      	beq.n	8001e42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e1a:	e02c      	b.n	8001e76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	623b      	str	r3, [r7, #32]
          break;
 8001e22:	e029      	b.n	8001e78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	3304      	adds	r3, #4
 8001e2a:	623b      	str	r3, [r7, #32]
          break;
 8001e2c:	e024      	b.n	8001e78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	3308      	adds	r3, #8
 8001e34:	623b      	str	r3, [r7, #32]
          break;
 8001e36:	e01f      	b.n	8001e78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	330c      	adds	r3, #12
 8001e3e:	623b      	str	r3, [r7, #32]
          break;
 8001e40:	e01a      	b.n	8001e78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d102      	bne.n	8001e50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	623b      	str	r3, [r7, #32]
          break;
 8001e4e:	e013      	b.n	8001e78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d105      	bne.n	8001e64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e58:	2308      	movs	r3, #8
 8001e5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69fa      	ldr	r2, [r7, #28]
 8001e60:	611a      	str	r2, [r3, #16]
          break;
 8001e62:	e009      	b.n	8001e78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e64:	2308      	movs	r3, #8
 8001e66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	69fa      	ldr	r2, [r7, #28]
 8001e6c:	615a      	str	r2, [r3, #20]
          break;
 8001e6e:	e003      	b.n	8001e78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e70:	2300      	movs	r3, #0
 8001e72:	623b      	str	r3, [r7, #32]
          break;
 8001e74:	e000      	b.n	8001e78 <HAL_GPIO_Init+0x130>
          break;
 8001e76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	2bff      	cmp	r3, #255	; 0xff
 8001e7c:	d801      	bhi.n	8001e82 <HAL_GPIO_Init+0x13a>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	e001      	b.n	8001e86 <HAL_GPIO_Init+0x13e>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	3304      	adds	r3, #4
 8001e86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	2bff      	cmp	r3, #255	; 0xff
 8001e8c:	d802      	bhi.n	8001e94 <HAL_GPIO_Init+0x14c>
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	e002      	b.n	8001e9a <HAL_GPIO_Init+0x152>
 8001e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e96:	3b08      	subs	r3, #8
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	210f      	movs	r1, #15
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	401a      	ands	r2, r3
 8001eac:	6a39      	ldr	r1, [r7, #32]
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 80b1 	beq.w	800202a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ec8:	4b4d      	ldr	r3, [pc, #308]	; (8002000 <HAL_GPIO_Init+0x2b8>)
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	4a4c      	ldr	r2, [pc, #304]	; (8002000 <HAL_GPIO_Init+0x2b8>)
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	6193      	str	r3, [r2, #24]
 8001ed4:	4b4a      	ldr	r3, [pc, #296]	; (8002000 <HAL_GPIO_Init+0x2b8>)
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	60bb      	str	r3, [r7, #8]
 8001ede:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ee0:	4a48      	ldr	r2, [pc, #288]	; (8002004 <HAL_GPIO_Init+0x2bc>)
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	089b      	lsrs	r3, r3, #2
 8001ee6:	3302      	adds	r3, #2
 8001ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	220f      	movs	r2, #15
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	4013      	ands	r3, r2
 8001f02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a40      	ldr	r2, [pc, #256]	; (8002008 <HAL_GPIO_Init+0x2c0>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d013      	beq.n	8001f34 <HAL_GPIO_Init+0x1ec>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a3f      	ldr	r2, [pc, #252]	; (800200c <HAL_GPIO_Init+0x2c4>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d00d      	beq.n	8001f30 <HAL_GPIO_Init+0x1e8>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a3e      	ldr	r2, [pc, #248]	; (8002010 <HAL_GPIO_Init+0x2c8>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d007      	beq.n	8001f2c <HAL_GPIO_Init+0x1e4>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a3d      	ldr	r2, [pc, #244]	; (8002014 <HAL_GPIO_Init+0x2cc>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d101      	bne.n	8001f28 <HAL_GPIO_Init+0x1e0>
 8001f24:	2303      	movs	r3, #3
 8001f26:	e006      	b.n	8001f36 <HAL_GPIO_Init+0x1ee>
 8001f28:	2304      	movs	r3, #4
 8001f2a:	e004      	b.n	8001f36 <HAL_GPIO_Init+0x1ee>
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	e002      	b.n	8001f36 <HAL_GPIO_Init+0x1ee>
 8001f30:	2301      	movs	r3, #1
 8001f32:	e000      	b.n	8001f36 <HAL_GPIO_Init+0x1ee>
 8001f34:	2300      	movs	r3, #0
 8001f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f38:	f002 0203 	and.w	r2, r2, #3
 8001f3c:	0092      	lsls	r2, r2, #2
 8001f3e:	4093      	lsls	r3, r2
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f46:	492f      	ldr	r1, [pc, #188]	; (8002004 <HAL_GPIO_Init+0x2bc>)
 8001f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4a:	089b      	lsrs	r3, r3, #2
 8001f4c:	3302      	adds	r3, #2
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d006      	beq.n	8001f6e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f60:	4b2d      	ldr	r3, [pc, #180]	; (8002018 <HAL_GPIO_Init+0x2d0>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	492c      	ldr	r1, [pc, #176]	; (8002018 <HAL_GPIO_Init+0x2d0>)
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	600b      	str	r3, [r1, #0]
 8001f6c:	e006      	b.n	8001f7c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f6e:	4b2a      	ldr	r3, [pc, #168]	; (8002018 <HAL_GPIO_Init+0x2d0>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	43db      	mvns	r3, r3
 8001f76:	4928      	ldr	r1, [pc, #160]	; (8002018 <HAL_GPIO_Init+0x2d0>)
 8001f78:	4013      	ands	r3, r2
 8001f7a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d006      	beq.n	8001f96 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f88:	4b23      	ldr	r3, [pc, #140]	; (8002018 <HAL_GPIO_Init+0x2d0>)
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	4922      	ldr	r1, [pc, #136]	; (8002018 <HAL_GPIO_Init+0x2d0>)
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	604b      	str	r3, [r1, #4]
 8001f94:	e006      	b.n	8001fa4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f96:	4b20      	ldr	r3, [pc, #128]	; (8002018 <HAL_GPIO_Init+0x2d0>)
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	491e      	ldr	r1, [pc, #120]	; (8002018 <HAL_GPIO_Init+0x2d0>)
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d006      	beq.n	8001fbe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fb0:	4b19      	ldr	r3, [pc, #100]	; (8002018 <HAL_GPIO_Init+0x2d0>)
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	4918      	ldr	r1, [pc, #96]	; (8002018 <HAL_GPIO_Init+0x2d0>)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	608b      	str	r3, [r1, #8]
 8001fbc:	e006      	b.n	8001fcc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fbe:	4b16      	ldr	r3, [pc, #88]	; (8002018 <HAL_GPIO_Init+0x2d0>)
 8001fc0:	689a      	ldr	r2, [r3, #8]
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	4914      	ldr	r1, [pc, #80]	; (8002018 <HAL_GPIO_Init+0x2d0>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d021      	beq.n	800201c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fd8:	4b0f      	ldr	r3, [pc, #60]	; (8002018 <HAL_GPIO_Init+0x2d0>)
 8001fda:	68da      	ldr	r2, [r3, #12]
 8001fdc:	490e      	ldr	r1, [pc, #56]	; (8002018 <HAL_GPIO_Init+0x2d0>)
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	60cb      	str	r3, [r1, #12]
 8001fe4:	e021      	b.n	800202a <HAL_GPIO_Init+0x2e2>
 8001fe6:	bf00      	nop
 8001fe8:	10320000 	.word	0x10320000
 8001fec:	10310000 	.word	0x10310000
 8001ff0:	10220000 	.word	0x10220000
 8001ff4:	10210000 	.word	0x10210000
 8001ff8:	10120000 	.word	0x10120000
 8001ffc:	10110000 	.word	0x10110000
 8002000:	40021000 	.word	0x40021000
 8002004:	40010000 	.word	0x40010000
 8002008:	40010800 	.word	0x40010800
 800200c:	40010c00 	.word	0x40010c00
 8002010:	40011000 	.word	0x40011000
 8002014:	40011400 	.word	0x40011400
 8002018:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800201c:	4b0b      	ldr	r3, [pc, #44]	; (800204c <HAL_GPIO_Init+0x304>)
 800201e:	68da      	ldr	r2, [r3, #12]
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	43db      	mvns	r3, r3
 8002024:	4909      	ldr	r1, [pc, #36]	; (800204c <HAL_GPIO_Init+0x304>)
 8002026:	4013      	ands	r3, r2
 8002028:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	3301      	adds	r3, #1
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	fa22 f303 	lsr.w	r3, r2, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	f47f ae8e 	bne.w	8001d5c <HAL_GPIO_Init+0x14>
  }
}
 8002040:	bf00      	nop
 8002042:	bf00      	nop
 8002044:	372c      	adds	r7, #44	; 0x2c
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr
 800204c:	40010400 	.word	0x40010400

08002050 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002050:	b480      	push	{r7}
 8002052:	b089      	sub	sp, #36	; 0x24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800205a:	2300      	movs	r3, #0
 800205c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800205e:	e09a      	b.n	8002196 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002060:	2201      	movs	r2, #1
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	4013      	ands	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 808d 	beq.w	8002190 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8002076:	4a4e      	ldr	r2, [pc, #312]	; (80021b0 <HAL_GPIO_DeInit+0x160>)
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	089b      	lsrs	r3, r3, #2
 800207c:	3302      	adds	r3, #2
 800207e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002082:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f003 0303 	and.w	r3, r3, #3
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	220f      	movs	r2, #15
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	4013      	ands	r3, r2
 8002096:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a46      	ldr	r2, [pc, #280]	; (80021b4 <HAL_GPIO_DeInit+0x164>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d013      	beq.n	80020c8 <HAL_GPIO_DeInit+0x78>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a45      	ldr	r2, [pc, #276]	; (80021b8 <HAL_GPIO_DeInit+0x168>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d00d      	beq.n	80020c4 <HAL_GPIO_DeInit+0x74>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a44      	ldr	r2, [pc, #272]	; (80021bc <HAL_GPIO_DeInit+0x16c>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d007      	beq.n	80020c0 <HAL_GPIO_DeInit+0x70>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a43      	ldr	r2, [pc, #268]	; (80021c0 <HAL_GPIO_DeInit+0x170>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d101      	bne.n	80020bc <HAL_GPIO_DeInit+0x6c>
 80020b8:	2303      	movs	r3, #3
 80020ba:	e006      	b.n	80020ca <HAL_GPIO_DeInit+0x7a>
 80020bc:	2304      	movs	r3, #4
 80020be:	e004      	b.n	80020ca <HAL_GPIO_DeInit+0x7a>
 80020c0:	2302      	movs	r3, #2
 80020c2:	e002      	b.n	80020ca <HAL_GPIO_DeInit+0x7a>
 80020c4:	2301      	movs	r3, #1
 80020c6:	e000      	b.n	80020ca <HAL_GPIO_DeInit+0x7a>
 80020c8:	2300      	movs	r3, #0
 80020ca:	69fa      	ldr	r2, [r7, #28]
 80020cc:	f002 0203 	and.w	r2, r2, #3
 80020d0:	0092      	lsls	r2, r2, #2
 80020d2:	4093      	lsls	r3, r2
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d132      	bne.n	8002140 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	f003 0303 	and.w	r3, r3, #3
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	220f      	movs	r2, #15
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80020ea:	4a31      	ldr	r2, [pc, #196]	; (80021b0 <HAL_GPIO_DeInit+0x160>)
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	089b      	lsrs	r3, r3, #2
 80020f0:	3302      	adds	r3, #2
 80020f2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	43da      	mvns	r2, r3
 80020fa:	482d      	ldr	r0, [pc, #180]	; (80021b0 <HAL_GPIO_DeInit+0x160>)
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	089b      	lsrs	r3, r3, #2
 8002100:	400a      	ands	r2, r1
 8002102:	3302      	adds	r3, #2
 8002104:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8002108:	4b2e      	ldr	r3, [pc, #184]	; (80021c4 <HAL_GPIO_DeInit+0x174>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	43db      	mvns	r3, r3
 8002110:	492c      	ldr	r1, [pc, #176]	; (80021c4 <HAL_GPIO_DeInit+0x174>)
 8002112:	4013      	ands	r3, r2
 8002114:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8002116:	4b2b      	ldr	r3, [pc, #172]	; (80021c4 <HAL_GPIO_DeInit+0x174>)
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	43db      	mvns	r3, r3
 800211e:	4929      	ldr	r1, [pc, #164]	; (80021c4 <HAL_GPIO_DeInit+0x174>)
 8002120:	4013      	ands	r3, r2
 8002122:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8002124:	4b27      	ldr	r3, [pc, #156]	; (80021c4 <HAL_GPIO_DeInit+0x174>)
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	43db      	mvns	r3, r3
 800212c:	4925      	ldr	r1, [pc, #148]	; (80021c4 <HAL_GPIO_DeInit+0x174>)
 800212e:	4013      	ands	r3, r2
 8002130:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8002132:	4b24      	ldr	r3, [pc, #144]	; (80021c4 <HAL_GPIO_DeInit+0x174>)
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	43db      	mvns	r3, r3
 800213a:	4922      	ldr	r1, [pc, #136]	; (80021c4 <HAL_GPIO_DeInit+0x174>)
 800213c:	4013      	ands	r3, r2
 800213e:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	2bff      	cmp	r3, #255	; 0xff
 8002144:	d801      	bhi.n	800214a <HAL_GPIO_DeInit+0xfa>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	e001      	b.n	800214e <HAL_GPIO_DeInit+0xfe>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	3304      	adds	r3, #4
 800214e:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	2bff      	cmp	r3, #255	; 0xff
 8002154:	d802      	bhi.n	800215c <HAL_GPIO_DeInit+0x10c>
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	e002      	b.n	8002162 <HAL_GPIO_DeInit+0x112>
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	3b08      	subs	r3, #8
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	210f      	movs	r1, #15
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	fa01 f303 	lsl.w	r3, r1, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	401a      	ands	r2, r3
 8002174:	2104      	movs	r1, #4
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	fa01 f303 	lsl.w	r3, r1, r3
 800217c:	431a      	orrs	r2, r3
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68da      	ldr	r2, [r3, #12]
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	43db      	mvns	r3, r3
 800218a:	401a      	ands	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	3301      	adds	r3, #1
 8002194:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	fa22 f303 	lsr.w	r3, r2, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f47f af5e 	bne.w	8002060 <HAL_GPIO_DeInit+0x10>
  }
}
 80021a4:	bf00      	nop
 80021a6:	bf00      	nop
 80021a8:	3724      	adds	r7, #36	; 0x24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr
 80021b0:	40010000 	.word	0x40010000
 80021b4:	40010800 	.word	0x40010800
 80021b8:	40010c00 	.word	0x40010c00
 80021bc:	40011000 	.word	0x40011000
 80021c0:	40011400 	.word	0x40011400
 80021c4:	40010400 	.word	0x40010400

080021c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	807b      	strh	r3, [r7, #2]
 80021d4:	4613      	mov	r3, r2
 80021d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021d8:	787b      	ldrb	r3, [r7, #1]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021de:	887a      	ldrh	r2, [r7, #2]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021e4:	e003      	b.n	80021ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021e6:	887b      	ldrh	r3, [r7, #2]
 80021e8:	041a      	lsls	r2, r3, #16
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	611a      	str	r2, [r3, #16]
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr

080021f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e26c      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 8087 	beq.w	8002326 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002218:	4b92      	ldr	r3, [pc, #584]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 030c 	and.w	r3, r3, #12
 8002220:	2b04      	cmp	r3, #4
 8002222:	d00c      	beq.n	800223e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002224:	4b8f      	ldr	r3, [pc, #572]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 030c 	and.w	r3, r3, #12
 800222c:	2b08      	cmp	r3, #8
 800222e:	d112      	bne.n	8002256 <HAL_RCC_OscConfig+0x5e>
 8002230:	4b8c      	ldr	r3, [pc, #560]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800223c:	d10b      	bne.n	8002256 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800223e:	4b89      	ldr	r3, [pc, #548]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d06c      	beq.n	8002324 <HAL_RCC_OscConfig+0x12c>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d168      	bne.n	8002324 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e246      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800225e:	d106      	bne.n	800226e <HAL_RCC_OscConfig+0x76>
 8002260:	4b80      	ldr	r3, [pc, #512]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a7f      	ldr	r2, [pc, #508]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800226a:	6013      	str	r3, [r2, #0]
 800226c:	e02e      	b.n	80022cc <HAL_RCC_OscConfig+0xd4>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10c      	bne.n	8002290 <HAL_RCC_OscConfig+0x98>
 8002276:	4b7b      	ldr	r3, [pc, #492]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a7a      	ldr	r2, [pc, #488]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 800227c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002280:	6013      	str	r3, [r2, #0]
 8002282:	4b78      	ldr	r3, [pc, #480]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a77      	ldr	r2, [pc, #476]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002288:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	e01d      	b.n	80022cc <HAL_RCC_OscConfig+0xd4>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002298:	d10c      	bne.n	80022b4 <HAL_RCC_OscConfig+0xbc>
 800229a:	4b72      	ldr	r3, [pc, #456]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a71      	ldr	r2, [pc, #452]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	4b6f      	ldr	r3, [pc, #444]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a6e      	ldr	r2, [pc, #440]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	e00b      	b.n	80022cc <HAL_RCC_OscConfig+0xd4>
 80022b4:	4b6b      	ldr	r3, [pc, #428]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a6a      	ldr	r2, [pc, #424]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	4b68      	ldr	r3, [pc, #416]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a67      	ldr	r2, [pc, #412]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d013      	beq.n	80022fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d4:	f7ff f8d0 	bl	8001478 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022dc:	f7ff f8cc 	bl	8001478 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b64      	cmp	r3, #100	; 0x64
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e1fa      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ee:	4b5d      	ldr	r3, [pc, #372]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f0      	beq.n	80022dc <HAL_RCC_OscConfig+0xe4>
 80022fa:	e014      	b.n	8002326 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fc:	f7ff f8bc 	bl	8001478 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002304:	f7ff f8b8 	bl	8001478 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b64      	cmp	r3, #100	; 0x64
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e1e6      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002316:	4b53      	ldr	r3, [pc, #332]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0x10c>
 8002322:	e000      	b.n	8002326 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d063      	beq.n	80023fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002332:	4b4c      	ldr	r3, [pc, #304]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 030c 	and.w	r3, r3, #12
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00b      	beq.n	8002356 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800233e:	4b49      	ldr	r3, [pc, #292]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 030c 	and.w	r3, r3, #12
 8002346:	2b08      	cmp	r3, #8
 8002348:	d11c      	bne.n	8002384 <HAL_RCC_OscConfig+0x18c>
 800234a:	4b46      	ldr	r3, [pc, #280]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d116      	bne.n	8002384 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002356:	4b43      	ldr	r3, [pc, #268]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d005      	beq.n	800236e <HAL_RCC_OscConfig+0x176>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d001      	beq.n	800236e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e1ba      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236e:	4b3d      	ldr	r3, [pc, #244]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4939      	ldr	r1, [pc, #228]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 800237e:	4313      	orrs	r3, r2
 8002380:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002382:	e03a      	b.n	80023fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d020      	beq.n	80023ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800238c:	4b36      	ldr	r3, [pc, #216]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 800238e:	2201      	movs	r2, #1
 8002390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002392:	f7ff f871 	bl	8001478 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239a:	f7ff f86d 	bl	8001478 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e19b      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ac:	4b2d      	ldr	r3, [pc, #180]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f0      	beq.n	800239a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b8:	4b2a      	ldr	r3, [pc, #168]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	4927      	ldr	r1, [pc, #156]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	600b      	str	r3, [r1, #0]
 80023cc:	e015      	b.n	80023fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ce:	4b26      	ldr	r3, [pc, #152]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d4:	f7ff f850 	bl	8001478 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023dc:	f7ff f84c 	bl	8001478 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e17a      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ee:	4b1d      	ldr	r3, [pc, #116]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f0      	bne.n	80023dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	2b00      	cmp	r3, #0
 8002404:	d03a      	beq.n	800247c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d019      	beq.n	8002442 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800240e:	4b17      	ldr	r3, [pc, #92]	; (800246c <HAL_RCC_OscConfig+0x274>)
 8002410:	2201      	movs	r2, #1
 8002412:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002414:	f7ff f830 	bl	8001478 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800241c:	f7ff f82c 	bl	8001478 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e15a      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800242e:	4b0d      	ldr	r3, [pc, #52]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f0      	beq.n	800241c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800243a:	2001      	movs	r0, #1
 800243c:	f000 fad8 	bl	80029f0 <RCC_Delay>
 8002440:	e01c      	b.n	800247c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002442:	4b0a      	ldr	r3, [pc, #40]	; (800246c <HAL_RCC_OscConfig+0x274>)
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002448:	f7ff f816 	bl	8001478 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800244e:	e00f      	b.n	8002470 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002450:	f7ff f812 	bl	8001478 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d908      	bls.n	8002470 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e140      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
 8002462:	bf00      	nop
 8002464:	40021000 	.word	0x40021000
 8002468:	42420000 	.word	0x42420000
 800246c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002470:	4b9e      	ldr	r3, [pc, #632]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1e9      	bne.n	8002450 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 80a6 	beq.w	80025d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800248a:	2300      	movs	r3, #0
 800248c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800248e:	4b97      	ldr	r3, [pc, #604]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10d      	bne.n	80024b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800249a:	4b94      	ldr	r3, [pc, #592]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	4a93      	ldr	r2, [pc, #588]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 80024a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a4:	61d3      	str	r3, [r2, #28]
 80024a6:	4b91      	ldr	r3, [pc, #580]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ae:	60bb      	str	r3, [r7, #8]
 80024b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024b2:	2301      	movs	r3, #1
 80024b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b6:	4b8e      	ldr	r3, [pc, #568]	; (80026f0 <HAL_RCC_OscConfig+0x4f8>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d118      	bne.n	80024f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024c2:	4b8b      	ldr	r3, [pc, #556]	; (80026f0 <HAL_RCC_OscConfig+0x4f8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a8a      	ldr	r2, [pc, #552]	; (80026f0 <HAL_RCC_OscConfig+0x4f8>)
 80024c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ce:	f7fe ffd3 	bl	8001478 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d6:	f7fe ffcf 	bl	8001478 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b64      	cmp	r3, #100	; 0x64
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e0fd      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e8:	4b81      	ldr	r3, [pc, #516]	; (80026f0 <HAL_RCC_OscConfig+0x4f8>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0f0      	beq.n	80024d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d106      	bne.n	800250a <HAL_RCC_OscConfig+0x312>
 80024fc:	4b7b      	ldr	r3, [pc, #492]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	4a7a      	ldr	r2, [pc, #488]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	6213      	str	r3, [r2, #32]
 8002508:	e02d      	b.n	8002566 <HAL_RCC_OscConfig+0x36e>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10c      	bne.n	800252c <HAL_RCC_OscConfig+0x334>
 8002512:	4b76      	ldr	r3, [pc, #472]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	4a75      	ldr	r2, [pc, #468]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002518:	f023 0301 	bic.w	r3, r3, #1
 800251c:	6213      	str	r3, [r2, #32]
 800251e:	4b73      	ldr	r3, [pc, #460]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	4a72      	ldr	r2, [pc, #456]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002524:	f023 0304 	bic.w	r3, r3, #4
 8002528:	6213      	str	r3, [r2, #32]
 800252a:	e01c      	b.n	8002566 <HAL_RCC_OscConfig+0x36e>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	2b05      	cmp	r3, #5
 8002532:	d10c      	bne.n	800254e <HAL_RCC_OscConfig+0x356>
 8002534:	4b6d      	ldr	r3, [pc, #436]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	4a6c      	ldr	r2, [pc, #432]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 800253a:	f043 0304 	orr.w	r3, r3, #4
 800253e:	6213      	str	r3, [r2, #32]
 8002540:	4b6a      	ldr	r3, [pc, #424]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	4a69      	ldr	r2, [pc, #420]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002546:	f043 0301 	orr.w	r3, r3, #1
 800254a:	6213      	str	r3, [r2, #32]
 800254c:	e00b      	b.n	8002566 <HAL_RCC_OscConfig+0x36e>
 800254e:	4b67      	ldr	r3, [pc, #412]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	4a66      	ldr	r2, [pc, #408]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002554:	f023 0301 	bic.w	r3, r3, #1
 8002558:	6213      	str	r3, [r2, #32]
 800255a:	4b64      	ldr	r3, [pc, #400]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	4a63      	ldr	r2, [pc, #396]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002560:	f023 0304 	bic.w	r3, r3, #4
 8002564:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d015      	beq.n	800259a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800256e:	f7fe ff83 	bl	8001478 <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002574:	e00a      	b.n	800258c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002576:	f7fe ff7f 	bl	8001478 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	f241 3288 	movw	r2, #5000	; 0x1388
 8002584:	4293      	cmp	r3, r2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e0ab      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800258c:	4b57      	ldr	r3, [pc, #348]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0ee      	beq.n	8002576 <HAL_RCC_OscConfig+0x37e>
 8002598:	e014      	b.n	80025c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259a:	f7fe ff6d 	bl	8001478 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a0:	e00a      	b.n	80025b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a2:	f7fe ff69 	bl	8001478 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e095      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b8:	4b4c      	ldr	r3, [pc, #304]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1ee      	bne.n	80025a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025c4:	7dfb      	ldrb	r3, [r7, #23]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d105      	bne.n	80025d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ca:	4b48      	ldr	r3, [pc, #288]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	4a47      	ldr	r2, [pc, #284]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 80025d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 8081 	beq.w	80026e2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025e0:	4b42      	ldr	r3, [pc, #264]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 030c 	and.w	r3, r3, #12
 80025e8:	2b08      	cmp	r3, #8
 80025ea:	d061      	beq.n	80026b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d146      	bne.n	8002682 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f4:	4b3f      	ldr	r3, [pc, #252]	; (80026f4 <HAL_RCC_OscConfig+0x4fc>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fa:	f7fe ff3d 	bl	8001478 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002602:	f7fe ff39 	bl	8001478 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e067      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002614:	4b35      	ldr	r3, [pc, #212]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1f0      	bne.n	8002602 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002628:	d108      	bne.n	800263c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800262a:	4b30      	ldr	r3, [pc, #192]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	492d      	ldr	r1, [pc, #180]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002638:	4313      	orrs	r3, r2
 800263a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800263c:	4b2b      	ldr	r3, [pc, #172]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a19      	ldr	r1, [r3, #32]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	430b      	orrs	r3, r1
 800264e:	4927      	ldr	r1, [pc, #156]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002650:	4313      	orrs	r3, r2
 8002652:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002654:	4b27      	ldr	r3, [pc, #156]	; (80026f4 <HAL_RCC_OscConfig+0x4fc>)
 8002656:	2201      	movs	r2, #1
 8002658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265a:	f7fe ff0d 	bl	8001478 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002662:	f7fe ff09 	bl	8001478 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e037      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002674:	4b1d      	ldr	r3, [pc, #116]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0f0      	beq.n	8002662 <HAL_RCC_OscConfig+0x46a>
 8002680:	e02f      	b.n	80026e2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002682:	4b1c      	ldr	r3, [pc, #112]	; (80026f4 <HAL_RCC_OscConfig+0x4fc>)
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002688:	f7fe fef6 	bl	8001478 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002690:	f7fe fef2 	bl	8001478 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e020      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a2:	4b12      	ldr	r3, [pc, #72]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f0      	bne.n	8002690 <HAL_RCC_OscConfig+0x498>
 80026ae:	e018      	b.n	80026e2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d101      	bne.n	80026bc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e013      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026bc:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d106      	bne.n	80026de <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026da:	429a      	cmp	r2, r3
 80026dc:	d001      	beq.n	80026e2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e000      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40021000 	.word	0x40021000
 80026f0:	40007000 	.word	0x40007000
 80026f4:	42420060 	.word	0x42420060

080026f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e0d0      	b.n	80028ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800270c:	4b6a      	ldr	r3, [pc, #424]	; (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	429a      	cmp	r2, r3
 8002718:	d910      	bls.n	800273c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271a:	4b67      	ldr	r3, [pc, #412]	; (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f023 0207 	bic.w	r2, r3, #7
 8002722:	4965      	ldr	r1, [pc, #404]	; (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	4313      	orrs	r3, r2
 8002728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800272a:	4b63      	ldr	r3, [pc, #396]	; (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	429a      	cmp	r2, r3
 8002736:	d001      	beq.n	800273c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e0b8      	b.n	80028ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d020      	beq.n	800278a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	2b00      	cmp	r3, #0
 8002752:	d005      	beq.n	8002760 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002754:	4b59      	ldr	r3, [pc, #356]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	4a58      	ldr	r2, [pc, #352]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 800275a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800275e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0308 	and.w	r3, r3, #8
 8002768:	2b00      	cmp	r3, #0
 800276a:	d005      	beq.n	8002778 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800276c:	4b53      	ldr	r3, [pc, #332]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	4a52      	ldr	r2, [pc, #328]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002772:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002776:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002778:	4b50      	ldr	r3, [pc, #320]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	494d      	ldr	r1, [pc, #308]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002786:	4313      	orrs	r3, r2
 8002788:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d040      	beq.n	8002818 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d107      	bne.n	80027ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800279e:	4b47      	ldr	r3, [pc, #284]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d115      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e07f      	b.n	80028ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d107      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027b6:	4b41      	ldr	r3, [pc, #260]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d109      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e073      	b.n	80028ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c6:	4b3d      	ldr	r3, [pc, #244]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e06b      	b.n	80028ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027d6:	4b39      	ldr	r3, [pc, #228]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f023 0203 	bic.w	r2, r3, #3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	4936      	ldr	r1, [pc, #216]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027e8:	f7fe fe46 	bl	8001478 <HAL_GetTick>
 80027ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ee:	e00a      	b.n	8002806 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f0:	f7fe fe42 	bl	8001478 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fe:	4293      	cmp	r3, r2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e053      	b.n	80028ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002806:	4b2d      	ldr	r3, [pc, #180]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f003 020c 	and.w	r2, r3, #12
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	429a      	cmp	r2, r3
 8002816:	d1eb      	bne.n	80027f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002818:	4b27      	ldr	r3, [pc, #156]	; (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	429a      	cmp	r2, r3
 8002824:	d210      	bcs.n	8002848 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002826:	4b24      	ldr	r3, [pc, #144]	; (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f023 0207 	bic.w	r2, r3, #7
 800282e:	4922      	ldr	r1, [pc, #136]	; (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	4313      	orrs	r3, r2
 8002834:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002836:	4b20      	ldr	r3, [pc, #128]	; (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	429a      	cmp	r2, r3
 8002842:	d001      	beq.n	8002848 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e032      	b.n	80028ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	d008      	beq.n	8002866 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002854:	4b19      	ldr	r3, [pc, #100]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	4916      	ldr	r1, [pc, #88]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002862:	4313      	orrs	r3, r2
 8002864:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	2b00      	cmp	r3, #0
 8002870:	d009      	beq.n	8002886 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002872:	4b12      	ldr	r3, [pc, #72]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	490e      	ldr	r1, [pc, #56]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002882:	4313      	orrs	r3, r2
 8002884:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002886:	f000 f821 	bl	80028cc <HAL_RCC_GetSysClockFreq>
 800288a:	4602      	mov	r2, r0
 800288c:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	091b      	lsrs	r3, r3, #4
 8002892:	f003 030f 	and.w	r3, r3, #15
 8002896:	490a      	ldr	r1, [pc, #40]	; (80028c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002898:	5ccb      	ldrb	r3, [r1, r3]
 800289a:	fa22 f303 	lsr.w	r3, r2, r3
 800289e:	4a09      	ldr	r2, [pc, #36]	; (80028c4 <HAL_RCC_ClockConfig+0x1cc>)
 80028a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028a2:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <HAL_RCC_ClockConfig+0x1d0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fe fda4 	bl	80013f4 <HAL_InitTick>

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40022000 	.word	0x40022000
 80028bc:	40021000 	.word	0x40021000
 80028c0:	0800407c 	.word	0x0800407c
 80028c4:	20000000 	.word	0x20000000
 80028c8:	20000018 	.word	0x20000018

080028cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028cc:	b490      	push	{r4, r7}
 80028ce:	b08a      	sub	sp, #40	; 0x28
 80028d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028d2:	4b2a      	ldr	r3, [pc, #168]	; (800297c <HAL_RCC_GetSysClockFreq+0xb0>)
 80028d4:	1d3c      	adds	r4, r7, #4
 80028d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028dc:	f240 2301 	movw	r3, #513	; 0x201
 80028e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	61fb      	str	r3, [r7, #28]
 80028e6:	2300      	movs	r3, #0
 80028e8:	61bb      	str	r3, [r7, #24]
 80028ea:	2300      	movs	r3, #0
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
 80028ee:	2300      	movs	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028f6:	4b22      	ldr	r3, [pc, #136]	; (8002980 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f003 030c 	and.w	r3, r3, #12
 8002902:	2b04      	cmp	r3, #4
 8002904:	d002      	beq.n	800290c <HAL_RCC_GetSysClockFreq+0x40>
 8002906:	2b08      	cmp	r3, #8
 8002908:	d003      	beq.n	8002912 <HAL_RCC_GetSysClockFreq+0x46>
 800290a:	e02d      	b.n	8002968 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800290c:	4b1d      	ldr	r3, [pc, #116]	; (8002984 <HAL_RCC_GetSysClockFreq+0xb8>)
 800290e:	623b      	str	r3, [r7, #32]
      break;
 8002910:	e02d      	b.n	800296e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	0c9b      	lsrs	r3, r3, #18
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800291e:	4413      	add	r3, r2
 8002920:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002924:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d013      	beq.n	8002958 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002930:	4b13      	ldr	r3, [pc, #76]	; (8002980 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	0c5b      	lsrs	r3, r3, #17
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800293e:	4413      	add	r3, r2
 8002940:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002944:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	4a0e      	ldr	r2, [pc, #56]	; (8002984 <HAL_RCC_GetSysClockFreq+0xb8>)
 800294a:	fb02 f203 	mul.w	r2, r2, r3
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	fbb2 f3f3 	udiv	r3, r2, r3
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
 8002956:	e004      	b.n	8002962 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	4a0b      	ldr	r2, [pc, #44]	; (8002988 <HAL_RCC_GetSysClockFreq+0xbc>)
 800295c:	fb02 f303 	mul.w	r3, r2, r3
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	623b      	str	r3, [r7, #32]
      break;
 8002966:	e002      	b.n	800296e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002968:	4b06      	ldr	r3, [pc, #24]	; (8002984 <HAL_RCC_GetSysClockFreq+0xb8>)
 800296a:	623b      	str	r3, [r7, #32]
      break;
 800296c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800296e:	6a3b      	ldr	r3, [r7, #32]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3728      	adds	r7, #40	; 0x28
 8002974:	46bd      	mov	sp, r7
 8002976:	bc90      	pop	{r4, r7}
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	0800406c 	.word	0x0800406c
 8002980:	40021000 	.word	0x40021000
 8002984:	007a1200 	.word	0x007a1200
 8002988:	003d0900 	.word	0x003d0900

0800298c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002990:	4b02      	ldr	r3, [pc, #8]	; (800299c <HAL_RCC_GetHCLKFreq+0x10>)
 8002992:	681b      	ldr	r3, [r3, #0]
}
 8002994:	4618      	mov	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr
 800299c:	20000000 	.word	0x20000000

080029a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029a4:	f7ff fff2 	bl	800298c <HAL_RCC_GetHCLKFreq>
 80029a8:	4602      	mov	r2, r0
 80029aa:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	0a1b      	lsrs	r3, r3, #8
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	4903      	ldr	r1, [pc, #12]	; (80029c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029b6:	5ccb      	ldrb	r3, [r1, r3]
 80029b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029bc:	4618      	mov	r0, r3
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40021000 	.word	0x40021000
 80029c4:	0800408c 	.word	0x0800408c

080029c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029cc:	f7ff ffde 	bl	800298c <HAL_RCC_GetHCLKFreq>
 80029d0:	4602      	mov	r2, r0
 80029d2:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	0adb      	lsrs	r3, r3, #11
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	4903      	ldr	r1, [pc, #12]	; (80029ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80029de:	5ccb      	ldrb	r3, [r1, r3]
 80029e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40021000 	.word	0x40021000
 80029ec:	0800408c 	.word	0x0800408c

080029f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029f8:	4b0a      	ldr	r3, [pc, #40]	; (8002a24 <RCC_Delay+0x34>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a0a      	ldr	r2, [pc, #40]	; (8002a28 <RCC_Delay+0x38>)
 80029fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002a02:	0a5b      	lsrs	r3, r3, #9
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	fb02 f303 	mul.w	r3, r2, r3
 8002a0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a0c:	bf00      	nop
  }
  while (Delay --);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	1e5a      	subs	r2, r3, #1
 8002a12:	60fa      	str	r2, [r7, #12]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1f9      	bne.n	8002a0c <RCC_Delay+0x1c>
}
 8002a18:	bf00      	nop
 8002a1a:	bf00      	nop
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr
 8002a24:	20000000 	.word	0x20000000
 8002a28:	10624dd3 	.word	0x10624dd3

08002a2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e03f      	b.n	8002abe <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d106      	bne.n	8002a58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7fe fb2e 	bl	80010b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2224      	movs	r2, #36	; 0x24
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 fd6b 	bl	800354c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	691a      	ldr	r2, [r3, #16]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	695a      	ldr	r2, [r3, #20]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68da      	ldr	r2, [r3, #12]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002aa4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b082      	sub	sp, #8
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e021      	b.n	8002b1c <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2224      	movs	r2, #36	; 0x24
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002aee:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f7fe fc11 	bl	8001318 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b20      	cmp	r3, #32
 8002b3c:	d153      	bne.n	8002be6 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d002      	beq.n	8002b4a <HAL_UART_Transmit_DMA+0x26>
 8002b44:	88fb      	ldrh	r3, [r7, #6]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e04c      	b.n	8002be8 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d101      	bne.n	8002b5c <HAL_UART_Transmit_DMA+0x38>
 8002b58:	2302      	movs	r3, #2
 8002b5a:	e045      	b.n	8002be8 <HAL_UART_Transmit_DMA+0xc4>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002b64:	68ba      	ldr	r2, [r7, #8]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	88fa      	ldrh	r2, [r7, #6]
 8002b6e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	88fa      	ldrh	r2, [r7, #6]
 8002b74:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2221      	movs	r2, #33	; 0x21
 8002b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b88:	4a19      	ldr	r2, [pc, #100]	; (8002bf0 <HAL_UART_Transmit_DMA+0xcc>)
 8002b8a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b90:	4a18      	ldr	r2, [pc, #96]	; (8002bf4 <HAL_UART_Transmit_DMA+0xd0>)
 8002b92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b98:	4a17      	ldr	r2, [pc, #92]	; (8002bf8 <HAL_UART_Transmit_DMA+0xd4>)
 8002b9a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8002ba4:	f107 0308 	add.w	r3, r7, #8
 8002ba8:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	6819      	ldr	r1, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	3304      	adds	r3, #4
 8002bb8:	461a      	mov	r2, r3
 8002bba:	88fb      	ldrh	r3, [r7, #6]
 8002bbc:	f7fe fe80 	bl	80018c0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bc8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695a      	ldr	r2, [r3, #20]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002be0:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002be2:	2300      	movs	r3, #0
 8002be4:	e000      	b.n	8002be8 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8002be6:	2302      	movs	r3, #2
  }
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	08002feb 	.word	0x08002feb
 8002bf4:	0800303d 	.word	0x0800303d
 8002bf8:	08003125 	.word	0x08003125

08002bfc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	4613      	mov	r3, r2
 8002c08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b20      	cmp	r3, #32
 8002c14:	d11d      	bne.n	8002c52 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d002      	beq.n	8002c22 <HAL_UART_Receive_DMA+0x26>
 8002c1c:	88fb      	ldrh	r3, [r7, #6]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e016      	b.n	8002c54 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d101      	bne.n	8002c34 <HAL_UART_Receive_DMA+0x38>
 8002c30:	2302      	movs	r3, #2
 8002c32:	e00f      	b.n	8002c54 <HAL_UART_Receive_DMA+0x58>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8002c42:	88fb      	ldrh	r3, [r7, #6]
 8002c44:	461a      	mov	r2, r3
 8002c46:	68b9      	ldr	r1, [r7, #8]
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f000 fab5 	bl	80031b8 <UART_Start_Receive_DMA>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	e000      	b.n	8002c54 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002c52:	2302      	movs	r3, #2
  }
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b08a      	sub	sp, #40	; 0x28
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10d      	bne.n	8002cae <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	f003 0320 	and.w	r3, r3, #32
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d008      	beq.n	8002cae <HAL_UART_IRQHandler+0x52>
 8002c9c:	6a3b      	ldr	r3, [r7, #32]
 8002c9e:	f003 0320 	and.w	r3, r3, #32
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 fba6 	bl	80033f8 <UART_Receive_IT>
      return;
 8002cac:	e17b      	b.n	8002fa6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 80b1 	beq.w	8002e18 <HAL_UART_IRQHandler+0x1bc>
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d105      	bne.n	8002ccc <HAL_UART_IRQHandler+0x70>
 8002cc0:	6a3b      	ldr	r3, [r7, #32]
 8002cc2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 80a6 	beq.w	8002e18 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00a      	beq.n	8002cec <HAL_UART_IRQHandler+0x90>
 8002cd6:	6a3b      	ldr	r3, [r7, #32]
 8002cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d005      	beq.n	8002cec <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	f043 0201 	orr.w	r2, r3, #1
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	f003 0304 	and.w	r3, r3, #4
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00a      	beq.n	8002d0c <HAL_UART_IRQHandler+0xb0>
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d005      	beq.n	8002d0c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d04:	f043 0202 	orr.w	r2, r3, #2
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00a      	beq.n	8002d2c <HAL_UART_IRQHandler+0xd0>
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d005      	beq.n	8002d2c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	f043 0204 	orr.w	r2, r3, #4
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	f003 0308 	and.w	r3, r3, #8
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00f      	beq.n	8002d56 <HAL_UART_IRQHandler+0xfa>
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	f003 0320 	and.w	r3, r3, #32
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d104      	bne.n	8002d4a <HAL_UART_IRQHandler+0xee>
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d005      	beq.n	8002d56 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	f043 0208 	orr.w	r2, r3, #8
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 811e 	beq.w	8002f9c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d62:	f003 0320 	and.w	r3, r3, #32
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d007      	beq.n	8002d7a <HAL_UART_IRQHandler+0x11e>
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	f003 0320 	and.w	r3, r3, #32
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d002      	beq.n	8002d7a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 fb3f 	bl	80033f8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	bf14      	ite	ne
 8002d88:	2301      	movne	r3, #1
 8002d8a:	2300      	moveq	r3, #0
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	f003 0308 	and.w	r3, r3, #8
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d102      	bne.n	8002da2 <HAL_UART_IRQHandler+0x146>
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d031      	beq.n	8002e06 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 fa81 	bl	80032aa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d023      	beq.n	8002dfe <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	695a      	ldr	r2, [r3, #20]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dc4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d013      	beq.n	8002df6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd2:	4a76      	ldr	r2, [pc, #472]	; (8002fac <HAL_UART_IRQHandler+0x350>)
 8002dd4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fe fe0a 	bl	80019f4 <HAL_DMA_Abort_IT>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d016      	beq.n	8002e14 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002df0:	4610      	mov	r0, r2
 8002df2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002df4:	e00e      	b.n	8002e14 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7fe f940 	bl	800107c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dfc:	e00a      	b.n	8002e14 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7fe f93c 	bl	800107c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e04:	e006      	b.n	8002e14 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7fe f938 	bl	800107c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002e12:	e0c3      	b.n	8002f9c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e14:	bf00      	nop
    return;
 8002e16:	e0c1      	b.n	8002f9c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	f040 80a1 	bne.w	8002f64 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	f003 0310 	and.w	r3, r3, #16
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 809b 	beq.w	8002f64 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	f003 0310 	and.w	r3, r3, #16
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 8095 	beq.w	8002f64 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	60fb      	str	r3, [r7, #12]
 8002e4e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d04e      	beq.n	8002efc <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002e68:	8a3b      	ldrh	r3, [r7, #16]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 8098 	beq.w	8002fa0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e74:	8a3a      	ldrh	r2, [r7, #16]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	f080 8092 	bcs.w	8002fa0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	8a3a      	ldrh	r2, [r7, #16]
 8002e80:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	2b20      	cmp	r3, #32
 8002e8a:	d02b      	beq.n	8002ee4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68da      	ldr	r2, [r3, #12]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e9a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	695a      	ldr	r2, [r3, #20]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0201 	bic.w	r2, r2, #1
 8002eaa:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	695a      	ldr	r2, [r3, #20]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eba:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 0210 	bic.w	r2, r2, #16
 8002ed8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7fe fd4d 	bl	800197e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 f86d 	bl	8002fd4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002efa:	e051      	b.n	8002fa0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d047      	beq.n	8002fa4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002f14:	8a7b      	ldrh	r3, [r7, #18]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d044      	beq.n	8002fa4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68da      	ldr	r2, [r3, #12]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002f28:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	695a      	ldr	r2, [r3, #20]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0201 	bic.w	r2, r2, #1
 8002f38:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0210 	bic.w	r2, r2, #16
 8002f56:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f58:	8a7b      	ldrh	r3, [r7, #18]
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 f839 	bl	8002fd4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002f62:	e01f      	b.n	8002fa4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d008      	beq.n	8002f80 <HAL_UART_IRQHandler+0x324>
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f9d6 	bl	800332a <UART_Transmit_IT>
    return;
 8002f7e:	e012      	b.n	8002fa6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00d      	beq.n	8002fa6 <HAL_UART_IRQHandler+0x34a>
 8002f8a:	6a3b      	ldr	r3, [r7, #32]
 8002f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d008      	beq.n	8002fa6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 fa17 	bl	80033c8 <UART_EndTransmit_IT>
    return;
 8002f9a:	e004      	b.n	8002fa6 <HAL_UART_IRQHandler+0x34a>
    return;
 8002f9c:	bf00      	nop
 8002f9e:	e002      	b.n	8002fa6 <HAL_UART_IRQHandler+0x34a>
      return;
 8002fa0:	bf00      	nop
 8002fa2:	e000      	b.n	8002fa6 <HAL_UART_IRQHandler+0x34a>
      return;
 8002fa4:	bf00      	nop
  }
}
 8002fa6:	3728      	adds	r7, #40	; 0x28
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	08003303 	.word	0x08003303

08002fb0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bc80      	pop	{r7}
 8002fc0:	4770      	bx	lr

08002fc2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b083      	sub	sp, #12
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002fca:	bf00      	nop
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bc80      	pop	{r7}
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bc80      	pop	{r7}
 8002fe8:	4770      	bx	lr

08002fea <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b084      	sub	sp, #16
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0320 	and.w	r3, r3, #32
 8003002:	2b00      	cmp	r3, #0
 8003004:	d113      	bne.n	800302e <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	695a      	ldr	r2, [r3, #20]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800301a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800302a:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800302c:	e002      	b.n	8003034 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f7fe f836 	bl	80010a0 <HAL_UART_TxCpltCallback>
}
 8003034:	bf00      	nop
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f7ff ffb0 	bl	8002fb0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003050:	bf00      	nop
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003064:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0320 	and.w	r3, r3, #32
 8003070:	2b00      	cmp	r3, #0
 8003072:	d12a      	bne.n	80030ca <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68da      	ldr	r2, [r3, #12]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003088:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	695a      	ldr	r2, [r3, #20]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0201 	bic.w	r2, r2, #1
 8003098:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	695a      	ldr	r2, [r3, #20]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030a8:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2220      	movs	r2, #32
 80030ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d107      	bne.n	80030ca <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68da      	ldr	r2, [r3, #12]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0210 	bic.w	r2, r2, #16
 80030c8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d106      	bne.n	80030e0 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80030d6:	4619      	mov	r1, r3
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f7ff ff7b 	bl	8002fd4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80030de:	e002      	b.n	80030e6 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f7fd ffd4 	bl	800108e <HAL_UART_RxCpltCallback>
}
 80030e6:	bf00      	nop
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b084      	sub	sp, #16
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fa:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003100:	2b01      	cmp	r3, #1
 8003102:	d108      	bne.n	8003116 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003108:	085b      	lsrs	r3, r3, #1
 800310a:	b29b      	uxth	r3, r3
 800310c:	4619      	mov	r1, r3
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f7ff ff60 	bl	8002fd4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003114:	e002      	b.n	800311c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f7ff ff53 	bl	8002fc2 <HAL_UART_RxHalfCpltCallback>
}
 800311c:	bf00      	nop
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800312c:	2300      	movs	r3, #0
 800312e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003134:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003140:	2b00      	cmp	r3, #0
 8003142:	bf14      	ite	ne
 8003144:	2301      	movne	r3, #1
 8003146:	2300      	moveq	r3, #0
 8003148:	b2db      	uxtb	r3, r3
 800314a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b21      	cmp	r3, #33	; 0x21
 8003156:	d108      	bne.n	800316a <UART_DMAError+0x46>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d005      	beq.n	800316a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	2200      	movs	r2, #0
 8003162:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003164:	68b8      	ldr	r0, [r7, #8]
 8003166:	f000 f88b 	bl	8003280 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003174:	2b00      	cmp	r3, #0
 8003176:	bf14      	ite	ne
 8003178:	2301      	movne	r3, #1
 800317a:	2300      	moveq	r3, #0
 800317c:	b2db      	uxtb	r3, r3
 800317e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b22      	cmp	r3, #34	; 0x22
 800318a:	d108      	bne.n	800319e <UART_DMAError+0x7a>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d005      	beq.n	800319e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	2200      	movs	r2, #0
 8003196:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003198:	68b8      	ldr	r0, [r7, #8]
 800319a:	f000 f886 	bl	80032aa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	f043 0210 	orr.w	r2, r3, #16
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80031aa:	68b8      	ldr	r0, [r7, #8]
 80031ac:	f7fd ff66 	bl	800107c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031b0:	bf00      	nop
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	4613      	mov	r3, r2
 80031c4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	88fa      	ldrh	r2, [r7, #6]
 80031d0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2222      	movs	r2, #34	; 0x22
 80031dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e4:	4a23      	ldr	r2, [pc, #140]	; (8003274 <UART_Start_Receive_DMA+0xbc>)
 80031e6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ec:	4a22      	ldr	r2, [pc, #136]	; (8003278 <UART_Start_Receive_DMA+0xc0>)
 80031ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f4:	4a21      	ldr	r2, [pc, #132]	; (800327c <UART_Start_Receive_DMA+0xc4>)
 80031f6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fc:	2200      	movs	r2, #0
 80031fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003200:	f107 0308 	add.w	r3, r7, #8
 8003204:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	3304      	adds	r3, #4
 8003210:	4619      	mov	r1, r3
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	88fb      	ldrh	r3, [r7, #6]
 8003218:	f7fe fb52 	bl	80018c0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800321c:	2300      	movs	r3, #0
 800321e:	613b      	str	r3, [r7, #16]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	613b      	str	r3, [r7, #16]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	613b      	str	r3, [r7, #16]
 8003230:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68da      	ldr	r2, [r3, #12]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003248:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	695a      	ldr	r2, [r3, #20]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f042 0201 	orr.w	r2, r2, #1
 8003258:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	695a      	ldr	r2, [r3, #20]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003268:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3718      	adds	r7, #24
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	08003059 	.word	0x08003059
 8003278:	080030ef 	.word	0x080030ef
 800327c:	08003125 	.word	0x08003125

08003280 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68da      	ldr	r2, [r3, #12]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003296:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2220      	movs	r2, #32
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bc80      	pop	{r7}
 80032a8:	4770      	bx	lr

080032aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032aa:	b480      	push	{r7}
 80032ac:	b083      	sub	sp, #12
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68da      	ldr	r2, [r3, #12]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80032c0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	695a      	ldr	r2, [r3, #20]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0201 	bic.w	r2, r2, #1
 80032d0:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d107      	bne.n	80032ea <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68da      	ldr	r2, [r3, #12]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 0210 	bic.w	r2, r2, #16
 80032e8:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2220      	movs	r2, #32
 80032ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bc80      	pop	{r7}
 8003300:	4770      	bx	lr

08003302 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b084      	sub	sp, #16
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f7fd fead 	bl	800107c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003322:	bf00      	nop
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800332a:	b480      	push	{r7}
 800332c:	b085      	sub	sp, #20
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b21      	cmp	r3, #33	; 0x21
 800333c:	d13e      	bne.n	80033bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003346:	d114      	bne.n	8003372 <UART_Transmit_IT+0x48>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d110      	bne.n	8003372 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	881b      	ldrh	r3, [r3, #0]
 800335a:	461a      	mov	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003364:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	1c9a      	adds	r2, r3, #2
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	621a      	str	r2, [r3, #32]
 8003370:	e008      	b.n	8003384 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	1c59      	adds	r1, r3, #1
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	6211      	str	r1, [r2, #32]
 800337c:	781a      	ldrb	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003388:	b29b      	uxth	r3, r3
 800338a:	3b01      	subs	r3, #1
 800338c:	b29b      	uxth	r3, r3
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	4619      	mov	r1, r3
 8003392:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10f      	bne.n	80033b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80033b8:	2300      	movs	r3, #0
 80033ba:	e000      	b.n	80033be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80033bc:	2302      	movs	r3, #2
  }
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bc80      	pop	{r7}
 80033c6:	4770      	bx	lr

080033c8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033de:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f7fd fe59 	bl	80010a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b22      	cmp	r3, #34	; 0x22
 800340a:	f040 8099 	bne.w	8003540 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003416:	d117      	bne.n	8003448 <UART_Receive_IT+0x50>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d113      	bne.n	8003448 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003420:	2300      	movs	r3, #0
 8003422:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003428:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	b29b      	uxth	r3, r3
 8003432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003436:	b29a      	uxth	r2, r3
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003440:	1c9a      	adds	r2, r3, #2
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	629a      	str	r2, [r3, #40]	; 0x28
 8003446:	e026      	b.n	8003496 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344c:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800344e:	2300      	movs	r3, #0
 8003450:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800345a:	d007      	beq.n	800346c <UART_Receive_IT+0x74>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10a      	bne.n	800347a <UART_Receive_IT+0x82>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d106      	bne.n	800347a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	b2da      	uxtb	r2, r3
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	701a      	strb	r2, [r3, #0]
 8003478:	e008      	b.n	800348c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	b2db      	uxtb	r3, r3
 8003482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003486:	b2da      	uxtb	r2, r3
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003490:	1c5a      	adds	r2, r3, #1
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800349a:	b29b      	uxth	r3, r3
 800349c:	3b01      	subs	r3, #1
 800349e:	b29b      	uxth	r3, r3
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	4619      	mov	r1, r3
 80034a4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d148      	bne.n	800353c <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68da      	ldr	r2, [r3, #12]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 0220 	bic.w	r2, r2, #32
 80034b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	695a      	ldr	r2, [r3, #20]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 0201 	bic.w	r2, r2, #1
 80034d8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d123      	bne.n	8003532 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68da      	ldr	r2, [r3, #12]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0210 	bic.w	r2, r2, #16
 80034fe:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0310 	and.w	r3, r3, #16
 800350a:	2b10      	cmp	r3, #16
 800350c:	d10a      	bne.n	8003524 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800350e:	2300      	movs	r3, #0
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003528:	4619      	mov	r1, r3
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7ff fd52 	bl	8002fd4 <HAL_UARTEx_RxEventCallback>
 8003530:	e002      	b.n	8003538 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7fd fdab 	bl	800108e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003538:	2300      	movs	r3, #0
 800353a:	e002      	b.n	8003542 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800353c:	2300      	movs	r3, #0
 800353e:	e000      	b.n	8003542 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003540:	2302      	movs	r3, #2
  }
}
 8003542:	4618      	mov	r0, r3
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
	...

0800354c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68da      	ldr	r2, [r3, #12]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689a      	ldr	r2, [r3, #8]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	431a      	orrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	4313      	orrs	r3, r2
 800357a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003586:	f023 030c 	bic.w	r3, r3, #12
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6812      	ldr	r2, [r2, #0]
 800358e:	68b9      	ldr	r1, [r7, #8]
 8003590:	430b      	orrs	r3, r1
 8003592:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	699a      	ldr	r2, [r3, #24]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a2c      	ldr	r2, [pc, #176]	; (8003660 <UART_SetConfig+0x114>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d103      	bne.n	80035bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80035b4:	f7ff fa08 	bl	80029c8 <HAL_RCC_GetPCLK2Freq>
 80035b8:	60f8      	str	r0, [r7, #12]
 80035ba:	e002      	b.n	80035c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80035bc:	f7ff f9f0 	bl	80029a0 <HAL_RCC_GetPCLK1Freq>
 80035c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	4613      	mov	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	009a      	lsls	r2, r3, #2
 80035cc:	441a      	add	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d8:	4a22      	ldr	r2, [pc, #136]	; (8003664 <UART_SetConfig+0x118>)
 80035da:	fba2 2303 	umull	r2, r3, r2, r3
 80035de:	095b      	lsrs	r3, r3, #5
 80035e0:	0119      	lsls	r1, r3, #4
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	4613      	mov	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4413      	add	r3, r2
 80035ea:	009a      	lsls	r2, r3, #2
 80035ec:	441a      	add	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80035f8:	4b1a      	ldr	r3, [pc, #104]	; (8003664 <UART_SetConfig+0x118>)
 80035fa:	fba3 0302 	umull	r0, r3, r3, r2
 80035fe:	095b      	lsrs	r3, r3, #5
 8003600:	2064      	movs	r0, #100	; 0x64
 8003602:	fb00 f303 	mul.w	r3, r0, r3
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	3332      	adds	r3, #50	; 0x32
 800360c:	4a15      	ldr	r2, [pc, #84]	; (8003664 <UART_SetConfig+0x118>)
 800360e:	fba2 2303 	umull	r2, r3, r2, r3
 8003612:	095b      	lsrs	r3, r3, #5
 8003614:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003618:	4419      	add	r1, r3
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	4613      	mov	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4413      	add	r3, r2
 8003622:	009a      	lsls	r2, r3, #2
 8003624:	441a      	add	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003630:	4b0c      	ldr	r3, [pc, #48]	; (8003664 <UART_SetConfig+0x118>)
 8003632:	fba3 0302 	umull	r0, r3, r3, r2
 8003636:	095b      	lsrs	r3, r3, #5
 8003638:	2064      	movs	r0, #100	; 0x64
 800363a:	fb00 f303 	mul.w	r3, r0, r3
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	3332      	adds	r3, #50	; 0x32
 8003644:	4a07      	ldr	r2, [pc, #28]	; (8003664 <UART_SetConfig+0x118>)
 8003646:	fba2 2303 	umull	r2, r3, r2, r3
 800364a:	095b      	lsrs	r3, r3, #5
 800364c:	f003 020f 	and.w	r2, r3, #15
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	440a      	add	r2, r1
 8003656:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003658:	bf00      	nop
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40013800 	.word	0x40013800
 8003664:	51eb851f 	.word	0x51eb851f

08003668 <main>:
#include "main.h"



int main(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
	hwInit();
 800366c:	f7fd fe9e 	bl	80013ac <hwInit>
	apInit();
 8003670:	f7fc fd6c 	bl	800014c <apInit>
/* TODO: 테스트 선택 */

//	apBoardTest();
//	apUartTest();
//	apGpioTest();
    apDFPlayerTest();
 8003674:	f7fc fd78 	bl	8000168 <apDFPlayerTest>

    return 0;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	bd80      	pop	{r7, pc}
	...

08003680 <__errno>:
 8003680:	4b01      	ldr	r3, [pc, #4]	; (8003688 <__errno+0x8>)
 8003682:	6818      	ldr	r0, [r3, #0]
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	20000020 	.word	0x20000020

0800368c <__libc_init_array>:
 800368c:	b570      	push	{r4, r5, r6, lr}
 800368e:	2600      	movs	r6, #0
 8003690:	4d0c      	ldr	r5, [pc, #48]	; (80036c4 <__libc_init_array+0x38>)
 8003692:	4c0d      	ldr	r4, [pc, #52]	; (80036c8 <__libc_init_array+0x3c>)
 8003694:	1b64      	subs	r4, r4, r5
 8003696:	10a4      	asrs	r4, r4, #2
 8003698:	42a6      	cmp	r6, r4
 800369a:	d109      	bne.n	80036b0 <__libc_init_array+0x24>
 800369c:	f000 fc76 	bl	8003f8c <_init>
 80036a0:	2600      	movs	r6, #0
 80036a2:	4d0a      	ldr	r5, [pc, #40]	; (80036cc <__libc_init_array+0x40>)
 80036a4:	4c0a      	ldr	r4, [pc, #40]	; (80036d0 <__libc_init_array+0x44>)
 80036a6:	1b64      	subs	r4, r4, r5
 80036a8:	10a4      	asrs	r4, r4, #2
 80036aa:	42a6      	cmp	r6, r4
 80036ac:	d105      	bne.n	80036ba <__libc_init_array+0x2e>
 80036ae:	bd70      	pop	{r4, r5, r6, pc}
 80036b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80036b4:	4798      	blx	r3
 80036b6:	3601      	adds	r6, #1
 80036b8:	e7ee      	b.n	8003698 <__libc_init_array+0xc>
 80036ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80036be:	4798      	blx	r3
 80036c0:	3601      	adds	r6, #1
 80036c2:	e7f2      	b.n	80036aa <__libc_init_array+0x1e>
 80036c4:	080040c8 	.word	0x080040c8
 80036c8:	080040c8 	.word	0x080040c8
 80036cc:	080040c8 	.word	0x080040c8
 80036d0:	080040cc 	.word	0x080040cc

080036d4 <memset>:
 80036d4:	4603      	mov	r3, r0
 80036d6:	4402      	add	r2, r0
 80036d8:	4293      	cmp	r3, r2
 80036da:	d100      	bne.n	80036de <memset+0xa>
 80036dc:	4770      	bx	lr
 80036de:	f803 1b01 	strb.w	r1, [r3], #1
 80036e2:	e7f9      	b.n	80036d8 <memset+0x4>

080036e4 <_vsniprintf_r>:
 80036e4:	b530      	push	{r4, r5, lr}
 80036e6:	1e14      	subs	r4, r2, #0
 80036e8:	4605      	mov	r5, r0
 80036ea:	b09b      	sub	sp, #108	; 0x6c
 80036ec:	4618      	mov	r0, r3
 80036ee:	da05      	bge.n	80036fc <_vsniprintf_r+0x18>
 80036f0:	238b      	movs	r3, #139	; 0x8b
 80036f2:	f04f 30ff 	mov.w	r0, #4294967295
 80036f6:	602b      	str	r3, [r5, #0]
 80036f8:	b01b      	add	sp, #108	; 0x6c
 80036fa:	bd30      	pop	{r4, r5, pc}
 80036fc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003700:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003704:	bf0c      	ite	eq
 8003706:	4623      	moveq	r3, r4
 8003708:	f104 33ff 	addne.w	r3, r4, #4294967295
 800370c:	9302      	str	r3, [sp, #8]
 800370e:	9305      	str	r3, [sp, #20]
 8003710:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003714:	4602      	mov	r2, r0
 8003716:	9100      	str	r1, [sp, #0]
 8003718:	9104      	str	r1, [sp, #16]
 800371a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800371e:	4669      	mov	r1, sp
 8003720:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003722:	4628      	mov	r0, r5
 8003724:	f000 f874 	bl	8003810 <_svfiprintf_r>
 8003728:	1c43      	adds	r3, r0, #1
 800372a:	bfbc      	itt	lt
 800372c:	238b      	movlt	r3, #139	; 0x8b
 800372e:	602b      	strlt	r3, [r5, #0]
 8003730:	2c00      	cmp	r4, #0
 8003732:	d0e1      	beq.n	80036f8 <_vsniprintf_r+0x14>
 8003734:	2200      	movs	r2, #0
 8003736:	9b00      	ldr	r3, [sp, #0]
 8003738:	701a      	strb	r2, [r3, #0]
 800373a:	e7dd      	b.n	80036f8 <_vsniprintf_r+0x14>

0800373c <vsniprintf>:
 800373c:	b507      	push	{r0, r1, r2, lr}
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	4613      	mov	r3, r2
 8003742:	460a      	mov	r2, r1
 8003744:	4601      	mov	r1, r0
 8003746:	4803      	ldr	r0, [pc, #12]	; (8003754 <vsniprintf+0x18>)
 8003748:	6800      	ldr	r0, [r0, #0]
 800374a:	f7ff ffcb 	bl	80036e4 <_vsniprintf_r>
 800374e:	b003      	add	sp, #12
 8003750:	f85d fb04 	ldr.w	pc, [sp], #4
 8003754:	20000020 	.word	0x20000020

08003758 <__ssputs_r>:
 8003758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800375c:	688e      	ldr	r6, [r1, #8]
 800375e:	4682      	mov	sl, r0
 8003760:	429e      	cmp	r6, r3
 8003762:	460c      	mov	r4, r1
 8003764:	4690      	mov	r8, r2
 8003766:	461f      	mov	r7, r3
 8003768:	d838      	bhi.n	80037dc <__ssputs_r+0x84>
 800376a:	898a      	ldrh	r2, [r1, #12]
 800376c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003770:	d032      	beq.n	80037d8 <__ssputs_r+0x80>
 8003772:	6825      	ldr	r5, [r4, #0]
 8003774:	6909      	ldr	r1, [r1, #16]
 8003776:	3301      	adds	r3, #1
 8003778:	eba5 0901 	sub.w	r9, r5, r1
 800377c:	6965      	ldr	r5, [r4, #20]
 800377e:	444b      	add	r3, r9
 8003780:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003784:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003788:	106d      	asrs	r5, r5, #1
 800378a:	429d      	cmp	r5, r3
 800378c:	bf38      	it	cc
 800378e:	461d      	movcc	r5, r3
 8003790:	0553      	lsls	r3, r2, #21
 8003792:	d531      	bpl.n	80037f8 <__ssputs_r+0xa0>
 8003794:	4629      	mov	r1, r5
 8003796:	f000 fb53 	bl	8003e40 <_malloc_r>
 800379a:	4606      	mov	r6, r0
 800379c:	b950      	cbnz	r0, 80037b4 <__ssputs_r+0x5c>
 800379e:	230c      	movs	r3, #12
 80037a0:	f04f 30ff 	mov.w	r0, #4294967295
 80037a4:	f8ca 3000 	str.w	r3, [sl]
 80037a8:	89a3      	ldrh	r3, [r4, #12]
 80037aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037ae:	81a3      	strh	r3, [r4, #12]
 80037b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037b4:	464a      	mov	r2, r9
 80037b6:	6921      	ldr	r1, [r4, #16]
 80037b8:	f000 face 	bl	8003d58 <memcpy>
 80037bc:	89a3      	ldrh	r3, [r4, #12]
 80037be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80037c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037c6:	81a3      	strh	r3, [r4, #12]
 80037c8:	6126      	str	r6, [r4, #16]
 80037ca:	444e      	add	r6, r9
 80037cc:	6026      	str	r6, [r4, #0]
 80037ce:	463e      	mov	r6, r7
 80037d0:	6165      	str	r5, [r4, #20]
 80037d2:	eba5 0509 	sub.w	r5, r5, r9
 80037d6:	60a5      	str	r5, [r4, #8]
 80037d8:	42be      	cmp	r6, r7
 80037da:	d900      	bls.n	80037de <__ssputs_r+0x86>
 80037dc:	463e      	mov	r6, r7
 80037de:	4632      	mov	r2, r6
 80037e0:	4641      	mov	r1, r8
 80037e2:	6820      	ldr	r0, [r4, #0]
 80037e4:	f000 fac6 	bl	8003d74 <memmove>
 80037e8:	68a3      	ldr	r3, [r4, #8]
 80037ea:	6822      	ldr	r2, [r4, #0]
 80037ec:	1b9b      	subs	r3, r3, r6
 80037ee:	4432      	add	r2, r6
 80037f0:	2000      	movs	r0, #0
 80037f2:	60a3      	str	r3, [r4, #8]
 80037f4:	6022      	str	r2, [r4, #0]
 80037f6:	e7db      	b.n	80037b0 <__ssputs_r+0x58>
 80037f8:	462a      	mov	r2, r5
 80037fa:	f000 fb7b 	bl	8003ef4 <_realloc_r>
 80037fe:	4606      	mov	r6, r0
 8003800:	2800      	cmp	r0, #0
 8003802:	d1e1      	bne.n	80037c8 <__ssputs_r+0x70>
 8003804:	4650      	mov	r0, sl
 8003806:	6921      	ldr	r1, [r4, #16]
 8003808:	f000 face 	bl	8003da8 <_free_r>
 800380c:	e7c7      	b.n	800379e <__ssputs_r+0x46>
	...

08003810 <_svfiprintf_r>:
 8003810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003814:	4698      	mov	r8, r3
 8003816:	898b      	ldrh	r3, [r1, #12]
 8003818:	4607      	mov	r7, r0
 800381a:	061b      	lsls	r3, r3, #24
 800381c:	460d      	mov	r5, r1
 800381e:	4614      	mov	r4, r2
 8003820:	b09d      	sub	sp, #116	; 0x74
 8003822:	d50e      	bpl.n	8003842 <_svfiprintf_r+0x32>
 8003824:	690b      	ldr	r3, [r1, #16]
 8003826:	b963      	cbnz	r3, 8003842 <_svfiprintf_r+0x32>
 8003828:	2140      	movs	r1, #64	; 0x40
 800382a:	f000 fb09 	bl	8003e40 <_malloc_r>
 800382e:	6028      	str	r0, [r5, #0]
 8003830:	6128      	str	r0, [r5, #16]
 8003832:	b920      	cbnz	r0, 800383e <_svfiprintf_r+0x2e>
 8003834:	230c      	movs	r3, #12
 8003836:	603b      	str	r3, [r7, #0]
 8003838:	f04f 30ff 	mov.w	r0, #4294967295
 800383c:	e0d1      	b.n	80039e2 <_svfiprintf_r+0x1d2>
 800383e:	2340      	movs	r3, #64	; 0x40
 8003840:	616b      	str	r3, [r5, #20]
 8003842:	2300      	movs	r3, #0
 8003844:	9309      	str	r3, [sp, #36]	; 0x24
 8003846:	2320      	movs	r3, #32
 8003848:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800384c:	2330      	movs	r3, #48	; 0x30
 800384e:	f04f 0901 	mov.w	r9, #1
 8003852:	f8cd 800c 	str.w	r8, [sp, #12]
 8003856:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80039fc <_svfiprintf_r+0x1ec>
 800385a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800385e:	4623      	mov	r3, r4
 8003860:	469a      	mov	sl, r3
 8003862:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003866:	b10a      	cbz	r2, 800386c <_svfiprintf_r+0x5c>
 8003868:	2a25      	cmp	r2, #37	; 0x25
 800386a:	d1f9      	bne.n	8003860 <_svfiprintf_r+0x50>
 800386c:	ebba 0b04 	subs.w	fp, sl, r4
 8003870:	d00b      	beq.n	800388a <_svfiprintf_r+0x7a>
 8003872:	465b      	mov	r3, fp
 8003874:	4622      	mov	r2, r4
 8003876:	4629      	mov	r1, r5
 8003878:	4638      	mov	r0, r7
 800387a:	f7ff ff6d 	bl	8003758 <__ssputs_r>
 800387e:	3001      	adds	r0, #1
 8003880:	f000 80aa 	beq.w	80039d8 <_svfiprintf_r+0x1c8>
 8003884:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003886:	445a      	add	r2, fp
 8003888:	9209      	str	r2, [sp, #36]	; 0x24
 800388a:	f89a 3000 	ldrb.w	r3, [sl]
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 80a2 	beq.w	80039d8 <_svfiprintf_r+0x1c8>
 8003894:	2300      	movs	r3, #0
 8003896:	f04f 32ff 	mov.w	r2, #4294967295
 800389a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800389e:	f10a 0a01 	add.w	sl, sl, #1
 80038a2:	9304      	str	r3, [sp, #16]
 80038a4:	9307      	str	r3, [sp, #28]
 80038a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80038aa:	931a      	str	r3, [sp, #104]	; 0x68
 80038ac:	4654      	mov	r4, sl
 80038ae:	2205      	movs	r2, #5
 80038b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038b4:	4851      	ldr	r0, [pc, #324]	; (80039fc <_svfiprintf_r+0x1ec>)
 80038b6:	f000 fa41 	bl	8003d3c <memchr>
 80038ba:	9a04      	ldr	r2, [sp, #16]
 80038bc:	b9d8      	cbnz	r0, 80038f6 <_svfiprintf_r+0xe6>
 80038be:	06d0      	lsls	r0, r2, #27
 80038c0:	bf44      	itt	mi
 80038c2:	2320      	movmi	r3, #32
 80038c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038c8:	0711      	lsls	r1, r2, #28
 80038ca:	bf44      	itt	mi
 80038cc:	232b      	movmi	r3, #43	; 0x2b
 80038ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038d2:	f89a 3000 	ldrb.w	r3, [sl]
 80038d6:	2b2a      	cmp	r3, #42	; 0x2a
 80038d8:	d015      	beq.n	8003906 <_svfiprintf_r+0xf6>
 80038da:	4654      	mov	r4, sl
 80038dc:	2000      	movs	r0, #0
 80038de:	f04f 0c0a 	mov.w	ip, #10
 80038e2:	9a07      	ldr	r2, [sp, #28]
 80038e4:	4621      	mov	r1, r4
 80038e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80038ea:	3b30      	subs	r3, #48	; 0x30
 80038ec:	2b09      	cmp	r3, #9
 80038ee:	d94e      	bls.n	800398e <_svfiprintf_r+0x17e>
 80038f0:	b1b0      	cbz	r0, 8003920 <_svfiprintf_r+0x110>
 80038f2:	9207      	str	r2, [sp, #28]
 80038f4:	e014      	b.n	8003920 <_svfiprintf_r+0x110>
 80038f6:	eba0 0308 	sub.w	r3, r0, r8
 80038fa:	fa09 f303 	lsl.w	r3, r9, r3
 80038fe:	4313      	orrs	r3, r2
 8003900:	46a2      	mov	sl, r4
 8003902:	9304      	str	r3, [sp, #16]
 8003904:	e7d2      	b.n	80038ac <_svfiprintf_r+0x9c>
 8003906:	9b03      	ldr	r3, [sp, #12]
 8003908:	1d19      	adds	r1, r3, #4
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	9103      	str	r1, [sp, #12]
 800390e:	2b00      	cmp	r3, #0
 8003910:	bfbb      	ittet	lt
 8003912:	425b      	neglt	r3, r3
 8003914:	f042 0202 	orrlt.w	r2, r2, #2
 8003918:	9307      	strge	r3, [sp, #28]
 800391a:	9307      	strlt	r3, [sp, #28]
 800391c:	bfb8      	it	lt
 800391e:	9204      	strlt	r2, [sp, #16]
 8003920:	7823      	ldrb	r3, [r4, #0]
 8003922:	2b2e      	cmp	r3, #46	; 0x2e
 8003924:	d10c      	bne.n	8003940 <_svfiprintf_r+0x130>
 8003926:	7863      	ldrb	r3, [r4, #1]
 8003928:	2b2a      	cmp	r3, #42	; 0x2a
 800392a:	d135      	bne.n	8003998 <_svfiprintf_r+0x188>
 800392c:	9b03      	ldr	r3, [sp, #12]
 800392e:	3402      	adds	r4, #2
 8003930:	1d1a      	adds	r2, r3, #4
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	9203      	str	r2, [sp, #12]
 8003936:	2b00      	cmp	r3, #0
 8003938:	bfb8      	it	lt
 800393a:	f04f 33ff 	movlt.w	r3, #4294967295
 800393e:	9305      	str	r3, [sp, #20]
 8003940:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003a0c <_svfiprintf_r+0x1fc>
 8003944:	2203      	movs	r2, #3
 8003946:	4650      	mov	r0, sl
 8003948:	7821      	ldrb	r1, [r4, #0]
 800394a:	f000 f9f7 	bl	8003d3c <memchr>
 800394e:	b140      	cbz	r0, 8003962 <_svfiprintf_r+0x152>
 8003950:	2340      	movs	r3, #64	; 0x40
 8003952:	eba0 000a 	sub.w	r0, r0, sl
 8003956:	fa03 f000 	lsl.w	r0, r3, r0
 800395a:	9b04      	ldr	r3, [sp, #16]
 800395c:	3401      	adds	r4, #1
 800395e:	4303      	orrs	r3, r0
 8003960:	9304      	str	r3, [sp, #16]
 8003962:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003966:	2206      	movs	r2, #6
 8003968:	4825      	ldr	r0, [pc, #148]	; (8003a00 <_svfiprintf_r+0x1f0>)
 800396a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800396e:	f000 f9e5 	bl	8003d3c <memchr>
 8003972:	2800      	cmp	r0, #0
 8003974:	d038      	beq.n	80039e8 <_svfiprintf_r+0x1d8>
 8003976:	4b23      	ldr	r3, [pc, #140]	; (8003a04 <_svfiprintf_r+0x1f4>)
 8003978:	bb1b      	cbnz	r3, 80039c2 <_svfiprintf_r+0x1b2>
 800397a:	9b03      	ldr	r3, [sp, #12]
 800397c:	3307      	adds	r3, #7
 800397e:	f023 0307 	bic.w	r3, r3, #7
 8003982:	3308      	adds	r3, #8
 8003984:	9303      	str	r3, [sp, #12]
 8003986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003988:	4433      	add	r3, r6
 800398a:	9309      	str	r3, [sp, #36]	; 0x24
 800398c:	e767      	b.n	800385e <_svfiprintf_r+0x4e>
 800398e:	460c      	mov	r4, r1
 8003990:	2001      	movs	r0, #1
 8003992:	fb0c 3202 	mla	r2, ip, r2, r3
 8003996:	e7a5      	b.n	80038e4 <_svfiprintf_r+0xd4>
 8003998:	2300      	movs	r3, #0
 800399a:	f04f 0c0a 	mov.w	ip, #10
 800399e:	4619      	mov	r1, r3
 80039a0:	3401      	adds	r4, #1
 80039a2:	9305      	str	r3, [sp, #20]
 80039a4:	4620      	mov	r0, r4
 80039a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80039aa:	3a30      	subs	r2, #48	; 0x30
 80039ac:	2a09      	cmp	r2, #9
 80039ae:	d903      	bls.n	80039b8 <_svfiprintf_r+0x1a8>
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0c5      	beq.n	8003940 <_svfiprintf_r+0x130>
 80039b4:	9105      	str	r1, [sp, #20]
 80039b6:	e7c3      	b.n	8003940 <_svfiprintf_r+0x130>
 80039b8:	4604      	mov	r4, r0
 80039ba:	2301      	movs	r3, #1
 80039bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80039c0:	e7f0      	b.n	80039a4 <_svfiprintf_r+0x194>
 80039c2:	ab03      	add	r3, sp, #12
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	462a      	mov	r2, r5
 80039c8:	4638      	mov	r0, r7
 80039ca:	4b0f      	ldr	r3, [pc, #60]	; (8003a08 <_svfiprintf_r+0x1f8>)
 80039cc:	a904      	add	r1, sp, #16
 80039ce:	f3af 8000 	nop.w
 80039d2:	1c42      	adds	r2, r0, #1
 80039d4:	4606      	mov	r6, r0
 80039d6:	d1d6      	bne.n	8003986 <_svfiprintf_r+0x176>
 80039d8:	89ab      	ldrh	r3, [r5, #12]
 80039da:	065b      	lsls	r3, r3, #25
 80039dc:	f53f af2c 	bmi.w	8003838 <_svfiprintf_r+0x28>
 80039e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80039e2:	b01d      	add	sp, #116	; 0x74
 80039e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039e8:	ab03      	add	r3, sp, #12
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	462a      	mov	r2, r5
 80039ee:	4638      	mov	r0, r7
 80039f0:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <_svfiprintf_r+0x1f8>)
 80039f2:	a904      	add	r1, sp, #16
 80039f4:	f000 f87c 	bl	8003af0 <_printf_i>
 80039f8:	e7eb      	b.n	80039d2 <_svfiprintf_r+0x1c2>
 80039fa:	bf00      	nop
 80039fc:	08004094 	.word	0x08004094
 8003a00:	0800409e 	.word	0x0800409e
 8003a04:	00000000 	.word	0x00000000
 8003a08:	08003759 	.word	0x08003759
 8003a0c:	0800409a 	.word	0x0800409a

08003a10 <_printf_common>:
 8003a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a14:	4616      	mov	r6, r2
 8003a16:	4699      	mov	r9, r3
 8003a18:	688a      	ldr	r2, [r1, #8]
 8003a1a:	690b      	ldr	r3, [r1, #16]
 8003a1c:	4607      	mov	r7, r0
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	bfb8      	it	lt
 8003a22:	4613      	movlt	r3, r2
 8003a24:	6033      	str	r3, [r6, #0]
 8003a26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a2a:	460c      	mov	r4, r1
 8003a2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a30:	b10a      	cbz	r2, 8003a36 <_printf_common+0x26>
 8003a32:	3301      	adds	r3, #1
 8003a34:	6033      	str	r3, [r6, #0]
 8003a36:	6823      	ldr	r3, [r4, #0]
 8003a38:	0699      	lsls	r1, r3, #26
 8003a3a:	bf42      	ittt	mi
 8003a3c:	6833      	ldrmi	r3, [r6, #0]
 8003a3e:	3302      	addmi	r3, #2
 8003a40:	6033      	strmi	r3, [r6, #0]
 8003a42:	6825      	ldr	r5, [r4, #0]
 8003a44:	f015 0506 	ands.w	r5, r5, #6
 8003a48:	d106      	bne.n	8003a58 <_printf_common+0x48>
 8003a4a:	f104 0a19 	add.w	sl, r4, #25
 8003a4e:	68e3      	ldr	r3, [r4, #12]
 8003a50:	6832      	ldr	r2, [r6, #0]
 8003a52:	1a9b      	subs	r3, r3, r2
 8003a54:	42ab      	cmp	r3, r5
 8003a56:	dc28      	bgt.n	8003aaa <_printf_common+0x9a>
 8003a58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a5c:	1e13      	subs	r3, r2, #0
 8003a5e:	6822      	ldr	r2, [r4, #0]
 8003a60:	bf18      	it	ne
 8003a62:	2301      	movne	r3, #1
 8003a64:	0692      	lsls	r2, r2, #26
 8003a66:	d42d      	bmi.n	8003ac4 <_printf_common+0xb4>
 8003a68:	4649      	mov	r1, r9
 8003a6a:	4638      	mov	r0, r7
 8003a6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a70:	47c0      	blx	r8
 8003a72:	3001      	adds	r0, #1
 8003a74:	d020      	beq.n	8003ab8 <_printf_common+0xa8>
 8003a76:	6823      	ldr	r3, [r4, #0]
 8003a78:	68e5      	ldr	r5, [r4, #12]
 8003a7a:	f003 0306 	and.w	r3, r3, #6
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	bf18      	it	ne
 8003a82:	2500      	movne	r5, #0
 8003a84:	6832      	ldr	r2, [r6, #0]
 8003a86:	f04f 0600 	mov.w	r6, #0
 8003a8a:	68a3      	ldr	r3, [r4, #8]
 8003a8c:	bf08      	it	eq
 8003a8e:	1aad      	subeq	r5, r5, r2
 8003a90:	6922      	ldr	r2, [r4, #16]
 8003a92:	bf08      	it	eq
 8003a94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	bfc4      	itt	gt
 8003a9c:	1a9b      	subgt	r3, r3, r2
 8003a9e:	18ed      	addgt	r5, r5, r3
 8003aa0:	341a      	adds	r4, #26
 8003aa2:	42b5      	cmp	r5, r6
 8003aa4:	d11a      	bne.n	8003adc <_printf_common+0xcc>
 8003aa6:	2000      	movs	r0, #0
 8003aa8:	e008      	b.n	8003abc <_printf_common+0xac>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	4652      	mov	r2, sl
 8003aae:	4649      	mov	r1, r9
 8003ab0:	4638      	mov	r0, r7
 8003ab2:	47c0      	blx	r8
 8003ab4:	3001      	adds	r0, #1
 8003ab6:	d103      	bne.n	8003ac0 <_printf_common+0xb0>
 8003ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8003abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ac0:	3501      	adds	r5, #1
 8003ac2:	e7c4      	b.n	8003a4e <_printf_common+0x3e>
 8003ac4:	2030      	movs	r0, #48	; 0x30
 8003ac6:	18e1      	adds	r1, r4, r3
 8003ac8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ad2:	4422      	add	r2, r4
 8003ad4:	3302      	adds	r3, #2
 8003ad6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ada:	e7c5      	b.n	8003a68 <_printf_common+0x58>
 8003adc:	2301      	movs	r3, #1
 8003ade:	4622      	mov	r2, r4
 8003ae0:	4649      	mov	r1, r9
 8003ae2:	4638      	mov	r0, r7
 8003ae4:	47c0      	blx	r8
 8003ae6:	3001      	adds	r0, #1
 8003ae8:	d0e6      	beq.n	8003ab8 <_printf_common+0xa8>
 8003aea:	3601      	adds	r6, #1
 8003aec:	e7d9      	b.n	8003aa2 <_printf_common+0x92>
	...

08003af0 <_printf_i>:
 8003af0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003af4:	460c      	mov	r4, r1
 8003af6:	7e27      	ldrb	r7, [r4, #24]
 8003af8:	4691      	mov	r9, r2
 8003afa:	2f78      	cmp	r7, #120	; 0x78
 8003afc:	4680      	mov	r8, r0
 8003afe:	469a      	mov	sl, r3
 8003b00:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003b02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b06:	d807      	bhi.n	8003b18 <_printf_i+0x28>
 8003b08:	2f62      	cmp	r7, #98	; 0x62
 8003b0a:	d80a      	bhi.n	8003b22 <_printf_i+0x32>
 8003b0c:	2f00      	cmp	r7, #0
 8003b0e:	f000 80d9 	beq.w	8003cc4 <_printf_i+0x1d4>
 8003b12:	2f58      	cmp	r7, #88	; 0x58
 8003b14:	f000 80a4 	beq.w	8003c60 <_printf_i+0x170>
 8003b18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003b1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b20:	e03a      	b.n	8003b98 <_printf_i+0xa8>
 8003b22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b26:	2b15      	cmp	r3, #21
 8003b28:	d8f6      	bhi.n	8003b18 <_printf_i+0x28>
 8003b2a:	a001      	add	r0, pc, #4	; (adr r0, 8003b30 <_printf_i+0x40>)
 8003b2c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003b30:	08003b89 	.word	0x08003b89
 8003b34:	08003b9d 	.word	0x08003b9d
 8003b38:	08003b19 	.word	0x08003b19
 8003b3c:	08003b19 	.word	0x08003b19
 8003b40:	08003b19 	.word	0x08003b19
 8003b44:	08003b19 	.word	0x08003b19
 8003b48:	08003b9d 	.word	0x08003b9d
 8003b4c:	08003b19 	.word	0x08003b19
 8003b50:	08003b19 	.word	0x08003b19
 8003b54:	08003b19 	.word	0x08003b19
 8003b58:	08003b19 	.word	0x08003b19
 8003b5c:	08003cab 	.word	0x08003cab
 8003b60:	08003bcd 	.word	0x08003bcd
 8003b64:	08003c8d 	.word	0x08003c8d
 8003b68:	08003b19 	.word	0x08003b19
 8003b6c:	08003b19 	.word	0x08003b19
 8003b70:	08003ccd 	.word	0x08003ccd
 8003b74:	08003b19 	.word	0x08003b19
 8003b78:	08003bcd 	.word	0x08003bcd
 8003b7c:	08003b19 	.word	0x08003b19
 8003b80:	08003b19 	.word	0x08003b19
 8003b84:	08003c95 	.word	0x08003c95
 8003b88:	680b      	ldr	r3, [r1, #0]
 8003b8a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003b8e:	1d1a      	adds	r2, r3, #4
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	600a      	str	r2, [r1, #0]
 8003b94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e0a4      	b.n	8003ce6 <_printf_i+0x1f6>
 8003b9c:	6825      	ldr	r5, [r4, #0]
 8003b9e:	6808      	ldr	r0, [r1, #0]
 8003ba0:	062e      	lsls	r6, r5, #24
 8003ba2:	f100 0304 	add.w	r3, r0, #4
 8003ba6:	d50a      	bpl.n	8003bbe <_printf_i+0xce>
 8003ba8:	6805      	ldr	r5, [r0, #0]
 8003baa:	600b      	str	r3, [r1, #0]
 8003bac:	2d00      	cmp	r5, #0
 8003bae:	da03      	bge.n	8003bb8 <_printf_i+0xc8>
 8003bb0:	232d      	movs	r3, #45	; 0x2d
 8003bb2:	426d      	negs	r5, r5
 8003bb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bb8:	230a      	movs	r3, #10
 8003bba:	485e      	ldr	r0, [pc, #376]	; (8003d34 <_printf_i+0x244>)
 8003bbc:	e019      	b.n	8003bf2 <_printf_i+0x102>
 8003bbe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003bc2:	6805      	ldr	r5, [r0, #0]
 8003bc4:	600b      	str	r3, [r1, #0]
 8003bc6:	bf18      	it	ne
 8003bc8:	b22d      	sxthne	r5, r5
 8003bca:	e7ef      	b.n	8003bac <_printf_i+0xbc>
 8003bcc:	680b      	ldr	r3, [r1, #0]
 8003bce:	6825      	ldr	r5, [r4, #0]
 8003bd0:	1d18      	adds	r0, r3, #4
 8003bd2:	6008      	str	r0, [r1, #0]
 8003bd4:	0628      	lsls	r0, r5, #24
 8003bd6:	d501      	bpl.n	8003bdc <_printf_i+0xec>
 8003bd8:	681d      	ldr	r5, [r3, #0]
 8003bda:	e002      	b.n	8003be2 <_printf_i+0xf2>
 8003bdc:	0669      	lsls	r1, r5, #25
 8003bde:	d5fb      	bpl.n	8003bd8 <_printf_i+0xe8>
 8003be0:	881d      	ldrh	r5, [r3, #0]
 8003be2:	2f6f      	cmp	r7, #111	; 0x6f
 8003be4:	bf0c      	ite	eq
 8003be6:	2308      	moveq	r3, #8
 8003be8:	230a      	movne	r3, #10
 8003bea:	4852      	ldr	r0, [pc, #328]	; (8003d34 <_printf_i+0x244>)
 8003bec:	2100      	movs	r1, #0
 8003bee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003bf2:	6866      	ldr	r6, [r4, #4]
 8003bf4:	2e00      	cmp	r6, #0
 8003bf6:	bfa8      	it	ge
 8003bf8:	6821      	ldrge	r1, [r4, #0]
 8003bfa:	60a6      	str	r6, [r4, #8]
 8003bfc:	bfa4      	itt	ge
 8003bfe:	f021 0104 	bicge.w	r1, r1, #4
 8003c02:	6021      	strge	r1, [r4, #0]
 8003c04:	b90d      	cbnz	r5, 8003c0a <_printf_i+0x11a>
 8003c06:	2e00      	cmp	r6, #0
 8003c08:	d04d      	beq.n	8003ca6 <_printf_i+0x1b6>
 8003c0a:	4616      	mov	r6, r2
 8003c0c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003c10:	fb03 5711 	mls	r7, r3, r1, r5
 8003c14:	5dc7      	ldrb	r7, [r0, r7]
 8003c16:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003c1a:	462f      	mov	r7, r5
 8003c1c:	42bb      	cmp	r3, r7
 8003c1e:	460d      	mov	r5, r1
 8003c20:	d9f4      	bls.n	8003c0c <_printf_i+0x11c>
 8003c22:	2b08      	cmp	r3, #8
 8003c24:	d10b      	bne.n	8003c3e <_printf_i+0x14e>
 8003c26:	6823      	ldr	r3, [r4, #0]
 8003c28:	07df      	lsls	r7, r3, #31
 8003c2a:	d508      	bpl.n	8003c3e <_printf_i+0x14e>
 8003c2c:	6923      	ldr	r3, [r4, #16]
 8003c2e:	6861      	ldr	r1, [r4, #4]
 8003c30:	4299      	cmp	r1, r3
 8003c32:	bfde      	ittt	le
 8003c34:	2330      	movle	r3, #48	; 0x30
 8003c36:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003c3a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003c3e:	1b92      	subs	r2, r2, r6
 8003c40:	6122      	str	r2, [r4, #16]
 8003c42:	464b      	mov	r3, r9
 8003c44:	4621      	mov	r1, r4
 8003c46:	4640      	mov	r0, r8
 8003c48:	f8cd a000 	str.w	sl, [sp]
 8003c4c:	aa03      	add	r2, sp, #12
 8003c4e:	f7ff fedf 	bl	8003a10 <_printf_common>
 8003c52:	3001      	adds	r0, #1
 8003c54:	d14c      	bne.n	8003cf0 <_printf_i+0x200>
 8003c56:	f04f 30ff 	mov.w	r0, #4294967295
 8003c5a:	b004      	add	sp, #16
 8003c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c60:	4834      	ldr	r0, [pc, #208]	; (8003d34 <_printf_i+0x244>)
 8003c62:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003c66:	680e      	ldr	r6, [r1, #0]
 8003c68:	6823      	ldr	r3, [r4, #0]
 8003c6a:	f856 5b04 	ldr.w	r5, [r6], #4
 8003c6e:	061f      	lsls	r7, r3, #24
 8003c70:	600e      	str	r6, [r1, #0]
 8003c72:	d514      	bpl.n	8003c9e <_printf_i+0x1ae>
 8003c74:	07d9      	lsls	r1, r3, #31
 8003c76:	bf44      	itt	mi
 8003c78:	f043 0320 	orrmi.w	r3, r3, #32
 8003c7c:	6023      	strmi	r3, [r4, #0]
 8003c7e:	b91d      	cbnz	r5, 8003c88 <_printf_i+0x198>
 8003c80:	6823      	ldr	r3, [r4, #0]
 8003c82:	f023 0320 	bic.w	r3, r3, #32
 8003c86:	6023      	str	r3, [r4, #0]
 8003c88:	2310      	movs	r3, #16
 8003c8a:	e7af      	b.n	8003bec <_printf_i+0xfc>
 8003c8c:	6823      	ldr	r3, [r4, #0]
 8003c8e:	f043 0320 	orr.w	r3, r3, #32
 8003c92:	6023      	str	r3, [r4, #0]
 8003c94:	2378      	movs	r3, #120	; 0x78
 8003c96:	4828      	ldr	r0, [pc, #160]	; (8003d38 <_printf_i+0x248>)
 8003c98:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c9c:	e7e3      	b.n	8003c66 <_printf_i+0x176>
 8003c9e:	065e      	lsls	r6, r3, #25
 8003ca0:	bf48      	it	mi
 8003ca2:	b2ad      	uxthmi	r5, r5
 8003ca4:	e7e6      	b.n	8003c74 <_printf_i+0x184>
 8003ca6:	4616      	mov	r6, r2
 8003ca8:	e7bb      	b.n	8003c22 <_printf_i+0x132>
 8003caa:	680b      	ldr	r3, [r1, #0]
 8003cac:	6826      	ldr	r6, [r4, #0]
 8003cae:	1d1d      	adds	r5, r3, #4
 8003cb0:	6960      	ldr	r0, [r4, #20]
 8003cb2:	600d      	str	r5, [r1, #0]
 8003cb4:	0635      	lsls	r5, r6, #24
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	d501      	bpl.n	8003cbe <_printf_i+0x1ce>
 8003cba:	6018      	str	r0, [r3, #0]
 8003cbc:	e002      	b.n	8003cc4 <_printf_i+0x1d4>
 8003cbe:	0671      	lsls	r1, r6, #25
 8003cc0:	d5fb      	bpl.n	8003cba <_printf_i+0x1ca>
 8003cc2:	8018      	strh	r0, [r3, #0]
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	4616      	mov	r6, r2
 8003cc8:	6123      	str	r3, [r4, #16]
 8003cca:	e7ba      	b.n	8003c42 <_printf_i+0x152>
 8003ccc:	680b      	ldr	r3, [r1, #0]
 8003cce:	1d1a      	adds	r2, r3, #4
 8003cd0:	600a      	str	r2, [r1, #0]
 8003cd2:	681e      	ldr	r6, [r3, #0]
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	4630      	mov	r0, r6
 8003cd8:	6862      	ldr	r2, [r4, #4]
 8003cda:	f000 f82f 	bl	8003d3c <memchr>
 8003cde:	b108      	cbz	r0, 8003ce4 <_printf_i+0x1f4>
 8003ce0:	1b80      	subs	r0, r0, r6
 8003ce2:	6060      	str	r0, [r4, #4]
 8003ce4:	6863      	ldr	r3, [r4, #4]
 8003ce6:	6123      	str	r3, [r4, #16]
 8003ce8:	2300      	movs	r3, #0
 8003cea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cee:	e7a8      	b.n	8003c42 <_printf_i+0x152>
 8003cf0:	4632      	mov	r2, r6
 8003cf2:	4649      	mov	r1, r9
 8003cf4:	4640      	mov	r0, r8
 8003cf6:	6923      	ldr	r3, [r4, #16]
 8003cf8:	47d0      	blx	sl
 8003cfa:	3001      	adds	r0, #1
 8003cfc:	d0ab      	beq.n	8003c56 <_printf_i+0x166>
 8003cfe:	6823      	ldr	r3, [r4, #0]
 8003d00:	079b      	lsls	r3, r3, #30
 8003d02:	d413      	bmi.n	8003d2c <_printf_i+0x23c>
 8003d04:	68e0      	ldr	r0, [r4, #12]
 8003d06:	9b03      	ldr	r3, [sp, #12]
 8003d08:	4298      	cmp	r0, r3
 8003d0a:	bfb8      	it	lt
 8003d0c:	4618      	movlt	r0, r3
 8003d0e:	e7a4      	b.n	8003c5a <_printf_i+0x16a>
 8003d10:	2301      	movs	r3, #1
 8003d12:	4632      	mov	r2, r6
 8003d14:	4649      	mov	r1, r9
 8003d16:	4640      	mov	r0, r8
 8003d18:	47d0      	blx	sl
 8003d1a:	3001      	adds	r0, #1
 8003d1c:	d09b      	beq.n	8003c56 <_printf_i+0x166>
 8003d1e:	3501      	adds	r5, #1
 8003d20:	68e3      	ldr	r3, [r4, #12]
 8003d22:	9903      	ldr	r1, [sp, #12]
 8003d24:	1a5b      	subs	r3, r3, r1
 8003d26:	42ab      	cmp	r3, r5
 8003d28:	dcf2      	bgt.n	8003d10 <_printf_i+0x220>
 8003d2a:	e7eb      	b.n	8003d04 <_printf_i+0x214>
 8003d2c:	2500      	movs	r5, #0
 8003d2e:	f104 0619 	add.w	r6, r4, #25
 8003d32:	e7f5      	b.n	8003d20 <_printf_i+0x230>
 8003d34:	080040a5 	.word	0x080040a5
 8003d38:	080040b6 	.word	0x080040b6

08003d3c <memchr>:
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	b510      	push	{r4, lr}
 8003d40:	b2c9      	uxtb	r1, r1
 8003d42:	4402      	add	r2, r0
 8003d44:	4293      	cmp	r3, r2
 8003d46:	4618      	mov	r0, r3
 8003d48:	d101      	bne.n	8003d4e <memchr+0x12>
 8003d4a:	2000      	movs	r0, #0
 8003d4c:	e003      	b.n	8003d56 <memchr+0x1a>
 8003d4e:	7804      	ldrb	r4, [r0, #0]
 8003d50:	3301      	adds	r3, #1
 8003d52:	428c      	cmp	r4, r1
 8003d54:	d1f6      	bne.n	8003d44 <memchr+0x8>
 8003d56:	bd10      	pop	{r4, pc}

08003d58 <memcpy>:
 8003d58:	440a      	add	r2, r1
 8003d5a:	4291      	cmp	r1, r2
 8003d5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d60:	d100      	bne.n	8003d64 <memcpy+0xc>
 8003d62:	4770      	bx	lr
 8003d64:	b510      	push	{r4, lr}
 8003d66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d6a:	4291      	cmp	r1, r2
 8003d6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d70:	d1f9      	bne.n	8003d66 <memcpy+0xe>
 8003d72:	bd10      	pop	{r4, pc}

08003d74 <memmove>:
 8003d74:	4288      	cmp	r0, r1
 8003d76:	b510      	push	{r4, lr}
 8003d78:	eb01 0402 	add.w	r4, r1, r2
 8003d7c:	d902      	bls.n	8003d84 <memmove+0x10>
 8003d7e:	4284      	cmp	r4, r0
 8003d80:	4623      	mov	r3, r4
 8003d82:	d807      	bhi.n	8003d94 <memmove+0x20>
 8003d84:	1e43      	subs	r3, r0, #1
 8003d86:	42a1      	cmp	r1, r4
 8003d88:	d008      	beq.n	8003d9c <memmove+0x28>
 8003d8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003d92:	e7f8      	b.n	8003d86 <memmove+0x12>
 8003d94:	4601      	mov	r1, r0
 8003d96:	4402      	add	r2, r0
 8003d98:	428a      	cmp	r2, r1
 8003d9a:	d100      	bne.n	8003d9e <memmove+0x2a>
 8003d9c:	bd10      	pop	{r4, pc}
 8003d9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003da2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003da6:	e7f7      	b.n	8003d98 <memmove+0x24>

08003da8 <_free_r>:
 8003da8:	b538      	push	{r3, r4, r5, lr}
 8003daa:	4605      	mov	r5, r0
 8003dac:	2900      	cmp	r1, #0
 8003dae:	d043      	beq.n	8003e38 <_free_r+0x90>
 8003db0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003db4:	1f0c      	subs	r4, r1, #4
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	bfb8      	it	lt
 8003dba:	18e4      	addlt	r4, r4, r3
 8003dbc:	f000 f8d0 	bl	8003f60 <__malloc_lock>
 8003dc0:	4a1e      	ldr	r2, [pc, #120]	; (8003e3c <_free_r+0x94>)
 8003dc2:	6813      	ldr	r3, [r2, #0]
 8003dc4:	4610      	mov	r0, r2
 8003dc6:	b933      	cbnz	r3, 8003dd6 <_free_r+0x2e>
 8003dc8:	6063      	str	r3, [r4, #4]
 8003dca:	6014      	str	r4, [r2, #0]
 8003dcc:	4628      	mov	r0, r5
 8003dce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003dd2:	f000 b8cb 	b.w	8003f6c <__malloc_unlock>
 8003dd6:	42a3      	cmp	r3, r4
 8003dd8:	d90a      	bls.n	8003df0 <_free_r+0x48>
 8003dda:	6821      	ldr	r1, [r4, #0]
 8003ddc:	1862      	adds	r2, r4, r1
 8003dde:	4293      	cmp	r3, r2
 8003de0:	bf01      	itttt	eq
 8003de2:	681a      	ldreq	r2, [r3, #0]
 8003de4:	685b      	ldreq	r3, [r3, #4]
 8003de6:	1852      	addeq	r2, r2, r1
 8003de8:	6022      	streq	r2, [r4, #0]
 8003dea:	6063      	str	r3, [r4, #4]
 8003dec:	6004      	str	r4, [r0, #0]
 8003dee:	e7ed      	b.n	8003dcc <_free_r+0x24>
 8003df0:	461a      	mov	r2, r3
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	b10b      	cbz	r3, 8003dfa <_free_r+0x52>
 8003df6:	42a3      	cmp	r3, r4
 8003df8:	d9fa      	bls.n	8003df0 <_free_r+0x48>
 8003dfa:	6811      	ldr	r1, [r2, #0]
 8003dfc:	1850      	adds	r0, r2, r1
 8003dfe:	42a0      	cmp	r0, r4
 8003e00:	d10b      	bne.n	8003e1a <_free_r+0x72>
 8003e02:	6820      	ldr	r0, [r4, #0]
 8003e04:	4401      	add	r1, r0
 8003e06:	1850      	adds	r0, r2, r1
 8003e08:	4283      	cmp	r3, r0
 8003e0a:	6011      	str	r1, [r2, #0]
 8003e0c:	d1de      	bne.n	8003dcc <_free_r+0x24>
 8003e0e:	6818      	ldr	r0, [r3, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	4401      	add	r1, r0
 8003e14:	6011      	str	r1, [r2, #0]
 8003e16:	6053      	str	r3, [r2, #4]
 8003e18:	e7d8      	b.n	8003dcc <_free_r+0x24>
 8003e1a:	d902      	bls.n	8003e22 <_free_r+0x7a>
 8003e1c:	230c      	movs	r3, #12
 8003e1e:	602b      	str	r3, [r5, #0]
 8003e20:	e7d4      	b.n	8003dcc <_free_r+0x24>
 8003e22:	6820      	ldr	r0, [r4, #0]
 8003e24:	1821      	adds	r1, r4, r0
 8003e26:	428b      	cmp	r3, r1
 8003e28:	bf01      	itttt	eq
 8003e2a:	6819      	ldreq	r1, [r3, #0]
 8003e2c:	685b      	ldreq	r3, [r3, #4]
 8003e2e:	1809      	addeq	r1, r1, r0
 8003e30:	6021      	streq	r1, [r4, #0]
 8003e32:	6063      	str	r3, [r4, #4]
 8003e34:	6054      	str	r4, [r2, #4]
 8003e36:	e7c9      	b.n	8003dcc <_free_r+0x24>
 8003e38:	bd38      	pop	{r3, r4, r5, pc}
 8003e3a:	bf00      	nop
 8003e3c:	200002d4 	.word	0x200002d4

08003e40 <_malloc_r>:
 8003e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e42:	1ccd      	adds	r5, r1, #3
 8003e44:	f025 0503 	bic.w	r5, r5, #3
 8003e48:	3508      	adds	r5, #8
 8003e4a:	2d0c      	cmp	r5, #12
 8003e4c:	bf38      	it	cc
 8003e4e:	250c      	movcc	r5, #12
 8003e50:	2d00      	cmp	r5, #0
 8003e52:	4606      	mov	r6, r0
 8003e54:	db01      	blt.n	8003e5a <_malloc_r+0x1a>
 8003e56:	42a9      	cmp	r1, r5
 8003e58:	d903      	bls.n	8003e62 <_malloc_r+0x22>
 8003e5a:	230c      	movs	r3, #12
 8003e5c:	6033      	str	r3, [r6, #0]
 8003e5e:	2000      	movs	r0, #0
 8003e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e62:	f000 f87d 	bl	8003f60 <__malloc_lock>
 8003e66:	4921      	ldr	r1, [pc, #132]	; (8003eec <_malloc_r+0xac>)
 8003e68:	680a      	ldr	r2, [r1, #0]
 8003e6a:	4614      	mov	r4, r2
 8003e6c:	b99c      	cbnz	r4, 8003e96 <_malloc_r+0x56>
 8003e6e:	4f20      	ldr	r7, [pc, #128]	; (8003ef0 <_malloc_r+0xb0>)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	b923      	cbnz	r3, 8003e7e <_malloc_r+0x3e>
 8003e74:	4621      	mov	r1, r4
 8003e76:	4630      	mov	r0, r6
 8003e78:	f000 f862 	bl	8003f40 <_sbrk_r>
 8003e7c:	6038      	str	r0, [r7, #0]
 8003e7e:	4629      	mov	r1, r5
 8003e80:	4630      	mov	r0, r6
 8003e82:	f000 f85d 	bl	8003f40 <_sbrk_r>
 8003e86:	1c43      	adds	r3, r0, #1
 8003e88:	d123      	bne.n	8003ed2 <_malloc_r+0x92>
 8003e8a:	230c      	movs	r3, #12
 8003e8c:	4630      	mov	r0, r6
 8003e8e:	6033      	str	r3, [r6, #0]
 8003e90:	f000 f86c 	bl	8003f6c <__malloc_unlock>
 8003e94:	e7e3      	b.n	8003e5e <_malloc_r+0x1e>
 8003e96:	6823      	ldr	r3, [r4, #0]
 8003e98:	1b5b      	subs	r3, r3, r5
 8003e9a:	d417      	bmi.n	8003ecc <_malloc_r+0x8c>
 8003e9c:	2b0b      	cmp	r3, #11
 8003e9e:	d903      	bls.n	8003ea8 <_malloc_r+0x68>
 8003ea0:	6023      	str	r3, [r4, #0]
 8003ea2:	441c      	add	r4, r3
 8003ea4:	6025      	str	r5, [r4, #0]
 8003ea6:	e004      	b.n	8003eb2 <_malloc_r+0x72>
 8003ea8:	6863      	ldr	r3, [r4, #4]
 8003eaa:	42a2      	cmp	r2, r4
 8003eac:	bf0c      	ite	eq
 8003eae:	600b      	streq	r3, [r1, #0]
 8003eb0:	6053      	strne	r3, [r2, #4]
 8003eb2:	4630      	mov	r0, r6
 8003eb4:	f000 f85a 	bl	8003f6c <__malloc_unlock>
 8003eb8:	f104 000b 	add.w	r0, r4, #11
 8003ebc:	1d23      	adds	r3, r4, #4
 8003ebe:	f020 0007 	bic.w	r0, r0, #7
 8003ec2:	1ac2      	subs	r2, r0, r3
 8003ec4:	d0cc      	beq.n	8003e60 <_malloc_r+0x20>
 8003ec6:	1a1b      	subs	r3, r3, r0
 8003ec8:	50a3      	str	r3, [r4, r2]
 8003eca:	e7c9      	b.n	8003e60 <_malloc_r+0x20>
 8003ecc:	4622      	mov	r2, r4
 8003ece:	6864      	ldr	r4, [r4, #4]
 8003ed0:	e7cc      	b.n	8003e6c <_malloc_r+0x2c>
 8003ed2:	1cc4      	adds	r4, r0, #3
 8003ed4:	f024 0403 	bic.w	r4, r4, #3
 8003ed8:	42a0      	cmp	r0, r4
 8003eda:	d0e3      	beq.n	8003ea4 <_malloc_r+0x64>
 8003edc:	1a21      	subs	r1, r4, r0
 8003ede:	4630      	mov	r0, r6
 8003ee0:	f000 f82e 	bl	8003f40 <_sbrk_r>
 8003ee4:	3001      	adds	r0, #1
 8003ee6:	d1dd      	bne.n	8003ea4 <_malloc_r+0x64>
 8003ee8:	e7cf      	b.n	8003e8a <_malloc_r+0x4a>
 8003eea:	bf00      	nop
 8003eec:	200002d4 	.word	0x200002d4
 8003ef0:	200002d8 	.word	0x200002d8

08003ef4 <_realloc_r>:
 8003ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ef6:	4607      	mov	r7, r0
 8003ef8:	4614      	mov	r4, r2
 8003efa:	460e      	mov	r6, r1
 8003efc:	b921      	cbnz	r1, 8003f08 <_realloc_r+0x14>
 8003efe:	4611      	mov	r1, r2
 8003f00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003f04:	f7ff bf9c 	b.w	8003e40 <_malloc_r>
 8003f08:	b922      	cbnz	r2, 8003f14 <_realloc_r+0x20>
 8003f0a:	f7ff ff4d 	bl	8003da8 <_free_r>
 8003f0e:	4625      	mov	r5, r4
 8003f10:	4628      	mov	r0, r5
 8003f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f14:	f000 f830 	bl	8003f78 <_malloc_usable_size_r>
 8003f18:	42a0      	cmp	r0, r4
 8003f1a:	d20f      	bcs.n	8003f3c <_realloc_r+0x48>
 8003f1c:	4621      	mov	r1, r4
 8003f1e:	4638      	mov	r0, r7
 8003f20:	f7ff ff8e 	bl	8003e40 <_malloc_r>
 8003f24:	4605      	mov	r5, r0
 8003f26:	2800      	cmp	r0, #0
 8003f28:	d0f2      	beq.n	8003f10 <_realloc_r+0x1c>
 8003f2a:	4631      	mov	r1, r6
 8003f2c:	4622      	mov	r2, r4
 8003f2e:	f7ff ff13 	bl	8003d58 <memcpy>
 8003f32:	4631      	mov	r1, r6
 8003f34:	4638      	mov	r0, r7
 8003f36:	f7ff ff37 	bl	8003da8 <_free_r>
 8003f3a:	e7e9      	b.n	8003f10 <_realloc_r+0x1c>
 8003f3c:	4635      	mov	r5, r6
 8003f3e:	e7e7      	b.n	8003f10 <_realloc_r+0x1c>

08003f40 <_sbrk_r>:
 8003f40:	b538      	push	{r3, r4, r5, lr}
 8003f42:	2300      	movs	r3, #0
 8003f44:	4d05      	ldr	r5, [pc, #20]	; (8003f5c <_sbrk_r+0x1c>)
 8003f46:	4604      	mov	r4, r0
 8003f48:	4608      	mov	r0, r1
 8003f4a:	602b      	str	r3, [r5, #0]
 8003f4c:	f7fc fafe 	bl	800054c <_sbrk>
 8003f50:	1c43      	adds	r3, r0, #1
 8003f52:	d102      	bne.n	8003f5a <_sbrk_r+0x1a>
 8003f54:	682b      	ldr	r3, [r5, #0]
 8003f56:	b103      	cbz	r3, 8003f5a <_sbrk_r+0x1a>
 8003f58:	6023      	str	r3, [r4, #0]
 8003f5a:	bd38      	pop	{r3, r4, r5, pc}
 8003f5c:	20000478 	.word	0x20000478

08003f60 <__malloc_lock>:
 8003f60:	4801      	ldr	r0, [pc, #4]	; (8003f68 <__malloc_lock+0x8>)
 8003f62:	f000 b811 	b.w	8003f88 <__retarget_lock_acquire_recursive>
 8003f66:	bf00      	nop
 8003f68:	20000480 	.word	0x20000480

08003f6c <__malloc_unlock>:
 8003f6c:	4801      	ldr	r0, [pc, #4]	; (8003f74 <__malloc_unlock+0x8>)
 8003f6e:	f000 b80c 	b.w	8003f8a <__retarget_lock_release_recursive>
 8003f72:	bf00      	nop
 8003f74:	20000480 	.word	0x20000480

08003f78 <_malloc_usable_size_r>:
 8003f78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f7c:	1f18      	subs	r0, r3, #4
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	bfbc      	itt	lt
 8003f82:	580b      	ldrlt	r3, [r1, r0]
 8003f84:	18c0      	addlt	r0, r0, r3
 8003f86:	4770      	bx	lr

08003f88 <__retarget_lock_acquire_recursive>:
 8003f88:	4770      	bx	lr

08003f8a <__retarget_lock_release_recursive>:
 8003f8a:	4770      	bx	lr

08003f8c <_init>:
 8003f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f8e:	bf00      	nop
 8003f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f92:	bc08      	pop	{r3}
 8003f94:	469e      	mov	lr, r3
 8003f96:	4770      	bx	lr

08003f98 <_fini>:
 8003f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f9a:	bf00      	nop
 8003f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f9e:	bc08      	pop	{r3}
 8003fa0:	469e      	mov	lr, r3
 8003fa2:	4770      	bx	lr
